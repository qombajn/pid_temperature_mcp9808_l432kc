
pid_temperature_mcp9808_l432kc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008334  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a28  080084c8  080084c8  000094c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ef0  08008ef0  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008ef0  08008ef0  00009ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ef8  08008ef8  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ef8  08008ef8  00009ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008efc  08008efc  00009efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08008f00  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  200001dc  080090dc  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  080090dc  0000a928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cc6  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000311d  00000000  00000000  0001ced2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  0001fff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdc  00000000  00000000  00020f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002275a  00000000  00000000  00021b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c53  00000000  00000000  000442be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c54d1  00000000  00000000  00059f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f3e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f48  00000000  00000000  0011f428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00124370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084ac 	.word	0x080084ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080084ac 	.word	0x080084ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_DMA_Init+0x38>)
 8000ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed0 <MX_DMA_Init+0x38>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_DMA_Init+0x38>)
 8000eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2011      	movs	r0, #17
 8000ebc:	f001 f8db 	bl	8002076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000ec0:	2011      	movs	r0, #17
 8000ec2:	f001 f8f4 	bl	80020ae <HAL_NVIC_EnableIRQ>

}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa8 <MX_GPIO_Init+0xd4>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	4a2e      	ldr	r2, [pc, #184]	@ (8000fa8 <MX_GPIO_Init+0xd4>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa8 <MX_GPIO_Init+0xd4>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b29      	ldr	r3, [pc, #164]	@ (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	4a28      	ldr	r2, [pc, #160]	@ (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0e:	4b26      	ldr	r3, [pc, #152]	@ (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	4a22      	ldr	r2, [pc, #136]	@ (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f26:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LOGIC_ANALYZER_TIM15_Pin|RED_LED_Pin|LOGIC_ANALYZER_CONTROL_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2170      	movs	r1, #112	@ 0x70
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3a:	f001 fcb3 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HYSTERESIS_CONTROL_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2109      	movs	r1, #9
 8000f42:	481a      	ldr	r0, [pc, #104]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000f44:	f001 fcae 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_BUTTON_Pin;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RED_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f60:	f001 fb36 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LOGIC_ANALYZER_TIM15_Pin|RED_LED_Pin|LOGIC_ANALYZER_CONTROL_Pin;
 8000f64:	2370      	movs	r3, #112	@ 0x70
 8000f66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7e:	f001 fb27 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = HYSTERESIS_CONTROL_Pin|LD3_Pin;
 8000f82:	2309      	movs	r3, #9
 8000f84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	4619      	mov	r1, r3
 8000f98:	4804      	ldr	r0, [pc, #16]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000f9a:	f001 fb19 	bl	80025d0 <HAL_GPIO_Init>

}
 8000f9e:	bf00      	nop
 8000fa0:	3720      	adds	r7, #32
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48000400 	.word	0x48000400

08000fb0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001024 <MX_I2C1_Init+0x74>)
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001028 <MX_I2C1_Init+0x78>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <MX_I2C1_Init+0x74>)
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800102c <MX_I2C1_Init+0x7c>)
 8000fbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	@ (8001024 <MX_I2C1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <MX_I2C1_Init+0x74>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <MX_I2C1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <MX_I2C1_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <MX_I2C1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <MX_I2C1_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <MX_I2C1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fea:	480e      	ldr	r0, [pc, #56]	@ (8001024 <MX_I2C1_Init+0x74>)
 8000fec:	f001 fc72 	bl	80028d4 <HAL_I2C_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ff6:	f000 fa25 	bl	8001444 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4809      	ldr	r0, [pc, #36]	@ (8001024 <MX_I2C1_Init+0x74>)
 8000ffe:	f002 f887 	bl	8003110 <HAL_I2CEx_ConfigAnalogFilter>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001008:	f000 fa1c 	bl	8001444 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800100c:	2100      	movs	r1, #0
 800100e:	4805      	ldr	r0, [pc, #20]	@ (8001024 <MX_I2C1_Init+0x74>)
 8001010:	f002 f8c9 	bl	80031a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800101a:	f000 fa13 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200001f8 	.word	0x200001f8
 8001028:	40005400 	.word	0x40005400
 800102c:	0060112f 	.word	0x0060112f

08001030 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <MX_I2C3_Init+0x74>)
 8001036:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <MX_I2C3_Init+0x78>)
 8001038:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0060112F;
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_I2C3_Init+0x74>)
 800103c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ac <MX_I2C3_Init+0x7c>)
 800103e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001040:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <MX_I2C3_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001046:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <MX_I2C3_Init+0x74>)
 8001048:	2201      	movs	r2, #1
 800104a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104c:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <MX_I2C3_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001052:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_I2C3_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <MX_I2C3_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_I2C3_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <MX_I2C3_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800106a:	480e      	ldr	r0, [pc, #56]	@ (80010a4 <MX_I2C3_Init+0x74>)
 800106c:	f001 fc32 	bl	80028d4 <HAL_I2C_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001076:	f000 f9e5 	bl	8001444 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800107a:	2100      	movs	r1, #0
 800107c:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <MX_I2C3_Init+0x74>)
 800107e:	f002 f847 	bl	8003110 <HAL_I2CEx_ConfigAnalogFilter>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001088:	f000 f9dc 	bl	8001444 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800108c:	2100      	movs	r1, #0
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_I2C3_Init+0x74>)
 8001090:	f002 f889 	bl	80031a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 f9d3 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000024c 	.word	0x2000024c
 80010a8:	40005c00 	.word	0x40005c00
 80010ac:	0060112f 	.word	0x0060112f

080010b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0a2      	sub	sp, #136	@ 0x88
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c8:	f107 0320 	add.w	r3, r7, #32
 80010cc:	2254      	movs	r2, #84	@ 0x54
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f005 f920 	bl	8006316 <memset>
  if(i2cHandle->Instance==I2C1)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a4f      	ldr	r2, [pc, #316]	@ (8001218 <HAL_I2C_MspInit+0x168>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d13a      	bne.n	8001156 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010e0:	2340      	movs	r3, #64	@ 0x40
 80010e2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 ff53 	bl	8003f98 <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010f8:	f000 f9a4 	bl	8001444 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b47      	ldr	r3, [pc, #284]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001100:	4a46      	ldr	r2, [pc, #280]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001108:	4b44      	ldr	r3, [pc, #272]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001114:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001118:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111a:	2312      	movs	r3, #18
 800111c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001128:	2304      	movs	r3, #4
 800112a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001138:	f001 fa4a 	bl	80025d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800113c:	4b37      	ldr	r3, [pc, #220]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001140:	4a36      	ldr	r2, [pc, #216]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 8001142:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001146:	6593      	str	r3, [r2, #88]	@ 0x58
 8001148:	4b34      	ldr	r3, [pc, #208]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001154:	e05c      	b.n	8001210 <HAL_I2C_MspInit+0x160>
  else if(i2cHandle->Instance==I2C3)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a31      	ldr	r2, [pc, #196]	@ (8001220 <HAL_I2C_MspInit+0x170>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d157      	bne.n	8001210 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001160:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001164:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001166:	2300      	movs	r3, #0
 8001168:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	4618      	mov	r0, r3
 8001170:	f002 ff12 	bl	8003f98 <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800117a:	f000 f963 	bl	8001444 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b27      	ldr	r3, [pc, #156]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	4a26      	ldr	r2, [pc, #152]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118a:	4b24      	ldr	r3, [pc, #144]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b21      	ldr	r3, [pc, #132]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	4a20      	ldr	r2, [pc, #128]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a2:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b2:	2312      	movs	r3, #18
 80011b4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011c0:	2304      	movs	r3, #4
 80011c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d0:	f001 f9fe 	bl	80025d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011d4:	2310      	movs	r3, #16
 80011d6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d8:	2312      	movs	r3, #18
 80011da:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011e6:	2304      	movs	r3, #4
 80011e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80011f0:	4619      	mov	r1, r3
 80011f2:	480c      	ldr	r0, [pc, #48]	@ (8001224 <HAL_I2C_MspInit+0x174>)
 80011f4:	f001 f9ec 	bl	80025d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fc:	4a07      	ldr	r2, [pc, #28]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 80011fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001202:	6593      	str	r3, [r2, #88]	@ 0x58
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <HAL_I2C_MspInit+0x16c>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001208:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	bf00      	nop
 8001212:	3788      	adds	r7, #136	@ 0x88
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40005400 	.word	0x40005400
 800121c:	40021000 	.word	0x40021000
 8001220:	40005c00 	.word	0x40005c00
 8001224:	48000400 	.word	0x48000400

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122c:	f000 fdaf 	bl	8001d8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001230:	f000 f8a6 	bl	8001380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001234:	f7ff fe4e 	bl	8000ed4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001238:	f7ff fe2e 	bl	8000e98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800123c:	f000 fcb0 	bl	8001ba0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001240:	f7ff feb6 	bl	8000fb0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001244:	f7ff fef4 	bl	8001030 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

	ssd1306_Init();
 8001248:	f000 f95a 	bl	8001500 <ssd1306_Init>
	ssd1306_Fill(Black);
 800124c:	2000      	movs	r0, #0
 800124e:	f000 f9c1 	bl	80015d4 <ssd1306_Fill>
	ssd1306_SetCursor(20, 0);
 8001252:	2100      	movs	r1, #0
 8001254:	2014      	movs	r0, #20
 8001256:	f000 fb19 	bl	800188c <ssd1306_SetCursor>
	ssd1306_WriteString("01159231@pw.edu.pl", Font_6x8, White);
 800125a:	4a3d      	ldr	r2, [pc, #244]	@ (8001350 <main+0x128>)
 800125c:	2301      	movs	r3, #1
 800125e:	ca06      	ldmia	r2, {r1, r2}
 8001260:	483c      	ldr	r0, [pc, #240]	@ (8001354 <main+0x12c>)
 8001262:	f000 faed 	bl	8001840 <ssd1306_WriteString>
	ssd1306_SetCursor(22, 12);
 8001266:	210c      	movs	r1, #12
 8001268:	2016      	movs	r0, #22
 800126a:	f000 fb0f 	bl	800188c <ssd1306_SetCursor>
	ssd1306_WriteString("MCP9808 sensor", Font_6x8, White);
 800126e:	4a38      	ldr	r2, [pc, #224]	@ (8001350 <main+0x128>)
 8001270:	2301      	movs	r3, #1
 8001272:	ca06      	ldmia	r2, {r1, r2}
 8001274:	4838      	ldr	r0, [pc, #224]	@ (8001358 <main+0x130>)
 8001276:	f000 fae3 	bl	8001840 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 24);
 800127a:	2118      	movs	r1, #24
 800127c:	200a      	movs	r0, #10
 800127e:	f000 fb05 	bl	800188c <ssd1306_SetCursor>
	ssd1306_WriteString("Temperature control", Font_6x8, White);
 8001282:	4a33      	ldr	r2, [pc, #204]	@ (8001350 <main+0x128>)
 8001284:	2301      	movs	r3, #1
 8001286:	ca06      	ldmia	r2, {r1, r2}
 8001288:	4834      	ldr	r0, [pc, #208]	@ (800135c <main+0x134>)
 800128a:	f000 fad9 	bl	8001840 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 36);
 800128e:	2124      	movs	r1, #36	@ 0x24
 8001290:	200a      	movs	r0, #10
 8001292:	f000 fafb 	bl	800188c <ssd1306_SetCursor>
	ssd1306_WriteString("(hysteresis vs. PI)", Font_6x8, White);
 8001296:	4a2e      	ldr	r2, [pc, #184]	@ (8001350 <main+0x128>)
 8001298:	2301      	movs	r3, #1
 800129a:	ca06      	ldmia	r2, {r1, r2}
 800129c:	4830      	ldr	r0, [pc, #192]	@ (8001360 <main+0x138>)
 800129e:	f000 facf 	bl	8001840 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80012a2:	f000 f9bb 	bl	800161c <ssd1306_UpdateScreen>

	Mcp9808SetResolution(2);
 80012a6:	2002      	movs	r0, #2
 80012a8:	f000 f8d2 	bl	8001450 <Mcp9808SetResolution>

	//HAL_TIM_Base_Start_IT(&htim15); // TODO: control loop interrupt

	uartSoftTimer = HAL_GetTick();
 80012ac:	f000 fdd8 	bl	8001e60 <HAL_GetTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001364 <main+0x13c>)
 80012b4:	6013      	str	r3, [r2, #0]
	oledSoftTimer = HAL_GetTick();
 80012b6:	f000 fdd3 	bl	8001e60 <HAL_GetTick>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001368 <main+0x140>)
 80012be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
	while (1)
	{

#ifndef USE_SPRINTF_INSIDE_INTERRUPT
		if (HAL_GetTick() - uartSoftTimer > UART_SEND_PERIOD)
 80012c0:	f000 fdce 	bl	8001e60 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b27      	ldr	r3, [pc, #156]	@ (8001364 <main+0x13c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012d0:	d919      	bls.n	8001306 <main+0xde>
		{
			uartSoftTimer = HAL_GetTick();
 80012d2:	f000 fdc5 	bl	8001e60 <HAL_GetTick>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a22      	ldr	r2, [pc, #136]	@ (8001364 <main+0x13c>)
 80012da:	6013      	str	r3, [r2, #0]
			sprintf((char*) msgStr, "MCP9808 reading: %.3f °C\r\n", tempVal);
 80012dc:	4b23      	ldr	r3, [pc, #140]	@ (800136c <main+0x144>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f931 	bl	8000548 <__aeabi_f2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4921      	ldr	r1, [pc, #132]	@ (8001370 <main+0x148>)
 80012ec:	4821      	ldr	r0, [pc, #132]	@ (8001374 <main+0x14c>)
 80012ee:	f004 ffaf 	bl	8006250 <siprintf>
			HAL_UART_Transmit_DMA(UART_BUS_POINTER, msgStr,
					strlen((char*) msgStr));
 80012f2:	4820      	ldr	r0, [pc, #128]	@ (8001374 <main+0x14c>)
 80012f4:	f7fe ffbc 	bl	8000270 <strlen>
 80012f8:	4603      	mov	r3, r0
			HAL_UART_Transmit_DMA(UART_BUS_POINTER, msgStr,
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	491d      	ldr	r1, [pc, #116]	@ (8001374 <main+0x14c>)
 8001300:	481d      	ldr	r0, [pc, #116]	@ (8001378 <main+0x150>)
 8001302:	f003 f98f 	bl	8004624 <HAL_UART_Transmit_DMA>
		}
#endif

		if (HAL_GetTick() - oledSoftTimer > OLED_UPDATE_PERIOD)
 8001306:	f000 fdab 	bl	8001e60 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <main+0x140>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2bfa      	cmp	r3, #250	@ 0xfa
 8001314:	d9d4      	bls.n	80012c0 <main+0x98>
		{
			oledSoftTimer = HAL_GetTick();
 8001316:	f000 fda3 	bl	8001e60 <HAL_GetTick>
 800131a:	4603      	mov	r3, r0
 800131c:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <main+0x140>)
 800131e:	6013      	str	r3, [r2, #0]
			sprintf((char*) msgStr, "T_plant = %.1f deg. C\r\n", tempVal);
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <main+0x144>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_f2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4913      	ldr	r1, [pc, #76]	@ (800137c <main+0x154>)
 8001330:	4810      	ldr	r0, [pc, #64]	@ (8001374 <main+0x14c>)
 8001332:	f004 ff8d 	bl	8006250 <siprintf>
			ssd1306_SetCursor(2, 52);
 8001336:	2134      	movs	r1, #52	@ 0x34
 8001338:	2002      	movs	r0, #2
 800133a:	f000 faa7 	bl	800188c <ssd1306_SetCursor>
			ssd1306_WriteString((char*) msgStr, Font_6x8, White);
 800133e:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <main+0x128>)
 8001340:	2301      	movs	r3, #1
 8001342:	ca06      	ldmia	r2, {r1, r2}
 8001344:	480b      	ldr	r0, [pc, #44]	@ (8001374 <main+0x14c>)
 8001346:	f000 fa7b 	bl	8001840 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800134a:	f000 f967 	bl	800161c <ssd1306_UpdateScreen>
		if (HAL_GetTick() - uartSoftTimer > UART_SEND_PERIOD)
 800134e:	e7b7      	b.n	80012c0 <main+0x98>
 8001350:	20000000 	.word	0x20000000
 8001354:	080084c8 	.word	0x080084c8
 8001358:	080084dc 	.word	0x080084dc
 800135c:	080084ec 	.word	0x080084ec
 8001360:	08008500 	.word	0x08008500
 8001364:	200002e4 	.word	0x200002e4
 8001368:	200002e8 	.word	0x200002e8
 800136c:	200002e0 	.word	0x200002e0
 8001370:	08008514 	.word	0x08008514
 8001374:	200002a0 	.word	0x200002a0
 8001378:	20000708 	.word	0x20000708
 800137c:	08008530 	.word	0x08008530

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b096      	sub	sp, #88	@ 0x58
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	2244      	movs	r2, #68	@ 0x44
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f004 ffc1 	bl	8006316 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	463b      	mov	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013a6:	f001 ff69 	bl	800327c <HAL_PWREx_ControlVoltageScaling>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013b0:	f000 f848 	bl	8001444 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013b4:	f001 ff44 	bl	8003240 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013b8:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <SystemClock_Config+0xc0>)
 80013ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013be:	4a20      	ldr	r2, [pc, #128]	@ (8001440 <SystemClock_Config+0xc0>)
 80013c0:	f023 0318 	bic.w	r3, r3, #24
 80013c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80013c8:	2314      	movs	r3, #20
 80013ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013d8:	2360      	movs	r3, #96	@ 0x60
 80013da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013dc:	2302      	movs	r3, #2
 80013de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013e0:	2301      	movs	r3, #1
 80013e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80013e8:	2310      	movs	r3, #16
 80013ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013ec:	2307      	movs	r3, #7
 80013ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4618      	mov	r0, r3
 80013fe:	f001 ff93 	bl	8003328 <HAL_RCC_OscConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001408:	f000 f81c 	bl	8001444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140c:	230f      	movs	r3, #15
 800140e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001410:	2303      	movs	r3, #3
 8001412:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	2101      	movs	r1, #1
 8001424:	4618      	mov	r0, r3
 8001426:	f002 fb93 	bl	8003b50 <HAL_RCC_ClockConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001430:	f000 f808 	bl	8001444 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001434:	f002 ffa6 	bl	8004384 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001438:	bf00      	nop
 800143a:	3758      	adds	r7, #88	@ 0x58
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <Error_Handler+0x8>

08001450 <Mcp9808SetResolution>:
#include "i2c.h"
#include "mcp9808.h"
#include <math.h>

void Mcp9808SetResolution(uint8_t _resolution)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af04      	add	r7, sp, #16
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
	// Mode Resolution SampleTime
	//  0    0.5 °C       30 ms
	//  1    0.25 °C      65 ms
	//  2    0.125 °C     130 ms
	//  3    0.0625 °C    250 ms
	uint8_t resolution = _resolution & 0b00000011;
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(MCP9808_I2C_BUS, MCP9808_I2C_ADDRESS,
 8001464:	23c8      	movs	r3, #200	@ 0xc8
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	2301      	movs	r3, #1
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	f107 030f 	add.w	r3, r7, #15
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2301      	movs	r3, #1
 8001474:	2208      	movs	r2, #8
 8001476:	2130      	movs	r1, #48	@ 0x30
 8001478:	4803      	ldr	r0, [pc, #12]	@ (8001488 <Mcp9808SetResolution+0x38>)
 800147a:	f001 fac7 	bl	8002a0c <HAL_I2C_Mem_Write>
	MCP9808_REG_RESOLUTION,
	I2C_MEMADD_SIZE_8BIT, &resolution, 1, 200u);

}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000024c 	.word	0x2000024c

0800148c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af04      	add	r7, sp, #16
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	2301      	movs	r3, #1
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2301      	movs	r3, #1
 80014b6:	2200      	movs	r2, #0
 80014b8:	2178      	movs	r1, #120	@ 0x78
 80014ba:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <ssd1306_WriteCommand+0x2c>)
 80014bc:	f001 faa6 	bl	8002a0c <HAL_I2C_Mem_Write>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200001f8 	.word	0x200001f8

080014cc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af04      	add	r7, sp, #16
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	f04f 32ff 	mov.w	r2, #4294967295
 80014de:	9202      	str	r2, [sp, #8]
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2301      	movs	r3, #1
 80014e8:	2240      	movs	r2, #64	@ 0x40
 80014ea:	2178      	movs	r1, #120	@ 0x78
 80014ec:	4803      	ldr	r0, [pc, #12]	@ (80014fc <ssd1306_WriteData+0x30>)
 80014ee:	f001 fa8d 	bl	8002a0c <HAL_I2C_Mem_Write>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001f8 	.word	0x200001f8

08001500 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001504:	f7ff ffc2 	bl	800148c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001508:	2064      	movs	r0, #100	@ 0x64
 800150a:	f000 fcb5 	bl	8001e78 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800150e:	2000      	movs	r0, #0
 8001510:	f000 f9e8 	bl	80018e4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001514:	2020      	movs	r0, #32
 8001516:	f7ff ffc1 	bl	800149c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff ffbe 	bl	800149c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001520:	20b0      	movs	r0, #176	@ 0xb0
 8001522:	f7ff ffbb 	bl	800149c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8001526:	20c0      	movs	r0, #192	@ 0xc0
 8001528:	f7ff ffb8 	bl	800149c <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff ffb5 	bl	800149c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001532:	2010      	movs	r0, #16
 8001534:	f7ff ffb2 	bl	800149c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001538:	2040      	movs	r0, #64	@ 0x40
 800153a:	f7ff ffaf 	bl	800149c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800153e:	20ff      	movs	r0, #255	@ 0xff
 8001540:	f000 f9bc 	bl	80018bc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8001544:	20a0      	movs	r0, #160	@ 0xa0
 8001546:	f7ff ffa9 	bl	800149c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800154a:	20a6      	movs	r0, #166	@ 0xa6
 800154c:	f7ff ffa6 	bl	800149c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001550:	20a8      	movs	r0, #168	@ 0xa8
 8001552:	f7ff ffa3 	bl	800149c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001556:	203f      	movs	r0, #63	@ 0x3f
 8001558:	f7ff ffa0 	bl	800149c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800155c:	20a4      	movs	r0, #164	@ 0xa4
 800155e:	f7ff ff9d 	bl	800149c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001562:	20d3      	movs	r0, #211	@ 0xd3
 8001564:	f7ff ff9a 	bl	800149c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff ff97 	bl	800149c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800156e:	20d5      	movs	r0, #213	@ 0xd5
 8001570:	f7ff ff94 	bl	800149c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001574:	20f0      	movs	r0, #240	@ 0xf0
 8001576:	f7ff ff91 	bl	800149c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800157a:	20d9      	movs	r0, #217	@ 0xd9
 800157c:	f7ff ff8e 	bl	800149c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001580:	2022      	movs	r0, #34	@ 0x22
 8001582:	f7ff ff8b 	bl	800149c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001586:	20da      	movs	r0, #218	@ 0xda
 8001588:	f7ff ff88 	bl	800149c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800158c:	2012      	movs	r0, #18
 800158e:	f7ff ff85 	bl	800149c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001592:	20db      	movs	r0, #219	@ 0xdb
 8001594:	f7ff ff82 	bl	800149c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001598:	2020      	movs	r0, #32
 800159a:	f7ff ff7f 	bl	800149c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800159e:	208d      	movs	r0, #141	@ 0x8d
 80015a0:	f7ff ff7c 	bl	800149c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80015a4:	2014      	movs	r0, #20
 80015a6:	f7ff ff79 	bl	800149c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80015aa:	2001      	movs	r0, #1
 80015ac:	f000 f99a 	bl	80018e4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f000 f80f 	bl	80015d4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80015b6:	f000 f831 	bl	800161c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80015ba:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <ssd1306_Init+0xd0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80015c0:	4b03      	ldr	r3, [pc, #12]	@ (80015d0 <ssd1306_Init+0xd0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80015c6:	4b02      	ldr	r3, [pc, #8]	@ (80015d0 <ssd1306_Init+0xd0>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	711a      	strb	r2, [r3, #4]
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200006fc 	.word	0x200006fc

080015d4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	e00d      	b.n	8001600 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <ssd1306_Fill+0x1a>
 80015ea:	2100      	movs	r1, #0
 80015ec:	e000      	b.n	80015f0 <ssd1306_Fill+0x1c>
 80015ee:	21ff      	movs	r1, #255	@ 0xff
 80015f0:	4a09      	ldr	r2, [pc, #36]	@ (8001618 <ssd1306_Fill+0x44>)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	460a      	mov	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f5b3 6f82 	cmp.w	r3, #1040	@ 0x410
 8001606:	d3ed      	bcc.n	80015e4 <ssd1306_Fill+0x10>
    }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	200002ec 	.word	0x200002ec

0800161c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001622:	2300      	movs	r3, #0
 8001624:	71fb      	strb	r3, [r7, #7]
 8001626:	e01a      	b.n	800165e <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	3b50      	subs	r3, #80	@ 0x50
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff34 	bl	800149c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff ff31 	bl	800149c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800163a:	2010      	movs	r0, #16
 800163c:	f7ff ff2e 	bl	800149c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001640:	79fa      	ldrb	r2, [r7, #7]
 8001642:	4613      	mov	r3, r2
 8001644:	019b      	lsls	r3, r3, #6
 8001646:	4413      	add	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	461a      	mov	r2, r3
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <ssd1306_UpdateScreen+0x54>)
 800164e:	4413      	add	r3, r2
 8001650:	2182      	movs	r1, #130	@ 0x82
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff3a 	bl	80014cc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	3301      	adds	r3, #1
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b07      	cmp	r3, #7
 8001662:	d9e1      	bls.n	8001628 <ssd1306_UpdateScreen+0xc>
    }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200002ec 	.word	0x200002ec

08001674 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001674:	b490      	push	{r4, r7}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
 800167e:	460b      	mov	r3, r1
 8001680:	71bb      	strb	r3, [r7, #6]
 8001682:	4613      	mov	r3, r2
 8001684:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b81      	cmp	r3, #129	@ 0x81
 800168a:	d849      	bhi.n	8001720 <ssd1306_DrawPixel+0xac>
 800168c:	79bb      	ldrb	r3, [r7, #6]
 800168e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001690:	d846      	bhi.n	8001720 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001692:	797b      	ldrb	r3, [r7, #5]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d120      	bne.n	80016da <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001698:	79fa      	ldrb	r2, [r7, #7]
 800169a:	79bb      	ldrb	r3, [r7, #6]
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	b2d8      	uxtb	r0, r3
 80016a0:	4601      	mov	r1, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	019b      	lsls	r3, r3, #6
 80016a6:	440b      	add	r3, r1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	4a1f      	ldr	r2, [pc, #124]	@ (800172c <ssd1306_DrawPixel+0xb8>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	b25a      	sxtb	r2, r3
 80016b2:	79bb      	ldrb	r3, [r7, #6]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	2101      	movs	r1, #1
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b25c      	sxtb	r4, r3
 80016c4:	79fa      	ldrb	r2, [r7, #7]
 80016c6:	4601      	mov	r1, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	019b      	lsls	r3, r3, #6
 80016cc:	440b      	add	r3, r1
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	b2e1      	uxtb	r1, r4
 80016d4:	4a15      	ldr	r2, [pc, #84]	@ (800172c <ssd1306_DrawPixel+0xb8>)
 80016d6:	54d1      	strb	r1, [r2, r3]
 80016d8:	e023      	b.n	8001722 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016da:	79fa      	ldrb	r2, [r7, #7]
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	08db      	lsrs	r3, r3, #3
 80016e0:	b2d8      	uxtb	r0, r3
 80016e2:	4601      	mov	r1, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	019b      	lsls	r3, r3, #6
 80016e8:	440b      	add	r3, r1
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	4a0f      	ldr	r2, [pc, #60]	@ (800172c <ssd1306_DrawPixel+0xb8>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	b25a      	sxtb	r2, r3
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	2101      	movs	r1, #1
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	b25b      	sxtb	r3, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	b25b      	sxtb	r3, r3
 8001706:	4013      	ands	r3, r2
 8001708:	b25c      	sxtb	r4, r3
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	4601      	mov	r1, r0
 800170e:	460b      	mov	r3, r1
 8001710:	019b      	lsls	r3, r3, #6
 8001712:	440b      	add	r3, r1
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	b2e1      	uxtb	r1, r4
 800171a:	4a04      	ldr	r2, [pc, #16]	@ (800172c <ssd1306_DrawPixel+0xb8>)
 800171c:	54d1      	strb	r1, [r2, r3]
 800171e:	e000      	b.n	8001722 <ssd1306_DrawPixel+0xae>
        return;
 8001720:	bf00      	nop
    }
}
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bc90      	pop	{r4, r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200002ec 	.word	0x200002ec

08001730 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b089      	sub	sp, #36	@ 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	4604      	mov	r4, r0
 8001738:	1d38      	adds	r0, r7, #4
 800173a:	e880 0006 	stmia.w	r0, {r1, r2}
 800173e:	461a      	mov	r2, r3
 8001740:	4623      	mov	r3, r4
 8001742:	73fb      	strb	r3, [r7, #15]
 8001744:	4613      	mov	r3, r2
 8001746:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b1f      	cmp	r3, #31
 800174c:	d902      	bls.n	8001754 <ssd1306_WriteChar+0x24>
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2b7e      	cmp	r3, #126	@ 0x7e
 8001752:	d901      	bls.n	8001758 <ssd1306_WriteChar+0x28>
        return 0;
 8001754:	2300      	movs	r3, #0
 8001756:	e06c      	b.n	8001832 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001758:	4b38      	ldr	r3, [pc, #224]	@ (800183c <ssd1306_WriteChar+0x10c>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	793b      	ldrb	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	2b82      	cmp	r3, #130	@ 0x82
 8001764:	dc06      	bgt.n	8001774 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001766:	4b35      	ldr	r3, [pc, #212]	@ (800183c <ssd1306_WriteChar+0x10c>)
 8001768:	885b      	ldrh	r3, [r3, #2]
 800176a:	461a      	mov	r2, r3
 800176c:	797b      	ldrb	r3, [r7, #5]
 800176e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001770:	2b40      	cmp	r3, #64	@ 0x40
 8001772:	dd01      	ble.n	8001778 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001774:	2300      	movs	r3, #0
 8001776:	e05c      	b.n	8001832 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	e04c      	b.n	8001818 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	3b20      	subs	r3, #32
 8001784:	7979      	ldrb	r1, [r7, #5]
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4619      	mov	r1, r3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	440b      	add	r3, r1
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	e034      	b.n	8001808 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d012      	beq.n	80017d4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80017ae:	4b23      	ldr	r3, [pc, #140]	@ (800183c <ssd1306_WriteChar+0x10c>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	b2d8      	uxtb	r0, r3
 80017bc:	4b1f      	ldr	r3, [pc, #124]	@ (800183c <ssd1306_WriteChar+0x10c>)
 80017be:	885b      	ldrh	r3, [r3, #2]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	7bba      	ldrb	r2, [r7, #14]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff ff51 	bl	8001674 <ssd1306_DrawPixel>
 80017d2:	e016      	b.n	8001802 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <ssd1306_WriteChar+0x10c>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4413      	add	r3, r2
 80017e0:	b2d8      	uxtb	r0, r3
 80017e2:	4b16      	ldr	r3, [pc, #88]	@ (800183c <ssd1306_WriteChar+0x10c>)
 80017e4:	885b      	ldrh	r3, [r3, #2]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	b2d9      	uxtb	r1, r3
 80017f0:	7bbb      	ldrb	r3, [r7, #14]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf0c      	ite	eq
 80017f6:	2301      	moveq	r3, #1
 80017f8:	2300      	movne	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	f7ff ff39 	bl	8001674 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	3301      	adds	r3, #1
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	793b      	ldrb	r3, [r7, #4]
 800180a:	461a      	mov	r2, r3
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	4293      	cmp	r3, r2
 8001810:	d3c5      	bcc.n	800179e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	797b      	ldrb	r3, [r7, #5]
 800181a:	461a      	mov	r2, r3
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	4293      	cmp	r3, r2
 8001820:	d3ad      	bcc.n	800177e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <ssd1306_WriteChar+0x10c>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	793a      	ldrb	r2, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	b29a      	uxth	r2, r3
 800182c:	4b03      	ldr	r3, [pc, #12]	@ (800183c <ssd1306_WriteChar+0x10c>)
 800182e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	@ 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	200006fc 	.word	0x200006fc

08001840 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	1d38      	adds	r0, r7, #4
 800184a:	e880 0006 	stmia.w	r0, {r1, r2}
 800184e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001850:	e012      	b.n	8001878 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	7818      	ldrb	r0, [r3, #0]
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	1d3a      	adds	r2, r7, #4
 800185a:	ca06      	ldmia	r2, {r1, r2}
 800185c:	f7ff ff68 	bl	8001730 <ssd1306_WriteChar>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d002      	beq.n	8001872 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	e008      	b.n	8001884 <ssd1306_WriteString+0x44>
        }
        str++;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3301      	adds	r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e8      	bne.n	8001852 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	781b      	ldrb	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	460a      	mov	r2, r1
 8001896:	71fb      	strb	r3, [r7, #7]
 8001898:	4613      	mov	r3, r2
 800189a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <ssd1306_SetCursor+0x2c>)
 80018a2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <ssd1306_SetCursor+0x2c>)
 80018aa:	805a      	strh	r2, [r3, #2]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	200006fc 	.word	0x200006fc

080018bc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80018c6:	2381      	movs	r3, #129	@ 0x81
 80018c8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fde5 	bl	800149c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fde1 	bl	800149c <ssd1306_WriteCommand>
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80018f4:	23af      	movs	r3, #175	@ 0xaf
 80018f6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <ssd1306_SetDisplayOn+0x38>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	715a      	strb	r2, [r3, #5]
 80018fe:	e004      	b.n	800190a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001900:	23ae      	movs	r3, #174	@ 0xae
 8001902:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <ssd1306_SetDisplayOn+0x38>)
 8001906:	2200      	movs	r2, #0
 8001908:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fdc5 	bl	800149c <ssd1306_WriteCommand>
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200006fc 	.word	0x200006fc

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <HAL_MspInit+0x44>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192a:	4a0e      	ldr	r2, [pc, #56]	@ (8001964 <HAL_MspInit+0x44>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6613      	str	r3, [r2, #96]	@ 0x60
 8001932:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <HAL_MspInit+0x44>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_MspInit+0x44>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001942:	4a08      	ldr	r2, [pc, #32]	@ (8001964 <HAL_MspInit+0x44>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001948:	6593      	str	r3, [r2, #88]	@ 0x58
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_MspInit+0x44>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <NMI_Handler+0x4>

08001970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <MemManage_Handler+0x4>

08001980 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <BusFault_Handler+0x4>

08001988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <UsageFault_Handler+0x4>

08001990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019be:	f000 fa3b 	bl	8001e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <DMA1_Channel7_IRQHandler+0x10>)
 80019ce:	f000 fd20 	bl	8002412 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000790 	.word	0x20000790

080019dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019e0:	4802      	ldr	r0, [pc, #8]	@ (80019ec <USART2_IRQHandler+0x10>)
 80019e2:	f002 fe9b 	bl	800471c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000708 	.word	0x20000708

080019f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return 1;
 80019f4:	2301      	movs	r3, #1
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_kill>:

int _kill(int pid, int sig)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a0a:	f004 fcd7 	bl	80063bc <__errno>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2216      	movs	r2, #22
 8001a12:	601a      	str	r2, [r3, #0]
  return -1;
 8001a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_exit>:

void _exit (int status)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ffe7 	bl	8001a00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a32:	bf00      	nop
 8001a34:	e7fd      	b.n	8001a32 <_exit+0x12>

08001a36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e00a      	b.n	8001a5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a48:	f3af 8000 	nop.w
 8001a4c:	4601      	mov	r1, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	60ba      	str	r2, [r7, #8]
 8001a54:	b2ca      	uxtb	r2, r1
 8001a56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	dbf0      	blt.n	8001a48 <_read+0x12>
  }

  return len;
 8001a66:	687b      	ldr	r3, [r7, #4]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e009      	b.n	8001a96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	60ba      	str	r2, [r7, #8]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dbf1      	blt.n	8001a82 <_write+0x12>
  }
  return len;
 8001a9e:	687b      	ldr	r3, [r7, #4]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_close>:

int _close(int file)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ad0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_isatty>:

int _isatty(int file)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b085      	sub	sp, #20
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b18:	4a14      	ldr	r2, [pc, #80]	@ (8001b6c <_sbrk+0x5c>)
 8001b1a:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <_sbrk+0x60>)
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b24:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <_sbrk+0x64>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <_sbrk+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b32:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d207      	bcs.n	8001b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b40:	f004 fc3c 	bl	80063bc <__errno>
 8001b44:	4603      	mov	r3, r0
 8001b46:	220c      	movs	r2, #12
 8001b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	e009      	b.n	8001b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b56:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a05      	ldr	r2, [pc, #20]	@ (8001b74 <_sbrk+0x64>)
 8001b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	2000c000 	.word	0x2000c000
 8001b70:	00000400 	.word	0x00000400
 8001b74:	20000704 	.word	0x20000704
 8001b78:	20000928 	.word	0x20000928

08001b7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <SystemInit+0x20>)
 8001b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b86:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <SystemInit+0x20>)
 8001b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba4:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001ba6:	4a15      	ldr	r2, [pc, #84]	@ (8001bfc <MX_USART2_UART_Init+0x5c>)
 8001ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001baa:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001be4:	f002 fcd0 	bl	8004588 <HAL_UART_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bee:	f7ff fc29 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000708 	.word	0x20000708
 8001bfc:	40004400 	.word	0x40004400

08001c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b09e      	sub	sp, #120	@ 0x78
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	2254      	movs	r2, #84	@ 0x54
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f004 fb78 	bl	8006316 <memset>
  if(uartHandle->Instance==USART2)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a40      	ldr	r2, [pc, #256]	@ (8001d2c <HAL_UART_MspInit+0x12c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d179      	bne.n	8001d24 <HAL_UART_MspInit+0x124>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c30:	2302      	movs	r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 f9ab 	bl	8003f98 <HAL_RCCEx_PeriphCLKConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c48:	f7ff fbfc 	bl	8001444 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c4c:	4b38      	ldr	r3, [pc, #224]	@ (8001d30 <HAL_UART_MspInit+0x130>)
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c50:	4a37      	ldr	r2, [pc, #220]	@ (8001d30 <HAL_UART_MspInit+0x130>)
 8001c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c58:	4b35      	ldr	r3, [pc, #212]	@ (8001d30 <HAL_UART_MspInit+0x130>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b32      	ldr	r3, [pc, #200]	@ (8001d30 <HAL_UART_MspInit+0x130>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c68:	4a31      	ldr	r2, [pc, #196]	@ (8001d30 <HAL_UART_MspInit+0x130>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c70:	4b2f      	ldr	r3, [pc, #188]	@ (8001d30 <HAL_UART_MspInit+0x130>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c9a:	f000 fc99 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ca2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cbe:	f000 fc87 	bl	80025d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <HAL_UART_MspInit+0x134>)
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d38 <HAL_UART_MspInit+0x138>)
 8001cc6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <HAL_UART_MspInit+0x134>)
 8001cca:	2202      	movs	r2, #2
 8001ccc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cce:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <HAL_UART_MspInit+0x134>)
 8001cd0:	2210      	movs	r2, #16
 8001cd2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <HAL_UART_MspInit+0x134>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cda:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <HAL_UART_MspInit+0x134>)
 8001cdc:	2280      	movs	r2, #128	@ 0x80
 8001cde:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <HAL_UART_MspInit+0x134>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <HAL_UART_MspInit+0x134>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_UART_MspInit+0x134>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <HAL_UART_MspInit+0x134>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001cf8:	480e      	ldr	r0, [pc, #56]	@ (8001d34 <HAL_UART_MspInit+0x134>)
 8001cfa:	f000 f9f3 	bl	80020e4 <HAL_DMA_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001d04:	f7ff fb9e 	bl	8001444 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <HAL_UART_MspInit+0x134>)
 8001d0c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001d0e:	4a09      	ldr	r2, [pc, #36]	@ (8001d34 <HAL_UART_MspInit+0x134>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	2026      	movs	r0, #38	@ 0x26
 8001d1a:	f000 f9ac 	bl	8002076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d1e:	2026      	movs	r0, #38	@ 0x26
 8001d20:	f000 f9c5 	bl	80020ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d24:	bf00      	nop
 8001d26:	3778      	adds	r7, #120	@ 0x78
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40004400 	.word	0x40004400
 8001d30:	40021000 	.word	0x40021000
 8001d34:	20000790 	.word	0x20000790
 8001d38:	40020080 	.word	0x40020080

08001d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d40:	f7ff ff1c 	bl	8001b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d44:	480c      	ldr	r0, [pc, #48]	@ (8001d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d46:	490d      	ldr	r1, [pc, #52]	@ (8001d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d48:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <LoopForever+0xe>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d88 <LoopForever+0x16>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f004 fb2d 	bl	80063c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d6e:	f7ff fa5b 	bl	8001228 <main>

08001d72 <LoopForever>:

LoopForever:
    b LoopForever
 8001d72:	e7fe      	b.n	8001d72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d74:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d80:	08008f00 	.word	0x08008f00
  ldr r2, =_sbss
 8001d84:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d88:	20000928 	.word	0x20000928

08001d8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_IRQHandler>

08001d8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f000 f961 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f000 f80e 	bl	8001dc0 <HAL_InitTick>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	71fb      	strb	r3, [r7, #7]
 8001dae:	e001      	b.n	8001db4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001db0:	f7ff fdb6 	bl	8001920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001db4:	79fb      	ldrb	r3, [r7, #7]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dcc:	4b17      	ldr	r3, [pc, #92]	@ (8001e2c <HAL_InitTick+0x6c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d023      	beq.n	8001e1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dd4:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <HAL_InitTick+0x70>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <HAL_InitTick+0x6c>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f96d 	bl	80020ca <HAL_SYSTICK_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10f      	bne.n	8001e16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	d809      	bhi.n	8001e10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f000 f937 	bl	8002076 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e08:	4a0a      	ldr	r2, [pc, #40]	@ (8001e34 <HAL_InitTick+0x74>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e007      	b.n	8001e20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e004      	b.n	8001e20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
 8001e1a:	e001      	b.n	8001e20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	20000008 	.word	0x20000008
 8001e34:	2000000c 	.word	0x2000000c

08001e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_IncTick+0x20>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <HAL_IncTick+0x24>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	4a04      	ldr	r2, [pc, #16]	@ (8001e5c <HAL_IncTick+0x24>)
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000010 	.word	0x20000010
 8001e5c:	200007d8 	.word	0x200007d8

08001e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b03      	ldr	r3, [pc, #12]	@ (8001e74 <HAL_GetTick+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	200007d8 	.word	0x200007d8

08001e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff ffee 	bl	8001e60 <HAL_GetTick>
 8001e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d005      	beq.n	8001e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <HAL_Delay+0x44>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e9e:	bf00      	nop
 8001ea0:	f7ff ffde 	bl	8001e60 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d8f7      	bhi.n	8001ea0 <HAL_Delay+0x28>
  {
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000010 	.word	0x20000010

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4907      	ldr	r1, [pc, #28]	@ (8001f5c <__NVIC_EnableIRQ+0x38>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	@ (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	@ (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	@ 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800202c:	d301      	bcc.n	8002032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202e:	2301      	movs	r3, #1
 8002030:	e00f      	b.n	8002052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <SysTick_Config+0x40>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203a:	210f      	movs	r1, #15
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f7ff ff8e 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <SysTick_Config+0x40>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	@ (800205c <SysTick_Config+0x40>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff29 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002088:	f7ff ff3e 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 800208c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7ff ff8e 	bl	8001fb4 <NVIC_EncodePriority>
 8002098:	4602      	mov	r2, r0
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5d 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff31 	bl	8001f24 <__NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ffa2 	bl	800201c <SysTick_Config>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e098      	b.n	8002228 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002234 <HAL_DMA_Init+0x150>)
 80020fe:	429a      	cmp	r2, r3
 8002100:	d80f      	bhi.n	8002122 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	4b4b      	ldr	r3, [pc, #300]	@ (8002238 <HAL_DMA_Init+0x154>)
 800210a:	4413      	add	r3, r2
 800210c:	4a4b      	ldr	r2, [pc, #300]	@ (800223c <HAL_DMA_Init+0x158>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	091b      	lsrs	r3, r3, #4
 8002114:	009a      	lsls	r2, r3, #2
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a48      	ldr	r2, [pc, #288]	@ (8002240 <HAL_DMA_Init+0x15c>)
 800211e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002120:	e00e      	b.n	8002140 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	4b46      	ldr	r3, [pc, #280]	@ (8002244 <HAL_DMA_Init+0x160>)
 800212a:	4413      	add	r3, r2
 800212c:	4a43      	ldr	r2, [pc, #268]	@ (800223c <HAL_DMA_Init+0x158>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	009a      	lsls	r2, r3, #2
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a42      	ldr	r2, [pc, #264]	@ (8002248 <HAL_DMA_Init+0x164>)
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800215a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800219a:	d039      	beq.n	8002210 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	4a27      	ldr	r2, [pc, #156]	@ (8002240 <HAL_DMA_Init+0x15c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d11a      	bne.n	80021dc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021a6:	4b29      	ldr	r3, [pc, #164]	@ (800224c <HAL_DMA_Init+0x168>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f003 031c 	and.w	r3, r3, #28
 80021b2:	210f      	movs	r1, #15
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	4924      	ldr	r1, [pc, #144]	@ (800224c <HAL_DMA_Init+0x168>)
 80021bc:	4013      	ands	r3, r2
 80021be:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021c0:	4b22      	ldr	r3, [pc, #136]	@ (800224c <HAL_DMA_Init+0x168>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021cc:	f003 031c 	and.w	r3, r3, #28
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	491d      	ldr	r1, [pc, #116]	@ (800224c <HAL_DMA_Init+0x168>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]
 80021da:	e019      	b.n	8002210 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <HAL_DMA_Init+0x16c>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e4:	f003 031c 	and.w	r3, r3, #28
 80021e8:	210f      	movs	r1, #15
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	4917      	ldr	r1, [pc, #92]	@ (8002250 <HAL_DMA_Init+0x16c>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021f6:	4b16      	ldr	r3, [pc, #88]	@ (8002250 <HAL_DMA_Init+0x16c>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6859      	ldr	r1, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002202:	f003 031c 	and.w	r3, r3, #28
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	4911      	ldr	r1, [pc, #68]	@ (8002250 <HAL_DMA_Init+0x16c>)
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	40020407 	.word	0x40020407
 8002238:	bffdfff8 	.word	0xbffdfff8
 800223c:	cccccccd 	.word	0xcccccccd
 8002240:	40020000 	.word	0x40020000
 8002244:	bffdfbf8 	.word	0xbffdfbf8
 8002248:	40020400 	.word	0x40020400
 800224c:	400200a8 	.word	0x400200a8
 8002250:	400204a8 	.word	0x400204a8

08002254 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_DMA_Start_IT+0x20>
 8002270:	2302      	movs	r3, #2
 8002272:	e04b      	b.n	800230c <HAL_DMA_Start_IT+0xb8>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d13a      	bne.n	80022fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f95f 	bl	8002570 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 020e 	orr.w	r2, r2, #14
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	e00f      	b.n	80022ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0204 	bic.w	r2, r2, #4
 80022da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 020a 	orr.w	r2, r2, #10
 80022ea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	e005      	b.n	800230a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002306:	2302      	movs	r3, #2
 8002308:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800230a:	7dfb      	ldrb	r3, [r7, #23]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d008      	beq.n	800233e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2204      	movs	r2, #4
 8002330:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e022      	b.n	8002384 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 020e 	bic.w	r2, r2, #14
 800234c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0201 	bic.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	f003 021c 	and.w	r2, r3, #28
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f202 	lsl.w	r2, r1, r2
 8002370:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d005      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2204      	movs	r2, #4
 80023ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	e029      	b.n	8002408 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 020e 	bic.w	r2, r2, #14
 80023c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d8:	f003 021c 	and.w	r2, r3, #28
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	2101      	movs	r1, #1
 80023e2:	fa01 f202 	lsl.w	r2, r1, r2
 80023e6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	4798      	blx	r3
    }
  }
  return status;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242e:	f003 031c 	and.w	r3, r3, #28
 8002432:	2204      	movs	r2, #4
 8002434:	409a      	lsls	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d026      	beq.n	800248c <HAL_DMA_IRQHandler+0x7a>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d021      	beq.n	800248c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	d107      	bne.n	8002466 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0204 	bic.w	r2, r2, #4
 8002464:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	f003 021c 	and.w	r2, r3, #28
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	2104      	movs	r1, #4
 8002474:	fa01 f202 	lsl.w	r2, r1, r2
 8002478:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	2b00      	cmp	r3, #0
 8002480:	d071      	beq.n	8002566 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800248a:	e06c      	b.n	8002566 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002490:	f003 031c 	and.w	r3, r3, #28
 8002494:	2202      	movs	r2, #2
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d02e      	beq.n	80024fe <HAL_DMA_IRQHandler+0xec>
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d029      	beq.n	80024fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10b      	bne.n	80024d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 020a 	bic.w	r2, r2, #10
 80024c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d4:	f003 021c 	and.w	r2, r3, #28
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	2102      	movs	r1, #2
 80024de:	fa01 f202 	lsl.w	r2, r1, r2
 80024e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d038      	beq.n	8002566 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80024fc:	e033      	b.n	8002566 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	f003 031c 	and.w	r3, r3, #28
 8002506:	2208      	movs	r2, #8
 8002508:	409a      	lsls	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d02a      	beq.n	8002568 <HAL_DMA_IRQHandler+0x156>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d025      	beq.n	8002568 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 020e 	bic.w	r2, r2, #14
 800252a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002530:	f003 021c 	and.w	r2, r3, #28
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	2101      	movs	r1, #1
 800253a:	fa01 f202 	lsl.w	r2, r1, r2
 800253e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800255a:	2b00      	cmp	r3, #0
 800255c:	d004      	beq.n	8002568 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002566:	bf00      	nop
 8002568:	bf00      	nop
}
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f003 021c 	and.w	r2, r3, #28
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d108      	bne.n	80025b4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025b2:	e007      	b.n	80025c4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	60da      	str	r2, [r3, #12]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025de:	e148      	b.n	8002872 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2101      	movs	r1, #1
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	4013      	ands	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 813a 	beq.w	800286c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d005      	beq.n	8002610 <HAL_GPIO_Init+0x40>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d130      	bne.n	8002672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002646:	2201      	movs	r2, #1
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0201 	and.w	r2, r3, #1
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b03      	cmp	r3, #3
 800267c:	d017      	beq.n	80026ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d123      	bne.n	8002702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	08da      	lsrs	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3208      	adds	r2, #8
 80026c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	08da      	lsrs	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3208      	adds	r2, #8
 80026fc:	6939      	ldr	r1, [r7, #16]
 80026fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0203 	and.w	r2, r3, #3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8094 	beq.w	800286c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002744:	4b52      	ldr	r3, [pc, #328]	@ (8002890 <HAL_GPIO_Init+0x2c0>)
 8002746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002748:	4a51      	ldr	r2, [pc, #324]	@ (8002890 <HAL_GPIO_Init+0x2c0>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002750:	4b4f      	ldr	r3, [pc, #316]	@ (8002890 <HAL_GPIO_Init+0x2c0>)
 8002752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800275c:	4a4d      	ldr	r2, [pc, #308]	@ (8002894 <HAL_GPIO_Init+0x2c4>)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002786:	d00d      	beq.n	80027a4 <HAL_GPIO_Init+0x1d4>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a43      	ldr	r2, [pc, #268]	@ (8002898 <HAL_GPIO_Init+0x2c8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d007      	beq.n	80027a0 <HAL_GPIO_Init+0x1d0>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a42      	ldr	r2, [pc, #264]	@ (800289c <HAL_GPIO_Init+0x2cc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <HAL_GPIO_Init+0x1cc>
 8002798:	2302      	movs	r3, #2
 800279a:	e004      	b.n	80027a6 <HAL_GPIO_Init+0x1d6>
 800279c:	2307      	movs	r3, #7
 800279e:	e002      	b.n	80027a6 <HAL_GPIO_Init+0x1d6>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_GPIO_Init+0x1d6>
 80027a4:	2300      	movs	r3, #0
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	f002 0203 	and.w	r2, r2, #3
 80027ac:	0092      	lsls	r2, r2, #2
 80027ae:	4093      	lsls	r3, r2
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027b6:	4937      	ldr	r1, [pc, #220]	@ (8002894 <HAL_GPIO_Init+0x2c4>)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	089b      	lsrs	r3, r3, #2
 80027bc:	3302      	adds	r3, #2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c4:	4b36      	ldr	r3, [pc, #216]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027e8:	4a2d      	ldr	r2, [pc, #180]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ee:	4b2c      	ldr	r3, [pc, #176]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002812:	4a23      	ldr	r2, [pc, #140]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002818:	4b21      	ldr	r3, [pc, #132]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800283c:	4a18      	ldr	r2, [pc, #96]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002842:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002866:	4a0e      	ldr	r2, [pc, #56]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3301      	adds	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	f47f aeaf 	bne.w	80025e0 <HAL_GPIO_Init+0x10>
  }
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40021000 	.word	0x40021000
 8002894:	40010000 	.word	0x40010000
 8002898:	48000400 	.word	0x48000400
 800289c:	48000800 	.word	0x48000800
 80028a0:	40010400 	.word	0x40010400

080028a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
 80028b0:	4613      	mov	r3, r2
 80028b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b4:	787b      	ldrb	r3, [r7, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028c0:	e002      	b.n	80028c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e08d      	b.n	8002a02 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe fbd8 	bl	80010b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2224      	movs	r2, #36	@ 0x24
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002924:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002934:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d107      	bne.n	800294e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e006      	b.n	800295c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800295a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d108      	bne.n	8002976 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	e007      	b.n	8002986 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002998:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69d9      	ldr	r1, [r3, #28]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1a      	ldr	r2, [r3, #32]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	4608      	mov	r0, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	817b      	strh	r3, [r7, #10]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	813b      	strh	r3, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	f040 80f9 	bne.w	8002c26 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_I2C_Mem_Write+0x34>
 8002a3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a46:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0ed      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_I2C_Mem_Write+0x4e>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e0e6      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a62:	f7ff f9fd 	bl	8001e60 <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2319      	movs	r3, #25
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f955 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0d1      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2221      	movs	r2, #33	@ 0x21
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2240      	movs	r2, #64	@ 0x40
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aac:	88f8      	ldrh	r0, [r7, #6]
 8002aae:	893a      	ldrh	r2, [r7, #8]
 8002ab0:	8979      	ldrh	r1, [r7, #10]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	4603      	mov	r3, r0
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f8b9 	bl	8002c34 <I2C_RequestMemoryWrite>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0a9      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2bff      	cmp	r3, #255	@ 0xff
 8002adc:	d90e      	bls.n	8002afc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	22ff      	movs	r2, #255	@ 0xff
 8002ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	2300      	movs	r3, #0
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fad9 	bl	80030ac <I2C_TransferConfig>
 8002afa:	e00f      	b.n	8002b1c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	8979      	ldrh	r1, [r7, #10]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fac8 	bl	80030ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f958 	bl	8002dd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e07b      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d034      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x1c8>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d130      	bne.n	8002bd4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2180      	movs	r1, #128	@ 0x80
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f8d1 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e04d      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2bff      	cmp	r3, #255	@ 0xff
 8002b94:	d90e      	bls.n	8002bb4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	22ff      	movs	r2, #255	@ 0xff
 8002b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	8979      	ldrh	r1, [r7, #10]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fa7d 	bl	80030ac <I2C_TransferConfig>
 8002bb2:	e00f      	b.n	8002bd4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	8979      	ldrh	r1, [r7, #10]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fa6c 	bl	80030ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d19e      	bne.n	8002b1c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f93e 	bl	8002e64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e01a      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <HAL_I2C_Mem_Write+0x224>)
 8002c06:	400b      	ands	r3, r1
 8002c08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
  }
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	fe00e800 	.word	0xfe00e800

08002c34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	817b      	strh	r3, [r7, #10]
 8002c46:	460b      	mov	r3, r1
 8002c48:	813b      	strh	r3, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	8979      	ldrh	r1, [r7, #10]
 8002c54:	4b20      	ldr	r3, [pc, #128]	@ (8002cd8 <I2C_RequestMemoryWrite+0xa4>)
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fa25 	bl	80030ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	69b9      	ldr	r1, [r7, #24]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f8b5 	bl	8002dd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e02c      	b.n	8002cd0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d105      	bne.n	8002c88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c7c:	893b      	ldrh	r3, [r7, #8]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c86:	e015      	b.n	8002cb4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c88:	893b      	ldrh	r3, [r7, #8]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	69b9      	ldr	r1, [r7, #24]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f89b 	bl	8002dd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e012      	b.n	8002cd0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002caa:	893b      	ldrh	r3, [r7, #8]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2180      	movs	r1, #128	@ 0x80
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f830 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	80002000 	.word	0x80002000

08002cdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d103      	bne.n	8002cfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d007      	beq.n	8002d18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	619a      	str	r2, [r3, #24]
  }
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d34:	e03b      	b.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	6839      	ldr	r1, [r7, #0]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f8d6 	bl	8002eec <I2C_IsErrorOccurred>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e041      	b.n	8002dce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d02d      	beq.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d52:	f7ff f885 	bl	8001e60 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d122      	bne.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4013      	ands	r3, r2
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d113      	bne.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	f043 0220 	orr.w	r2, r3, #32
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00f      	b.n	8002dce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4013      	ands	r3, r2
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	bf0c      	ite	eq
 8002dbe:	2301      	moveq	r3, #1
 8002dc0:	2300      	movne	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d0b4      	beq.n	8002d36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002de2:	e033      	b.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f87f 	bl	8002eec <I2C_IsErrorOccurred>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e031      	b.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d025      	beq.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e00:	f7ff f82e 	bl	8001e60 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d302      	bcc.n	8002e16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11a      	bne.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d013      	beq.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e007      	b.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d1c4      	bne.n	8002de4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e70:	e02f      	b.n	8002ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f838 	bl	8002eec <I2C_IsErrorOccurred>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e02d      	b.n	8002ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e86:	f7fe ffeb 	bl	8001e60 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d302      	bcc.n	8002e9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d11a      	bne.n	8002ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d013      	beq.n	8002ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e007      	b.n	8002ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d1c8      	bne.n	8002e72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08a      	sub	sp, #40	@ 0x28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d068      	beq.n	8002fea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f20:	e049      	b.n	8002fb6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d045      	beq.n	8002fb6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f2a:	f7fe ff99 	bl	8001e60 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d302      	bcc.n	8002f40 <I2C_IsErrorOccurred+0x54>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d13a      	bne.n	8002fb6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f62:	d121      	bne.n	8002fa8 <I2C_IsErrorOccurred+0xbc>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f6a:	d01d      	beq.n	8002fa8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d01a      	beq.n	8002fa8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f82:	f7fe ff6d 	bl	8001e60 <HAL_GetTick>
 8002f86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f88:	e00e      	b.n	8002fa8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f8a:	f7fe ff69 	bl	8001e60 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b19      	cmp	r3, #25
 8002f96:	d907      	bls.n	8002fa8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	f043 0320 	orr.w	r3, r3, #32
 8002f9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002fa6:	e006      	b.n	8002fb6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d1e9      	bne.n	8002f8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d003      	beq.n	8002fcc <I2C_IsErrorOccurred+0xe0>
 8002fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0aa      	beq.n	8002f22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	f043 0304 	orr.w	r3, r3, #4
 8002fe2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00b      	beq.n	8003014 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800300c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	f043 0308 	orr.w	r3, r3, #8
 8003024:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800302e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	f043 0302 	orr.w	r3, r3, #2
 8003046:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003050:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01c      	beq.n	800309a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f7ff fe3b 	bl	8002cdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b0d      	ldr	r3, [pc, #52]	@ (80030a8 <I2C_IsErrorOccurred+0x1bc>)
 8003072:	400b      	ands	r3, r1
 8003074:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	431a      	orrs	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800309a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3728      	adds	r7, #40	@ 0x28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	fe00e800 	.word	0xfe00e800

080030ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	817b      	strh	r3, [r7, #10]
 80030ba:	4613      	mov	r3, r2
 80030bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030be:	897b      	ldrh	r3, [r7, #10]
 80030c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030c4:	7a7b      	ldrb	r3, [r7, #9]
 80030c6:	041b      	lsls	r3, r3, #16
 80030c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	0d5b      	lsrs	r3, r3, #21
 80030e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80030ea:	4b08      	ldr	r3, [pc, #32]	@ (800310c <I2C_TransferConfig+0x60>)
 80030ec:	430b      	orrs	r3, r1
 80030ee:	43db      	mvns	r3, r3
 80030f0:	ea02 0103 	and.w	r1, r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	03ff63ff 	.word	0x03ff63ff

08003110 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b20      	cmp	r3, #32
 8003124:	d138      	bne.n	8003198 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003130:	2302      	movs	r3, #2
 8003132:	e032      	b.n	800319a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2224      	movs	r2, #36	@ 0x24
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003162:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	e000      	b.n	800319a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003198:	2302      	movs	r3, #2
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d139      	bne.n	8003230 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e033      	b.n	8003232 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2224      	movs	r2, #36	@ 0x24
 80031d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0201 	bic.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	e000      	b.n	8003232 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003244:	4b05      	ldr	r3, [pc, #20]	@ (800325c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a04      	ldr	r2, [pc, #16]	@ (800325c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800324a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40007000 	.word	0x40007000

08003260 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003264:	4b04      	ldr	r3, [pc, #16]	@ (8003278 <HAL_PWREx_GetVoltageRange+0x18>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40007000 	.word	0x40007000

0800327c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800328a:	d130      	bne.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800328c:	4b23      	ldr	r3, [pc, #140]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003298:	d038      	beq.n	800330c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800329a:	4b20      	ldr	r3, [pc, #128]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032a2:	4a1e      	ldr	r2, [pc, #120]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2232      	movs	r2, #50	@ 0x32
 80032b0:	fb02 f303 	mul.w	r3, r2, r3
 80032b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	0c9b      	lsrs	r3, r3, #18
 80032bc:	3301      	adds	r3, #1
 80032be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c0:	e002      	b.n	80032c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c8:	4b14      	ldr	r3, [pc, #80]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d4:	d102      	bne.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f2      	bne.n	80032c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032dc:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e8:	d110      	bne.n	800330c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e00f      	b.n	800330e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ee:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032fa:	d007      	beq.n	800330c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032fc:	4b07      	ldr	r3, [pc, #28]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003304:	4a05      	ldr	r2, [pc, #20]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003306:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800330a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40007000 	.word	0x40007000
 8003320:	20000008 	.word	0x20000008
 8003324:	431bde83 	.word	0x431bde83

08003328 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f000 bc02 	b.w	8003b40 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800333c:	4b96      	ldr	r3, [pc, #600]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003346:	4b94      	ldr	r3, [pc, #592]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80e4 	beq.w	8003526 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <HAL_RCC_OscConfig+0x4c>
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	f040 808b 	bne.w	8003482 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b01      	cmp	r3, #1
 8003370:	f040 8087 	bne.w	8003482 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003374:	4b88      	ldr	r3, [pc, #544]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_OscConfig+0x64>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e3d9      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1a      	ldr	r2, [r3, #32]
 8003390:	4b81      	ldr	r3, [pc, #516]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <HAL_RCC_OscConfig+0x7e>
 800339c:	4b7e      	ldr	r3, [pc, #504]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033a4:	e005      	b.n	80033b2 <HAL_RCC_OscConfig+0x8a>
 80033a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80033a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d223      	bcs.n	80033fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fd8c 	bl	8003ed8 <RCC_SetFlashLatencyFromMSIRange>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e3ba      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ca:	4b73      	ldr	r3, [pc, #460]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a72      	ldr	r2, [pc, #456]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80033d0:	f043 0308 	orr.w	r3, r3, #8
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b70      	ldr	r3, [pc, #448]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	496d      	ldr	r1, [pc, #436]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	4968      	ldr	r1, [pc, #416]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
 80033fc:	e025      	b.n	800344a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033fe:	4b66      	ldr	r3, [pc, #408]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a65      	ldr	r2, [pc, #404]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003404:	f043 0308 	orr.w	r3, r3, #8
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b63      	ldr	r3, [pc, #396]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	4960      	ldr	r1, [pc, #384]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800341c:	4b5e      	ldr	r3, [pc, #376]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	495b      	ldr	r1, [pc, #364]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fd4c 	bl	8003ed8 <RCC_SetFlashLatencyFromMSIRange>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e37a      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800344a:	f000 fc81 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 800344e:	4602      	mov	r2, r0
 8003450:	4b51      	ldr	r3, [pc, #324]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	4950      	ldr	r1, [pc, #320]	@ (800359c <HAL_RCC_OscConfig+0x274>)
 800345c:	5ccb      	ldrb	r3, [r1, r3]
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	fa22 f303 	lsr.w	r3, r2, r3
 8003466:	4a4e      	ldr	r2, [pc, #312]	@ (80035a0 <HAL_RCC_OscConfig+0x278>)
 8003468:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800346a:	4b4e      	ldr	r3, [pc, #312]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe fca6 	bl	8001dc0 <HAL_InitTick>
 8003474:	4603      	mov	r3, r0
 8003476:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d052      	beq.n	8003524 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	e35e      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d032      	beq.n	80034f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800348a:	4b43      	ldr	r3, [pc, #268]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a42      	ldr	r2, [pc, #264]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003496:	f7fe fce3 	bl	8001e60 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800349e:	f7fe fcdf 	bl	8001e60 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e347      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034b0:	4b39      	ldr	r3, [pc, #228]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034bc:	4b36      	ldr	r3, [pc, #216]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a35      	ldr	r2, [pc, #212]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80034c2:	f043 0308 	orr.w	r3, r3, #8
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b33      	ldr	r3, [pc, #204]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4930      	ldr	r1, [pc, #192]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034da:	4b2f      	ldr	r3, [pc, #188]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	492b      	ldr	r1, [pc, #172]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]
 80034ee:	e01a      	b.n	8003526 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034f0:	4b29      	ldr	r3, [pc, #164]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a28      	ldr	r2, [pc, #160]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034fc:	f7fe fcb0 	bl	8001e60 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003504:	f7fe fcac 	bl	8001e60 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e314      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003516:	4b20      	ldr	r3, [pc, #128]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x1dc>
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003524:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d073      	beq.n	800361a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d005      	beq.n	8003544 <HAL_RCC_OscConfig+0x21c>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d10e      	bne.n	800355c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b03      	cmp	r3, #3
 8003542:	d10b      	bne.n	800355c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003544:	4b14      	ldr	r3, [pc, #80]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d063      	beq.n	8003618 <HAL_RCC_OscConfig+0x2f0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d15f      	bne.n	8003618 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e2f1      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003564:	d106      	bne.n	8003574 <HAL_RCC_OscConfig+0x24c>
 8003566:	4b0c      	ldr	r3, [pc, #48]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a0b      	ldr	r2, [pc, #44]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e025      	b.n	80035c0 <HAL_RCC_OscConfig+0x298>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800357c:	d114      	bne.n	80035a8 <HAL_RCC_OscConfig+0x280>
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a05      	ldr	r2, [pc, #20]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	4b03      	ldr	r3, [pc, #12]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a02      	ldr	r2, [pc, #8]	@ (8003598 <HAL_RCC_OscConfig+0x270>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e013      	b.n	80035c0 <HAL_RCC_OscConfig+0x298>
 8003598:	40021000 	.word	0x40021000
 800359c:	08008b38 	.word	0x08008b38
 80035a0:	20000008 	.word	0x20000008
 80035a4:	2000000c 	.word	0x2000000c
 80035a8:	4ba0      	ldr	r3, [pc, #640]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a9f      	ldr	r2, [pc, #636]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b9d      	ldr	r3, [pc, #628]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a9c      	ldr	r2, [pc, #624]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d013      	beq.n	80035f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fc4a 	bl	8001e60 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fc46 	bl	8001e60 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	@ 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e2ae      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e2:	4b92      	ldr	r3, [pc, #584]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x2a8>
 80035ee:	e014      	b.n	800361a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fc36 	bl	8001e60 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fc32 	bl	8001e60 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	@ 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e29a      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800360a:	4b88      	ldr	r3, [pc, #544]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x2d0>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d060      	beq.n	80036e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b04      	cmp	r3, #4
 800362a:	d005      	beq.n	8003638 <HAL_RCC_OscConfig+0x310>
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b0c      	cmp	r3, #12
 8003630:	d119      	bne.n	8003666 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d116      	bne.n	8003666 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003638:	4b7c      	ldr	r3, [pc, #496]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_RCC_OscConfig+0x328>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e277      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003650:	4b76      	ldr	r3, [pc, #472]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	061b      	lsls	r3, r3, #24
 800365e:	4973      	ldr	r1, [pc, #460]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003664:	e040      	b.n	80036e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d023      	beq.n	80036b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800366e:	4b6f      	ldr	r3, [pc, #444]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a6e      	ldr	r2, [pc, #440]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367a:	f7fe fbf1 	bl	8001e60 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003682:	f7fe fbed 	bl	8001e60 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e255      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003694:	4b65      	ldr	r3, [pc, #404]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a0:	4b62      	ldr	r3, [pc, #392]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	061b      	lsls	r3, r3, #24
 80036ae:	495f      	ldr	r1, [pc, #380]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
 80036b4:	e018      	b.n	80036e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b6:	4b5d      	ldr	r3, [pc, #372]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a5c      	ldr	r2, [pc, #368]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 80036bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7fe fbcd 	bl	8001e60 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ca:	f7fe fbc9 	bl	8001e60 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e231      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036dc:	4b53      	ldr	r3, [pc, #332]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f0      	bne.n	80036ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d03c      	beq.n	800376e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01c      	beq.n	8003736 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fc:	4b4b      	ldr	r3, [pc, #300]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 80036fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003702:	4a4a      	ldr	r2, [pc, #296]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370c:	f7fe fba8 	bl	8001e60 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003714:	f7fe fba4 	bl	8001e60 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e20c      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003726:	4b41      	ldr	r3, [pc, #260]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 8003728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0ef      	beq.n	8003714 <HAL_RCC_OscConfig+0x3ec>
 8003734:	e01b      	b.n	800376e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003736:	4b3d      	ldr	r3, [pc, #244]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 8003738:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800373c:	4a3b      	ldr	r2, [pc, #236]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003746:	f7fe fb8b 	bl	8001e60 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374e:	f7fe fb87 	bl	8001e60 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e1ef      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003760:	4b32      	ldr	r3, [pc, #200]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 8003762:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1ef      	bne.n	800374e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 80a6 	beq.w	80038c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377c:	2300      	movs	r3, #0
 800377e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003780:	4b2a      	ldr	r3, [pc, #168]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 8003782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10d      	bne.n	80037a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378c:	4b27      	ldr	r3, [pc, #156]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003790:	4a26      	ldr	r2, [pc, #152]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 8003792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003796:	6593      	str	r3, [r2, #88]	@ 0x58
 8003798:	4b24      	ldr	r3, [pc, #144]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a4:	2301      	movs	r3, #1
 80037a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a8:	4b21      	ldr	r3, [pc, #132]	@ (8003830 <HAL_RCC_OscConfig+0x508>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d118      	bne.n	80037e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003830 <HAL_RCC_OscConfig+0x508>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003830 <HAL_RCC_OscConfig+0x508>)
 80037ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c0:	f7fe fb4e 	bl	8001e60 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c8:	f7fe fb4a 	bl	8001e60 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e1b2      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037da:	4b15      	ldr	r3, [pc, #84]	@ (8003830 <HAL_RCC_OscConfig+0x508>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d108      	bne.n	8003800 <HAL_RCC_OscConfig+0x4d8>
 80037ee:	4b0f      	ldr	r3, [pc, #60]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f4:	4a0d      	ldr	r2, [pc, #52]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037fe:	e029      	b.n	8003854 <HAL_RCC_OscConfig+0x52c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b05      	cmp	r3, #5
 8003806:	d115      	bne.n	8003834 <HAL_RCC_OscConfig+0x50c>
 8003808:	4b08      	ldr	r3, [pc, #32]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380e:	4a07      	ldr	r2, [pc, #28]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003818:	4b04      	ldr	r3, [pc, #16]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381e:	4a03      	ldr	r2, [pc, #12]	@ (800382c <HAL_RCC_OscConfig+0x504>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003828:	e014      	b.n	8003854 <HAL_RCC_OscConfig+0x52c>
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	40007000 	.word	0x40007000
 8003834:	4b9a      	ldr	r3, [pc, #616]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383a:	4a99      	ldr	r2, [pc, #612]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003844:	4b96      	ldr	r3, [pc, #600]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384a:	4a95      	ldr	r2, [pc, #596]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d016      	beq.n	800388a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fe fb00 	bl	8001e60 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003862:	e00a      	b.n	800387a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003864:	f7fe fafc 	bl	8001e60 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e162      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800387a:	4b89      	ldr	r3, [pc, #548]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0ed      	beq.n	8003864 <HAL_RCC_OscConfig+0x53c>
 8003888:	e015      	b.n	80038b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388a:	f7fe fae9 	bl	8001e60 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003890:	e00a      	b.n	80038a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7fe fae5 	bl	8001e60 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e14b      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a8:	4b7d      	ldr	r3, [pc, #500]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1ed      	bne.n	8003892 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038b6:	7ffb      	ldrb	r3, [r7, #31]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d105      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038bc:	4b78      	ldr	r3, [pc, #480]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c0:	4a77      	ldr	r2, [pc, #476]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 80038c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d03c      	beq.n	800394e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01c      	beq.n	8003916 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038dc:	4b70      	ldr	r3, [pc, #448]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 80038de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038e2:	4a6f      	ldr	r2, [pc, #444]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fe fab8 	bl	8001e60 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038f4:	f7fe fab4 	bl	8001e60 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e11c      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003906:	4b66      	ldr	r3, [pc, #408]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003908:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <HAL_RCC_OscConfig+0x5cc>
 8003914:	e01b      	b.n	800394e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003916:	4b62      	ldr	r3, [pc, #392]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003918:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800391c:	4a60      	ldr	r2, [pc, #384]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fe fa9b 	bl	8001e60 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800392e:	f7fe fa97 	bl	8001e60 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e0ff      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003940:	4b57      	ldr	r3, [pc, #348]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003942:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1ef      	bne.n	800392e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 80f3 	beq.w	8003b3e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395c:	2b02      	cmp	r3, #2
 800395e:	f040 80c9 	bne.w	8003af4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003962:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f003 0203 	and.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003972:	429a      	cmp	r2, r3
 8003974:	d12c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	3b01      	subs	r3, #1
 8003982:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d123      	bne.n	80039d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003992:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d11b      	bne.n	80039d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d113      	bne.n	80039d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	3b01      	subs	r3, #1
 80039b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d109      	bne.n	80039d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	3b01      	subs	r3, #1
 80039ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d06b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d062      	beq.n	8003a9c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039d6:	4b32      	ldr	r3, [pc, #200]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0ac      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039e6:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a2d      	ldr	r2, [pc, #180]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 80039ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039f2:	f7fe fa35 	bl	8001e60 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fa:	f7fe fa31 	bl	8001e60 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e099      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a0c:	4b24      	ldr	r3, [pc, #144]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f0      	bne.n	80039fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a18:	4b21      	ldr	r3, [pc, #132]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	4b21      	ldr	r3, [pc, #132]	@ (8003aa4 <HAL_RCC_OscConfig+0x77c>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a28:	3a01      	subs	r2, #1
 8003a2a:	0112      	lsls	r2, r2, #4
 8003a2c:	4311      	orrs	r1, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a32:	0212      	lsls	r2, r2, #8
 8003a34:	4311      	orrs	r1, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a3a:	0852      	lsrs	r2, r2, #1
 8003a3c:	3a01      	subs	r2, #1
 8003a3e:	0552      	lsls	r2, r2, #21
 8003a40:	4311      	orrs	r1, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a46:	0852      	lsrs	r2, r2, #1
 8003a48:	3a01      	subs	r2, #1
 8003a4a:	0652      	lsls	r2, r2, #25
 8003a4c:	4311      	orrs	r1, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a52:	06d2      	lsls	r2, r2, #27
 8003a54:	430a      	orrs	r2, r1
 8003a56:	4912      	ldr	r1, [pc, #72]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a5c:	4b10      	ldr	r3, [pc, #64]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0f      	ldr	r2, [pc, #60]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a68:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a74:	f7fe f9f4 	bl	8001e60 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7c:	f7fe f9f0 	bl	8001e60 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e058      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8e:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <HAL_RCC_OscConfig+0x778>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a9a:	e050      	b.n	8003b3e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e04f      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa8:	4b27      	ldr	r3, [pc, #156]	@ (8003b48 <HAL_RCC_OscConfig+0x820>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d144      	bne.n	8003b3e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ab4:	4b24      	ldr	r3, [pc, #144]	@ (8003b48 <HAL_RCC_OscConfig+0x820>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a23      	ldr	r2, [pc, #140]	@ (8003b48 <HAL_RCC_OscConfig+0x820>)
 8003aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac0:	4b21      	ldr	r3, [pc, #132]	@ (8003b48 <HAL_RCC_OscConfig+0x820>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a20      	ldr	r2, [pc, #128]	@ (8003b48 <HAL_RCC_OscConfig+0x820>)
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003acc:	f7fe f9c8 	bl	8001e60 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fe f9c4 	bl	8001e60 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e02c      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae6:	4b18      	ldr	r3, [pc, #96]	@ (8003b48 <HAL_RCC_OscConfig+0x820>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x7ac>
 8003af2:	e024      	b.n	8003b3e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d01f      	beq.n	8003b3a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afa:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <HAL_RCC_OscConfig+0x820>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a12      	ldr	r2, [pc, #72]	@ (8003b48 <HAL_RCC_OscConfig+0x820>)
 8003b00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fe f9ab 	bl	8001e60 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0e:	f7fe f9a7 	bl	8001e60 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e00f      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b20:	4b09      	ldr	r3, [pc, #36]	@ (8003b48 <HAL_RCC_OscConfig+0x820>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f0      	bne.n	8003b0e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b2c:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <HAL_RCC_OscConfig+0x820>)
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	4905      	ldr	r1, [pc, #20]	@ (8003b48 <HAL_RCC_OscConfig+0x820>)
 8003b32:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <HAL_RCC_OscConfig+0x824>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	60cb      	str	r3, [r1, #12]
 8003b38:	e001      	b.n	8003b3e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3720      	adds	r7, #32
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	feeefffc 	.word	0xfeeefffc

08003b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0e7      	b.n	8003d34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b64:	4b75      	ldr	r3, [pc, #468]	@ (8003d3c <HAL_RCC_ClockConfig+0x1ec>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d910      	bls.n	8003b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b72      	ldr	r3, [pc, #456]	@ (8003d3c <HAL_RCC_ClockConfig+0x1ec>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 0207 	bic.w	r2, r3, #7
 8003b7a:	4970      	ldr	r1, [pc, #448]	@ (8003d3c <HAL_RCC_ClockConfig+0x1ec>)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b6e      	ldr	r3, [pc, #440]	@ (8003d3c <HAL_RCC_ClockConfig+0x1ec>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0cf      	b.n	8003d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d010      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	4b66      	ldr	r3, [pc, #408]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d908      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb0:	4b63      	ldr	r3, [pc, #396]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	4960      	ldr	r1, [pc, #384]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d04c      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d107      	bne.n	8003be6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd6:	4b5a      	ldr	r3, [pc, #360]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d121      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0a6      	b.n	8003d34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d107      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bee:	4b54      	ldr	r3, [pc, #336]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d115      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e09a      	b.n	8003d34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c06:	4b4e      	ldr	r3, [pc, #312]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e08e      	b.n	8003d34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c16:	4b4a      	ldr	r3, [pc, #296]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e086      	b.n	8003d34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c26:	4b46      	ldr	r3, [pc, #280]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f023 0203 	bic.w	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4943      	ldr	r1, [pc, #268]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c38:	f7fe f912 	bl	8001e60 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c40:	f7fe f90e 	bl	8001e60 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e06e      	b.n	8003d34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	4b3a      	ldr	r3, [pc, #232]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 020c 	and.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d1eb      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d010      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	4b31      	ldr	r3, [pc, #196]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d208      	bcs.n	8003c96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c84:	4b2e      	ldr	r3, [pc, #184]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	492b      	ldr	r1, [pc, #172]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c96:	4b29      	ldr	r3, [pc, #164]	@ (8003d3c <HAL_RCC_ClockConfig+0x1ec>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d210      	bcs.n	8003cc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca4:	4b25      	ldr	r3, [pc, #148]	@ (8003d3c <HAL_RCC_ClockConfig+0x1ec>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f023 0207 	bic.w	r2, r3, #7
 8003cac:	4923      	ldr	r1, [pc, #140]	@ (8003d3c <HAL_RCC_ClockConfig+0x1ec>)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb4:	4b21      	ldr	r3, [pc, #132]	@ (8003d3c <HAL_RCC_ClockConfig+0x1ec>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e036      	b.n	8003d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	4918      	ldr	r1, [pc, #96]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d009      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4910      	ldr	r1, [pc, #64]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d04:	f000 f824 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	490b      	ldr	r1, [pc, #44]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f4>)
 8003d16:	5ccb      	ldrb	r3, [r1, r3]
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d20:	4a09      	ldr	r2, [pc, #36]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f8>)
 8003d22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d24:	4b09      	ldr	r3, [pc, #36]	@ (8003d4c <HAL_RCC_ClockConfig+0x1fc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe f849 	bl	8001dc0 <HAL_InitTick>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d32:	7afb      	ldrb	r3, [r7, #11]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40022000 	.word	0x40022000
 8003d40:	40021000 	.word	0x40021000
 8003d44:	08008b38 	.word	0x08008b38
 8003d48:	20000008 	.word	0x20000008
 8003d4c:	2000000c 	.word	0x2000000c

08003d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b089      	sub	sp, #36	@ 0x24
 8003d54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d68:	4b3b      	ldr	r3, [pc, #236]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0x34>
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b0c      	cmp	r3, #12
 8003d7c:	d121      	bne.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d11e      	bne.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d84:	4b34      	ldr	r3, [pc, #208]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d90:	4b31      	ldr	r3, [pc, #196]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	61fb      	str	r3, [r7, #28]
 8003d9e:	e005      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003da0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dac:	4a2b      	ldr	r2, [pc, #172]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10d      	bne.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d102      	bne.n	8003dce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dc8:	4b25      	ldr	r3, [pc, #148]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	e004      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dd4:	4b23      	ldr	r3, [pc, #140]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b0c      	cmp	r3, #12
 8003ddc:	d134      	bne.n	8003e48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dde:	4b1e      	ldr	r3, [pc, #120]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d003      	beq.n	8003df6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d003      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0xac>
 8003df4:	e005      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003df6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003df8:	617b      	str	r3, [r7, #20]
      break;
 8003dfa:	e005      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003dfc:	4b19      	ldr	r3, [pc, #100]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dfe:	617b      	str	r3, [r7, #20]
      break;
 8003e00:	e002      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	617b      	str	r3, [r7, #20]
      break;
 8003e06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e08:	4b13      	ldr	r3, [pc, #76]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	3301      	adds	r3, #1
 8003e14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e16:	4b10      	ldr	r3, [pc, #64]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	0a1b      	lsrs	r3, r3, #8
 8003e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	fb03 f202 	mul.w	r2, r3, r2
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	0e5b      	lsrs	r3, r3, #25
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	3301      	adds	r3, #1
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e48:	69bb      	ldr	r3, [r7, #24]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3724      	adds	r7, #36	@ 0x24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	08008b50 	.word	0x08008b50
 8003e60:	00f42400 	.word	0x00f42400
 8003e64:	007a1200 	.word	0x007a1200

08003e68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	@ (8003e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000008 	.word	0x20000008

08003e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e84:	f7ff fff0 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4904      	ldr	r1, [pc, #16]	@ (8003ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	08008b48 	.word	0x08008b48

08003eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003eb0:	f7ff ffda 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0adb      	lsrs	r3, r3, #11
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4904      	ldr	r1, [pc, #16]	@ (8003ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	08008b48 	.word	0x08008b48

08003ed8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ef0:	f7ff f9b6 	bl	8003260 <HAL_PWREx_GetVoltageRange>
 8003ef4:	6178      	str	r0, [r7, #20]
 8003ef6:	e014      	b.n	8003f22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ef8:	4b25      	ldr	r3, [pc, #148]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efc:	4a24      	ldr	r2, [pc, #144]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f04:	4b22      	ldr	r3, [pc, #136]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f10:	f7ff f9a6 	bl	8003260 <HAL_PWREx_GetVoltageRange>
 8003f14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f16:	4b1e      	ldr	r3, [pc, #120]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f28:	d10b      	bne.n	8003f42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b80      	cmp	r3, #128	@ 0x80
 8003f2e:	d919      	bls.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f34:	d902      	bls.n	8003f3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f36:	2302      	movs	r3, #2
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	e013      	b.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	e010      	b.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b80      	cmp	r3, #128	@ 0x80
 8003f46:	d902      	bls.n	8003f4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f48:	2303      	movs	r3, #3
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	e00a      	b.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b80      	cmp	r3, #128	@ 0x80
 8003f52:	d102      	bne.n	8003f5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f54:	2302      	movs	r3, #2
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	e004      	b.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b70      	cmp	r3, #112	@ 0x70
 8003f5e:	d101      	bne.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f60:	2301      	movs	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f64:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f023 0207 	bic.w	r2, r3, #7
 8003f6c:	4909      	ldr	r1, [pc, #36]	@ (8003f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f74:	4b07      	ldr	r3, [pc, #28]	@ (8003f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d001      	beq.n	8003f86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40022000 	.word	0x40022000

08003f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d031      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fbc:	d01a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003fbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fc2:	d814      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d009      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fcc:	d10f      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003fce:	4b5d      	ldr	r3, [pc, #372]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	4a5c      	ldr	r2, [pc, #368]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fda:	e00c      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f9de 	bl	80043a4 <RCCEx_PLLSAI1_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fec:	e003      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10b      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ffc:	4b51      	ldr	r3, [pc, #324]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004002:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400a:	494e      	ldr	r1, [pc, #312]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004012:	e001      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 809e 	beq.w	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004026:	2300      	movs	r3, #0
 8004028:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800402a:	4b46      	ldr	r3, [pc, #280]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800402c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800403a:	2300      	movs	r3, #0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00d      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004040:	4b40      	ldr	r3, [pc, #256]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004044:	4a3f      	ldr	r2, [pc, #252]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800404a:	6593      	str	r3, [r2, #88]	@ 0x58
 800404c:	4b3d      	ldr	r3, [pc, #244]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800404e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004058:	2301      	movs	r3, #1
 800405a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800405c:	4b3a      	ldr	r3, [pc, #232]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a39      	ldr	r2, [pc, #228]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004066:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004068:	f7fd fefa 	bl	8001e60 <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800406e:	e009      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004070:	f7fd fef6 	bl	8001e60 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d902      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	74fb      	strb	r3, [r7, #19]
        break;
 8004082:	e005      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004084:	4b30      	ldr	r3, [pc, #192]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ef      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d15a      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004096:	4b2b      	ldr	r3, [pc, #172]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01e      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d019      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040b2:	4b24      	ldr	r3, [pc, #144]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040be:	4b21      	ldr	r3, [pc, #132]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040de:	4a19      	ldr	r2, [pc, #100]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d016      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fd feb6 	bl	8001e60 <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f6:	e00b      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f8:	f7fd feb2 	bl	8001e60 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d902      	bls.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	74fb      	strb	r3, [r7, #19]
            break;
 800410e:	e006      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004110:	4b0c      	ldr	r3, [pc, #48]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0ec      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004124:	4b07      	ldr	r3, [pc, #28]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004132:	4904      	ldr	r1, [pc, #16]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800413a:	e009      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	74bb      	strb	r3, [r7, #18]
 8004140:	e006      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004150:	7c7b      	ldrb	r3, [r7, #17]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d105      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004156:	4b8a      	ldr	r3, [pc, #552]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415a:	4a89      	ldr	r2, [pc, #548]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800415c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004160:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800416e:	4b84      	ldr	r3, [pc, #528]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004174:	f023 0203 	bic.w	r2, r3, #3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	4980      	ldr	r1, [pc, #512]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004196:	f023 020c 	bic.w	r2, r3, #12
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	4978      	ldr	r1, [pc, #480]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041b2:	4b73      	ldr	r3, [pc, #460]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c0:	496f      	ldr	r1, [pc, #444]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041da:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e2:	4967      	ldr	r1, [pc, #412]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041f6:	4b62      	ldr	r3, [pc, #392]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004204:	495e      	ldr	r1, [pc, #376]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004218:	4b59      	ldr	r3, [pc, #356]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004226:	4956      	ldr	r1, [pc, #344]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800423a:	4b51      	ldr	r3, [pc, #324]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004240:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004248:	494d      	ldr	r1, [pc, #308]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d028      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800425c:	4b48      	ldr	r3, [pc, #288]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004262:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	4945      	ldr	r1, [pc, #276]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800427a:	d106      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427c:	4b40      	ldr	r3, [pc, #256]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a3f      	ldr	r2, [pc, #252]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004286:	60d3      	str	r3, [r2, #12]
 8004288:	e011      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004292:	d10c      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	2101      	movs	r1, #1
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f882 	bl	80043a4 <RCCEx_PLLSAI1_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80042aa:	7cfb      	ldrb	r3, [r7, #19]
 80042ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d028      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042ba:	4b31      	ldr	r3, [pc, #196]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c8:	492d      	ldr	r1, [pc, #180]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042d8:	d106      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042da:	4b29      	ldr	r3, [pc, #164]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	4a28      	ldr	r2, [pc, #160]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042e4:	60d3      	str	r3, [r2, #12]
 80042e6:	e011      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042f0:	d10c      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2101      	movs	r1, #1
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 f853 	bl	80043a4 <RCCEx_PLLSAI1_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01c      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004318:	4b19      	ldr	r3, [pc, #100]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004326:	4916      	ldr	r1, [pc, #88]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004336:	d10c      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	2102      	movs	r1, #2
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f830 	bl	80043a4 <RCCEx_PLLSAI1_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800434e:	7cfb      	ldrb	r3, [r7, #19]
 8004350:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800435e:	4b08      	ldr	r3, [pc, #32]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004364:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436c:	4904      	ldr	r1, [pc, #16]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004374:	7cbb      	ldrb	r3, [r7, #18]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000

08004384 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004388:	4b05      	ldr	r3, [pc, #20]	@ (80043a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a04      	ldr	r2, [pc, #16]	@ (80043a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800438e:	f043 0304 	orr.w	r3, r3, #4
 8004392:	6013      	str	r3, [r2, #0]
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000

080043a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043b2:	4b74      	ldr	r3, [pc, #464]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d018      	beq.n	80043f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043be:	4b71      	ldr	r3, [pc, #452]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f003 0203 	and.w	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d10d      	bne.n	80043ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
       ||
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043d6:	4b6b      	ldr	r3, [pc, #428]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
       ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d047      	beq.n	800447a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
 80043ee:	e044      	b.n	800447a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d018      	beq.n	800442a <RCCEx_PLLSAI1_Config+0x86>
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d825      	bhi.n	8004448 <RCCEx_PLLSAI1_Config+0xa4>
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d002      	beq.n	8004406 <RCCEx_PLLSAI1_Config+0x62>
 8004400:	2b02      	cmp	r3, #2
 8004402:	d009      	beq.n	8004418 <RCCEx_PLLSAI1_Config+0x74>
 8004404:	e020      	b.n	8004448 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004406:	4b5f      	ldr	r3, [pc, #380]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d11d      	bne.n	800444e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004416:	e01a      	b.n	800444e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004418:	4b5a      	ldr	r3, [pc, #360]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d116      	bne.n	8004452 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004428:	e013      	b.n	8004452 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800442a:	4b56      	ldr	r3, [pc, #344]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10f      	bne.n	8004456 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004436:	4b53      	ldr	r3, [pc, #332]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004446:	e006      	b.n	8004456 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
      break;
 800444c:	e004      	b.n	8004458 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800444e:	bf00      	nop
 8004450:	e002      	b.n	8004458 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004452:	bf00      	nop
 8004454:	e000      	b.n	8004458 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004456:	bf00      	nop
    }

    if(status == HAL_OK)
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10d      	bne.n	800447a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800445e:	4b49      	ldr	r3, [pc, #292]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6819      	ldr	r1, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	3b01      	subs	r3, #1
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	430b      	orrs	r3, r1
 8004474:	4943      	ldr	r1, [pc, #268]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004476:	4313      	orrs	r3, r2
 8004478:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d17c      	bne.n	800457a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004480:	4b40      	ldr	r3, [pc, #256]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a3f      	ldr	r2, [pc, #252]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004486:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800448a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448c:	f7fd fce8 	bl	8001e60 <HAL_GetTick>
 8004490:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004492:	e009      	b.n	80044a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004494:	f7fd fce4 	bl	8001e60 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d902      	bls.n	80044a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	73fb      	strb	r3, [r7, #15]
        break;
 80044a6:	e005      	b.n	80044b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044a8:	4b36      	ldr	r3, [pc, #216]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1ef      	bne.n	8004494 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d15f      	bne.n	800457a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d110      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044c0:	4b30      	ldr	r3, [pc, #192]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80044c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6892      	ldr	r2, [r2, #8]
 80044d0:	0211      	lsls	r1, r2, #8
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68d2      	ldr	r2, [r2, #12]
 80044d6:	06d2      	lsls	r2, r2, #27
 80044d8:	430a      	orrs	r2, r1
 80044da:	492a      	ldr	r1, [pc, #168]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	610b      	str	r3, [r1, #16]
 80044e0:	e027      	b.n	8004532 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d112      	bne.n	800450e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044e8:	4b26      	ldr	r3, [pc, #152]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80044f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6892      	ldr	r2, [r2, #8]
 80044f8:	0211      	lsls	r1, r2, #8
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6912      	ldr	r2, [r2, #16]
 80044fe:	0852      	lsrs	r2, r2, #1
 8004500:	3a01      	subs	r2, #1
 8004502:	0552      	lsls	r2, r2, #21
 8004504:	430a      	orrs	r2, r1
 8004506:	491f      	ldr	r1, [pc, #124]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	610b      	str	r3, [r1, #16]
 800450c:	e011      	b.n	8004532 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800450e:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004516:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6892      	ldr	r2, [r2, #8]
 800451e:	0211      	lsls	r1, r2, #8
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6952      	ldr	r2, [r2, #20]
 8004524:	0852      	lsrs	r2, r2, #1
 8004526:	3a01      	subs	r2, #1
 8004528:	0652      	lsls	r2, r2, #25
 800452a:	430a      	orrs	r2, r1
 800452c:	4915      	ldr	r1, [pc, #84]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 800452e:	4313      	orrs	r3, r2
 8004530:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004532:	4b14      	ldr	r3, [pc, #80]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a13      	ldr	r2, [pc, #76]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004538:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800453c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453e:	f7fd fc8f 	bl	8001e60 <HAL_GetTick>
 8004542:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004544:	e009      	b.n	800455a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004546:	f7fd fc8b 	bl	8001e60 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d902      	bls.n	800455a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	73fb      	strb	r3, [r7, #15]
          break;
 8004558:	e005      	b.n	8004566 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800455a:	4b0a      	ldr	r3, [pc, #40]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0ef      	beq.n	8004546 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800456c:	4b05      	ldr	r3, [pc, #20]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	4903      	ldr	r1, [pc, #12]	@ (8004584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004576:	4313      	orrs	r3, r2
 8004578:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000

08004588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e040      	b.n	800461c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fd fb28 	bl	8001c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2224      	movs	r2, #36	@ 0x24
 80045b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0201 	bic.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fe00 	bl	80051d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fbd1 	bl	8004d7c <UART_SetConfig>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e01b      	b.n	800461c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fe7f 	bl	8005318 <UART_CheckIdleState>
 800461a:	4603      	mov	r3, r0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	@ 0x28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	4613      	mov	r3, r2
 8004630:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004636:	2b20      	cmp	r3, #32
 8004638:	d165      	bne.n	8004706 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_UART_Transmit_DMA+0x22>
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e05e      	b.n	8004708 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	88fa      	ldrh	r2, [r7, #6]
 800465c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2221      	movs	r2, #33	@ 0x21
 800466c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004672:	2b00      	cmp	r3, #0
 8004674:	d027      	beq.n	80046c6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467a:	4a25      	ldr	r2, [pc, #148]	@ (8004710 <HAL_UART_Transmit_DMA+0xec>)
 800467c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004682:	4a24      	ldr	r2, [pc, #144]	@ (8004714 <HAL_UART_Transmit_DMA+0xf0>)
 8004684:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468a:	4a23      	ldr	r2, [pc, #140]	@ (8004718 <HAL_UART_Transmit_DMA+0xf4>)
 800468c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004692:	2200      	movs	r2, #0
 8004694:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469e:	4619      	mov	r1, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3328      	adds	r3, #40	@ 0x28
 80046a6:	461a      	mov	r2, r3
 80046a8:	88fb      	ldrh	r3, [r7, #6]
 80046aa:	f7fd fdd3 	bl	8002254 <HAL_DMA_Start_IT>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2210      	movs	r2, #16
 80046b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e020      	b.n	8004708 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2240      	movs	r2, #64	@ 0x40
 80046cc:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3308      	adds	r3, #8
 80046d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	613b      	str	r3, [r7, #16]
   return(result);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3308      	adds	r3, #8
 80046ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ee:	623a      	str	r2, [r7, #32]
 80046f0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	69f9      	ldr	r1, [r7, #28]
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e5      	bne.n	80046ce <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004706:	2302      	movs	r3, #2
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	3728      	adds	r7, #40	@ 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	08005657 	.word	0x08005657
 8004714:	080056f1 	.word	0x080056f1
 8004718:	0800570d 	.word	0x0800570d

0800471c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b0ba      	sub	sp, #232	@ 0xe8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004742:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004746:	f640 030f 	movw	r3, #2063	@ 0x80f
 800474a:	4013      	ands	r3, r2
 800474c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d115      	bne.n	8004784 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00f      	beq.n	8004784 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d009      	beq.n	8004784 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 82ca 	beq.w	8004d0e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
      }
      return;
 8004782:	e2c4      	b.n	8004d0e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8117 	beq.w	80049bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800478e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800479a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800479e:	4b85      	ldr	r3, [pc, #532]	@ (80049b4 <HAL_UART_IRQHandler+0x298>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 810a 	beq.w	80049bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d011      	beq.n	80047d8 <HAL_UART_IRQHandler+0xbc>
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00b      	beq.n	80047d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2201      	movs	r2, #1
 80047c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047ce:	f043 0201 	orr.w	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d011      	beq.n	8004808 <HAL_UART_IRQHandler+0xec>
 80047e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2202      	movs	r2, #2
 80047f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047fe:	f043 0204 	orr.w	r2, r3, #4
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d011      	beq.n	8004838 <HAL_UART_IRQHandler+0x11c>
 8004814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00b      	beq.n	8004838 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2204      	movs	r2, #4
 8004826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800482e:	f043 0202 	orr.w	r2, r3, #2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d017      	beq.n	8004874 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004854:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2208      	movs	r2, #8
 8004862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800486a:	f043 0208 	orr.w	r2, r3, #8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800487c:	2b00      	cmp	r3, #0
 800487e:	d012      	beq.n	80048a6 <HAL_UART_IRQHandler+0x18a>
 8004880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004884:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00c      	beq.n	80048a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800489c:	f043 0220 	orr.w	r2, r3, #32
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8230 	beq.w	8004d12 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00d      	beq.n	80048da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ee:	2b40      	cmp	r3, #64	@ 0x40
 80048f0:	d005      	beq.n	80048fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d04f      	beq.n	800499e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fe45 	bl	800558e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800490e:	2b40      	cmp	r3, #64	@ 0x40
 8004910:	d141      	bne.n	8004996 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004928:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800492c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3308      	adds	r3, #8
 800493a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800493e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800494a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1d9      	bne.n	8004912 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004962:	2b00      	cmp	r3, #0
 8004964:	d013      	beq.n	800498e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496a:	4a13      	ldr	r2, [pc, #76]	@ (80049b8 <HAL_UART_IRQHandler+0x29c>)
 800496c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004972:	4618      	mov	r0, r3
 8004974:	f7fd fd0c 	bl	8002390 <HAL_DMA_Abort_IT>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d017      	beq.n	80049ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004988:	4610      	mov	r0, r2
 800498a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	e00f      	b.n	80049ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9de 	bl	8004d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004994:	e00b      	b.n	80049ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9da 	bl	8004d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499c:	e007      	b.n	80049ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f9d6 	bl	8004d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80049ac:	e1b1      	b.n	8004d12 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ae:	bf00      	nop
    return;
 80049b0:	e1af      	b.n	8004d12 <HAL_UART_IRQHandler+0x5f6>
 80049b2:	bf00      	nop
 80049b4:	04000120 	.word	0x04000120
 80049b8:	0800578b 	.word	0x0800578b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	f040 816a 	bne.w	8004c9a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 8163 	beq.w	8004c9a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 815c 	beq.w	8004c9a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2210      	movs	r2, #16
 80049e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	f040 80d4 	bne.w	8004ba2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 80ad 	beq.w	8004b6a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	f080 80a5 	bcs.w	8004b6a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f040 8086 	bne.w	8004b48 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004a66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1da      	bne.n	8004a3c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004aaa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004aae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ab2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004abc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e1      	bne.n	8004a86 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ad2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ae6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ae8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004aec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004af4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1e3      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b18:	f023 0310 	bic.w	r3, r3, #16
 8004b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e4      	bne.n	8004b08 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fd fbe6 	bl	8002314 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f8fe 	bl	8004d64 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004b68:	e0d5      	b.n	8004d16 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b74:	429a      	cmp	r2, r3
 8004b76:	f040 80ce 	bne.w	8004d16 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	f040 80c5 	bne.w	8004d16 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f8e2 	bl	8004d64 <HAL_UARTEx_RxEventCallback>
      return;
 8004ba0:	e0b9      	b.n	8004d16 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80ab 	beq.w	8004d1a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004bc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80a6 	beq.w	8004d1a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004be2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bf2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e4      	bne.n	8004bce <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	623b      	str	r3, [r7, #32]
   return(result);
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3308      	adds	r3, #8
 8004c24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c28:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e3      	bne.n	8004c04 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f023 0310 	bic.w	r3, r3, #16
 8004c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	69b9      	ldr	r1, [r7, #24]
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	617b      	str	r3, [r7, #20]
   return(result);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e4      	bne.n	8004c50 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f866 	bl	8004d64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c98:	e03f      	b.n	8004d1a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x5a8>
 8004ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d008      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004cba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fda4 	bl	800580a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cc2:	e02d      	b.n	8004d20 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00e      	beq.n	8004cee <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01c      	beq.n	8004d1e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
    }
    return;
 8004cec:	e017      	b.n	8004d1e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d012      	beq.n	8004d20 <HAL_UART_IRQHandler+0x604>
 8004cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00c      	beq.n	8004d20 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fd55 	bl	80057b6 <UART_EndTransmit_IT>
    return;
 8004d0c:	e008      	b.n	8004d20 <HAL_UART_IRQHandler+0x604>
      return;
 8004d0e:	bf00      	nop
 8004d10:	e006      	b.n	8004d20 <HAL_UART_IRQHandler+0x604>
    return;
 8004d12:	bf00      	nop
 8004d14:	e004      	b.n	8004d20 <HAL_UART_IRQHandler+0x604>
      return;
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <HAL_UART_IRQHandler+0x604>
      return;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <HAL_UART_IRQHandler+0x604>
    return;
 8004d1e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d20:	37e8      	adds	r7, #232	@ 0xe8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop

08004d28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d80:	b08a      	sub	sp, #40	@ 0x28
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	4bb4      	ldr	r3, [pc, #720]	@ (800507c <UART_SetConfig+0x300>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4aa9      	ldr	r2, [pc, #676]	@ (8005080 <UART_SetConfig+0x304>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de4:	4313      	orrs	r3, r2
 8004de6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4aa0      	ldr	r2, [pc, #640]	@ (8005084 <UART_SetConfig+0x308>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d126      	bne.n	8004e54 <UART_SetConfig+0xd8>
 8004e06:	4ba0      	ldr	r3, [pc, #640]	@ (8005088 <UART_SetConfig+0x30c>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d81b      	bhi.n	8004e4c <UART_SetConfig+0xd0>
 8004e14:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <UART_SetConfig+0xa0>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e3d 	.word	0x08004e3d
 8004e24:	08004e35 	.word	0x08004e35
 8004e28:	08004e45 	.word	0x08004e45
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e32:	e080      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004e34:	2302      	movs	r3, #2
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e3a:	e07c      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e42:	e078      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004e44:	2308      	movs	r3, #8
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e4a:	e074      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e52:	e070      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a8c      	ldr	r2, [pc, #560]	@ (800508c <UART_SetConfig+0x310>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d138      	bne.n	8004ed0 <UART_SetConfig+0x154>
 8004e5e:	4b8a      	ldr	r3, [pc, #552]	@ (8005088 <UART_SetConfig+0x30c>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e64:	f003 030c 	and.w	r3, r3, #12
 8004e68:	2b0c      	cmp	r3, #12
 8004e6a:	d82d      	bhi.n	8004ec8 <UART_SetConfig+0x14c>
 8004e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <UART_SetConfig+0xf8>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004ea9 	.word	0x08004ea9
 8004e78:	08004ec9 	.word	0x08004ec9
 8004e7c:	08004ec9 	.word	0x08004ec9
 8004e80:	08004ec9 	.word	0x08004ec9
 8004e84:	08004eb9 	.word	0x08004eb9
 8004e88:	08004ec9 	.word	0x08004ec9
 8004e8c:	08004ec9 	.word	0x08004ec9
 8004e90:	08004ec9 	.word	0x08004ec9
 8004e94:	08004eb1 	.word	0x08004eb1
 8004e98:	08004ec9 	.word	0x08004ec9
 8004e9c:	08004ec9 	.word	0x08004ec9
 8004ea0:	08004ec9 	.word	0x08004ec9
 8004ea4:	08004ec1 	.word	0x08004ec1
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eae:	e042      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb6:	e03e      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004eb8:	2304      	movs	r3, #4
 8004eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ebe:	e03a      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec6:	e036      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ece:	e032      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a6a      	ldr	r2, [pc, #424]	@ (8005080 <UART_SetConfig+0x304>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d12a      	bne.n	8004f30 <UART_SetConfig+0x1b4>
 8004eda:	4b6b      	ldr	r3, [pc, #428]	@ (8005088 <UART_SetConfig+0x30c>)
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ee4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ee8:	d01a      	beq.n	8004f20 <UART_SetConfig+0x1a4>
 8004eea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004eee:	d81b      	bhi.n	8004f28 <UART_SetConfig+0x1ac>
 8004ef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ef4:	d00c      	beq.n	8004f10 <UART_SetConfig+0x194>
 8004ef6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004efa:	d815      	bhi.n	8004f28 <UART_SetConfig+0x1ac>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <UART_SetConfig+0x18c>
 8004f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f04:	d008      	beq.n	8004f18 <UART_SetConfig+0x19c>
 8004f06:	e00f      	b.n	8004f28 <UART_SetConfig+0x1ac>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0e:	e012      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004f10:	2302      	movs	r3, #2
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f16:	e00e      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1e:	e00a      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004f20:	2308      	movs	r3, #8
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f26:	e006      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2e:	e002      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004f30:	2310      	movs	r3, #16
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a51      	ldr	r2, [pc, #324]	@ (8005080 <UART_SetConfig+0x304>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d17a      	bne.n	8005036 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d824      	bhi.n	8004f92 <UART_SetConfig+0x216>
 8004f48:	a201      	add	r2, pc, #4	@ (adr r2, 8004f50 <UART_SetConfig+0x1d4>)
 8004f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4e:	bf00      	nop
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f93 	.word	0x08004f93
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004f93 	.word	0x08004f93
 8004f60:	08004f83 	.word	0x08004f83
 8004f64:	08004f93 	.word	0x08004f93
 8004f68:	08004f93 	.word	0x08004f93
 8004f6c:	08004f93 	.word	0x08004f93
 8004f70:	08004f8b 	.word	0x08004f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f74:	f7fe ff84 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8004f78:	61f8      	str	r0, [r7, #28]
        break;
 8004f7a:	e010      	b.n	8004f9e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f7c:	4b44      	ldr	r3, [pc, #272]	@ (8005090 <UART_SetConfig+0x314>)
 8004f7e:	61fb      	str	r3, [r7, #28]
        break;
 8004f80:	e00d      	b.n	8004f9e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f82:	f7fe fee5 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8004f86:	61f8      	str	r0, [r7, #28]
        break;
 8004f88:	e009      	b.n	8004f9e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f8e:	61fb      	str	r3, [r7, #28]
        break;
 8004f90:	e005      	b.n	8004f9e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8107 	beq.w	80051b4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	4613      	mov	r3, r2
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4413      	add	r3, r2
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d305      	bcc.n	8004fc2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d903      	bls.n	8004fca <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004fc8:	e0f4      	b.n	80051b4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	461c      	mov	r4, r3
 8004fd0:	4615      	mov	r5, r2
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	f04f 0300 	mov.w	r3, #0
 8004fda:	022b      	lsls	r3, r5, #8
 8004fdc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004fe0:	0222      	lsls	r2, r4, #8
 8004fe2:	68f9      	ldr	r1, [r7, #12]
 8004fe4:	6849      	ldr	r1, [r1, #4]
 8004fe6:	0849      	lsrs	r1, r1, #1
 8004fe8:	2000      	movs	r0, #0
 8004fea:	4688      	mov	r8, r1
 8004fec:	4681      	mov	r9, r0
 8004fee:	eb12 0a08 	adds.w	sl, r2, r8
 8004ff2:	eb43 0b09 	adc.w	fp, r3, r9
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005004:	4650      	mov	r0, sl
 8005006:	4659      	mov	r1, fp
 8005008:	f7fb fdce 	bl	8000ba8 <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4613      	mov	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800501a:	d308      	bcc.n	800502e <UART_SetConfig+0x2b2>
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005022:	d204      	bcs.n	800502e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	60da      	str	r2, [r3, #12]
 800502c:	e0c2      	b.n	80051b4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005034:	e0be      	b.n	80051b4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800503e:	d16a      	bne.n	8005116 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005040:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005044:	2b08      	cmp	r3, #8
 8005046:	d834      	bhi.n	80050b2 <UART_SetConfig+0x336>
 8005048:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <UART_SetConfig+0x2d4>)
 800504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504e:	bf00      	nop
 8005050:	08005075 	.word	0x08005075
 8005054:	08005095 	.word	0x08005095
 8005058:	0800509d 	.word	0x0800509d
 800505c:	080050b3 	.word	0x080050b3
 8005060:	080050a3 	.word	0x080050a3
 8005064:	080050b3 	.word	0x080050b3
 8005068:	080050b3 	.word	0x080050b3
 800506c:	080050b3 	.word	0x080050b3
 8005070:	080050ab 	.word	0x080050ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005074:	f7fe ff04 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8005078:	61f8      	str	r0, [r7, #28]
        break;
 800507a:	e020      	b.n	80050be <UART_SetConfig+0x342>
 800507c:	efff69f3 	.word	0xefff69f3
 8005080:	40008000 	.word	0x40008000
 8005084:	40013800 	.word	0x40013800
 8005088:	40021000 	.word	0x40021000
 800508c:	40004400 	.word	0x40004400
 8005090:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005094:	f7fe ff0a 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 8005098:	61f8      	str	r0, [r7, #28]
        break;
 800509a:	e010      	b.n	80050be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800509c:	4b4c      	ldr	r3, [pc, #304]	@ (80051d0 <UART_SetConfig+0x454>)
 800509e:	61fb      	str	r3, [r7, #28]
        break;
 80050a0:	e00d      	b.n	80050be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a2:	f7fe fe55 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 80050a6:	61f8      	str	r0, [r7, #28]
        break;
 80050a8:	e009      	b.n	80050be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ae:	61fb      	str	r3, [r7, #28]
        break;
 80050b0:	e005      	b.n	80050be <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d077      	beq.n	80051b4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	005a      	lsls	r2, r3, #1
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	085b      	lsrs	r3, r3, #1
 80050ce:	441a      	add	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b0f      	cmp	r3, #15
 80050de:	d916      	bls.n	800510e <UART_SetConfig+0x392>
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e6:	d212      	bcs.n	800510e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f023 030f 	bic.w	r3, r3, #15
 80050f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	085b      	lsrs	r3, r3, #1
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	8afb      	ldrh	r3, [r7, #22]
 8005100:	4313      	orrs	r3, r2
 8005102:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	8afa      	ldrh	r2, [r7, #22]
 800510a:	60da      	str	r2, [r3, #12]
 800510c:	e052      	b.n	80051b4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005114:	e04e      	b.n	80051b4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005116:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800511a:	2b08      	cmp	r3, #8
 800511c:	d827      	bhi.n	800516e <UART_SetConfig+0x3f2>
 800511e:	a201      	add	r2, pc, #4	@ (adr r2, 8005124 <UART_SetConfig+0x3a8>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005149 	.word	0x08005149
 8005128:	08005151 	.word	0x08005151
 800512c:	08005159 	.word	0x08005159
 8005130:	0800516f 	.word	0x0800516f
 8005134:	0800515f 	.word	0x0800515f
 8005138:	0800516f 	.word	0x0800516f
 800513c:	0800516f 	.word	0x0800516f
 8005140:	0800516f 	.word	0x0800516f
 8005144:	08005167 	.word	0x08005167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005148:	f7fe fe9a 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 800514c:	61f8      	str	r0, [r7, #28]
        break;
 800514e:	e014      	b.n	800517a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005150:	f7fe feac 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 8005154:	61f8      	str	r0, [r7, #28]
        break;
 8005156:	e010      	b.n	800517a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005158:	4b1d      	ldr	r3, [pc, #116]	@ (80051d0 <UART_SetConfig+0x454>)
 800515a:	61fb      	str	r3, [r7, #28]
        break;
 800515c:	e00d      	b.n	800517a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800515e:	f7fe fdf7 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8005162:	61f8      	str	r0, [r7, #28]
        break;
 8005164:	e009      	b.n	800517a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800516a:	61fb      	str	r3, [r7, #28]
        break;
 800516c:	e005      	b.n	800517a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005178:	bf00      	nop
    }

    if (pclk != 0U)
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d019      	beq.n	80051b4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	085a      	lsrs	r2, r3, #1
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	441a      	add	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005192:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b0f      	cmp	r3, #15
 8005198:	d909      	bls.n	80051ae <UART_SetConfig+0x432>
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a0:	d205      	bcs.n	80051ae <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60da      	str	r2, [r3, #12]
 80051ac:	e002      	b.n	80051b4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3728      	adds	r7, #40	@ 0x28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ce:	bf00      	nop
 80051d0:	00f42400 	.word	0x00f42400

080051d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01a      	beq.n	80052ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052d2:	d10a      	bne.n	80052ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	605a      	str	r2, [r3, #4]
  }
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b098      	sub	sp, #96	@ 0x60
 800531c:	af02      	add	r7, sp, #8
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005328:	f7fc fd9a 	bl	8001e60 <HAL_GetTick>
 800532c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b08      	cmp	r3, #8
 800533a:	d12e      	bne.n	800539a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800533c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005344:	2200      	movs	r2, #0
 8005346:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f88c 	bl	8005468 <UART_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d021      	beq.n	800539a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800536a:	653b      	str	r3, [r7, #80]	@ 0x50
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005374:	647b      	str	r3, [r7, #68]	@ 0x44
 8005376:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800537a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e6      	bne.n	8005356 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e062      	b.n	8005460 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d149      	bne.n	800543c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053b0:	2200      	movs	r2, #0
 80053b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f856 	bl	8005468 <UART_WaitOnFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d03c      	beq.n	800543c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	e853 3f00 	ldrex	r3, [r3]
 80053ce:	623b      	str	r3, [r7, #32]
   return(result);
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e6      	bne.n	80053c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3308      	adds	r3, #8
 80053fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	60fb      	str	r3, [r7, #12]
   return(result);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3308      	adds	r3, #8
 8005412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005414:	61fa      	str	r2, [r7, #28]
 8005416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	69b9      	ldr	r1, [r7, #24]
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	617b      	str	r3, [r7, #20]
   return(result);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e5      	bne.n	80053f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e011      	b.n	8005460 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3758      	adds	r7, #88	@ 0x58
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005478:	e04f      	b.n	800551a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d04b      	beq.n	800551a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fc fced 	bl	8001e60 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <UART_WaitOnFlagUntilTimeout+0x30>
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e04e      	b.n	800553a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d037      	beq.n	800551a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b80      	cmp	r3, #128	@ 0x80
 80054ae:	d034      	beq.n	800551a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b40      	cmp	r3, #64	@ 0x40
 80054b4:	d031      	beq.n	800551a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d110      	bne.n	80054e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2208      	movs	r2, #8
 80054ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f85e 	bl	800558e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2208      	movs	r2, #8
 80054d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e029      	b.n	800553a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f4:	d111      	bne.n	800551a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f844 	bl	800558e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e00f      	b.n	800553a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4013      	ands	r3, r2
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	429a      	cmp	r2, r3
 8005528:	bf0c      	ite	eq
 800552a:	2301      	moveq	r3, #1
 800552c:	2300      	movne	r3, #0
 800552e:	b2db      	uxtb	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	429a      	cmp	r2, r3
 8005536:	d0a0      	beq.n	800547a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005542:	b480      	push	{r7}
 8005544:	b089      	sub	sp, #36	@ 0x24
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	60bb      	str	r3, [r7, #8]
   return(result);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800555e:	61fb      	str	r3, [r7, #28]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6979      	ldr	r1, [r7, #20]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	613b      	str	r3, [r7, #16]
   return(result);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005582:	bf00      	nop
 8005584:	3724      	adds	r7, #36	@ 0x24
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800558e:	b480      	push	{r7}
 8005590:	b095      	sub	sp, #84	@ 0x54
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e6      	bne.n	8005596 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3308      	adds	r3, #8
 80055ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e5      	bne.n	80055c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005600:	2b01      	cmp	r3, #1
 8005602:	d118      	bne.n	8005636 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	60bb      	str	r3, [r7, #8]
   return(result);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f023 0310 	bic.w	r3, r3, #16
 8005618:	647b      	str	r3, [r7, #68]	@ 0x44
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6979      	ldr	r1, [r7, #20]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	613b      	str	r3, [r7, #16]
   return(result);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e6      	bne.n	8005604 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800564a:	bf00      	nop
 800564c:	3754      	adds	r7, #84	@ 0x54
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b090      	sub	sp, #64	@ 0x40
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005662:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d137      	bne.n	80056e2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005674:	2200      	movs	r2, #0
 8005676:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800567a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3308      	adds	r3, #8
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	623b      	str	r3, [r7, #32]
   return(result);
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005690:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3308      	adds	r3, #8
 8005698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800569a:	633a      	str	r2, [r7, #48]	@ 0x30
 800569c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e5      	bne.n	800567a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80056c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	69b9      	ldr	r1, [r7, #24]
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	617b      	str	r3, [r7, #20]
   return(result);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e6      	bne.n	80056ae <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056e0:	e002      	b.n	80056e8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80056e2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80056e4:	f7ff fb20 	bl	8004d28 <HAL_UART_TxCpltCallback>
}
 80056e8:	bf00      	nop
 80056ea:	3740      	adds	r7, #64	@ 0x40
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff fb1c 	bl	8004d3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005704:	bf00      	nop
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800571e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005726:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005732:	2b80      	cmp	r3, #128	@ 0x80
 8005734:	d109      	bne.n	800574a <UART_DMAError+0x3e>
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b21      	cmp	r3, #33	@ 0x21
 800573a:	d106      	bne.n	800574a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2200      	movs	r2, #0
 8005740:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005744:	6978      	ldr	r0, [r7, #20]
 8005746:	f7ff fefc 	bl	8005542 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005754:	2b40      	cmp	r3, #64	@ 0x40
 8005756:	d109      	bne.n	800576c <UART_DMAError+0x60>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b22      	cmp	r3, #34	@ 0x22
 800575c:	d106      	bne.n	800576c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2200      	movs	r2, #0
 8005762:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005766:	6978      	ldr	r0, [r7, #20]
 8005768:	f7ff ff11 	bl	800558e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005772:	f043 0210 	orr.w	r2, r3, #16
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800577c:	6978      	ldr	r0, [r7, #20]
 800577e:	f7ff fae7 	bl	8004d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005782:	bf00      	nop
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005796:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff fad1 	bl	8004d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b088      	sub	sp, #32
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057d2:	61fb      	str	r3, [r7, #28]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	61bb      	str	r3, [r7, #24]
 80057de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6979      	ldr	r1, [r7, #20]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	613b      	str	r3, [r7, #16]
   return(result);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e6      	bne.n	80057be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff fa93 	bl	8004d28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005802:	bf00      	nop
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <__cvt>:
 800581e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005822:	ec57 6b10 	vmov	r6, r7, d0
 8005826:	2f00      	cmp	r7, #0
 8005828:	460c      	mov	r4, r1
 800582a:	4619      	mov	r1, r3
 800582c:	463b      	mov	r3, r7
 800582e:	bfbb      	ittet	lt
 8005830:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005834:	461f      	movlt	r7, r3
 8005836:	2300      	movge	r3, #0
 8005838:	232d      	movlt	r3, #45	@ 0x2d
 800583a:	700b      	strb	r3, [r1, #0]
 800583c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800583e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005842:	4691      	mov	r9, r2
 8005844:	f023 0820 	bic.w	r8, r3, #32
 8005848:	bfbc      	itt	lt
 800584a:	4632      	movlt	r2, r6
 800584c:	4616      	movlt	r6, r2
 800584e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005852:	d005      	beq.n	8005860 <__cvt+0x42>
 8005854:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005858:	d100      	bne.n	800585c <__cvt+0x3e>
 800585a:	3401      	adds	r4, #1
 800585c:	2102      	movs	r1, #2
 800585e:	e000      	b.n	8005862 <__cvt+0x44>
 8005860:	2103      	movs	r1, #3
 8005862:	ab03      	add	r3, sp, #12
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	ab02      	add	r3, sp, #8
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	ec47 6b10 	vmov	d0, r6, r7
 800586e:	4653      	mov	r3, sl
 8005870:	4622      	mov	r2, r4
 8005872:	f000 fe69 	bl	8006548 <_dtoa_r>
 8005876:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800587a:	4605      	mov	r5, r0
 800587c:	d119      	bne.n	80058b2 <__cvt+0x94>
 800587e:	f019 0f01 	tst.w	r9, #1
 8005882:	d00e      	beq.n	80058a2 <__cvt+0x84>
 8005884:	eb00 0904 	add.w	r9, r0, r4
 8005888:	2200      	movs	r2, #0
 800588a:	2300      	movs	r3, #0
 800588c:	4630      	mov	r0, r6
 800588e:	4639      	mov	r1, r7
 8005890:	f7fb f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005894:	b108      	cbz	r0, 800589a <__cvt+0x7c>
 8005896:	f8cd 900c 	str.w	r9, [sp, #12]
 800589a:	2230      	movs	r2, #48	@ 0x30
 800589c:	9b03      	ldr	r3, [sp, #12]
 800589e:	454b      	cmp	r3, r9
 80058a0:	d31e      	bcc.n	80058e0 <__cvt+0xc2>
 80058a2:	9b03      	ldr	r3, [sp, #12]
 80058a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80058a6:	1b5b      	subs	r3, r3, r5
 80058a8:	4628      	mov	r0, r5
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	b004      	add	sp, #16
 80058ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80058b6:	eb00 0904 	add.w	r9, r0, r4
 80058ba:	d1e5      	bne.n	8005888 <__cvt+0x6a>
 80058bc:	7803      	ldrb	r3, [r0, #0]
 80058be:	2b30      	cmp	r3, #48	@ 0x30
 80058c0:	d10a      	bne.n	80058d8 <__cvt+0xba>
 80058c2:	2200      	movs	r2, #0
 80058c4:	2300      	movs	r3, #0
 80058c6:	4630      	mov	r0, r6
 80058c8:	4639      	mov	r1, r7
 80058ca:	f7fb f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80058ce:	b918      	cbnz	r0, 80058d8 <__cvt+0xba>
 80058d0:	f1c4 0401 	rsb	r4, r4, #1
 80058d4:	f8ca 4000 	str.w	r4, [sl]
 80058d8:	f8da 3000 	ldr.w	r3, [sl]
 80058dc:	4499      	add	r9, r3
 80058de:	e7d3      	b.n	8005888 <__cvt+0x6a>
 80058e0:	1c59      	adds	r1, r3, #1
 80058e2:	9103      	str	r1, [sp, #12]
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e7d9      	b.n	800589c <__cvt+0x7e>

080058e8 <__exponent>:
 80058e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058ea:	2900      	cmp	r1, #0
 80058ec:	bfba      	itte	lt
 80058ee:	4249      	neglt	r1, r1
 80058f0:	232d      	movlt	r3, #45	@ 0x2d
 80058f2:	232b      	movge	r3, #43	@ 0x2b
 80058f4:	2909      	cmp	r1, #9
 80058f6:	7002      	strb	r2, [r0, #0]
 80058f8:	7043      	strb	r3, [r0, #1]
 80058fa:	dd29      	ble.n	8005950 <__exponent+0x68>
 80058fc:	f10d 0307 	add.w	r3, sp, #7
 8005900:	461d      	mov	r5, r3
 8005902:	270a      	movs	r7, #10
 8005904:	461a      	mov	r2, r3
 8005906:	fbb1 f6f7 	udiv	r6, r1, r7
 800590a:	fb07 1416 	mls	r4, r7, r6, r1
 800590e:	3430      	adds	r4, #48	@ 0x30
 8005910:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005914:	460c      	mov	r4, r1
 8005916:	2c63      	cmp	r4, #99	@ 0x63
 8005918:	f103 33ff 	add.w	r3, r3, #4294967295
 800591c:	4631      	mov	r1, r6
 800591e:	dcf1      	bgt.n	8005904 <__exponent+0x1c>
 8005920:	3130      	adds	r1, #48	@ 0x30
 8005922:	1e94      	subs	r4, r2, #2
 8005924:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005928:	1c41      	adds	r1, r0, #1
 800592a:	4623      	mov	r3, r4
 800592c:	42ab      	cmp	r3, r5
 800592e:	d30a      	bcc.n	8005946 <__exponent+0x5e>
 8005930:	f10d 0309 	add.w	r3, sp, #9
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	42ac      	cmp	r4, r5
 8005938:	bf88      	it	hi
 800593a:	2300      	movhi	r3, #0
 800593c:	3302      	adds	r3, #2
 800593e:	4403      	add	r3, r0
 8005940:	1a18      	subs	r0, r3, r0
 8005942:	b003      	add	sp, #12
 8005944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005946:	f813 6b01 	ldrb.w	r6, [r3], #1
 800594a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800594e:	e7ed      	b.n	800592c <__exponent+0x44>
 8005950:	2330      	movs	r3, #48	@ 0x30
 8005952:	3130      	adds	r1, #48	@ 0x30
 8005954:	7083      	strb	r3, [r0, #2]
 8005956:	70c1      	strb	r1, [r0, #3]
 8005958:	1d03      	adds	r3, r0, #4
 800595a:	e7f1      	b.n	8005940 <__exponent+0x58>

0800595c <_printf_float>:
 800595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005960:	b08d      	sub	sp, #52	@ 0x34
 8005962:	460c      	mov	r4, r1
 8005964:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005968:	4616      	mov	r6, r2
 800596a:	461f      	mov	r7, r3
 800596c:	4605      	mov	r5, r0
 800596e:	f000 fcdb 	bl	8006328 <_localeconv_r>
 8005972:	6803      	ldr	r3, [r0, #0]
 8005974:	9304      	str	r3, [sp, #16]
 8005976:	4618      	mov	r0, r3
 8005978:	f7fa fc7a 	bl	8000270 <strlen>
 800597c:	2300      	movs	r3, #0
 800597e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005980:	f8d8 3000 	ldr.w	r3, [r8]
 8005984:	9005      	str	r0, [sp, #20]
 8005986:	3307      	adds	r3, #7
 8005988:	f023 0307 	bic.w	r3, r3, #7
 800598c:	f103 0208 	add.w	r2, r3, #8
 8005990:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005994:	f8d4 b000 	ldr.w	fp, [r4]
 8005998:	f8c8 2000 	str.w	r2, [r8]
 800599c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80059a4:	9307      	str	r3, [sp, #28]
 80059a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80059aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80059ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059b2:	4b9c      	ldr	r3, [pc, #624]	@ (8005c24 <_printf_float+0x2c8>)
 80059b4:	f04f 32ff 	mov.w	r2, #4294967295
 80059b8:	f7fb f8b8 	bl	8000b2c <__aeabi_dcmpun>
 80059bc:	bb70      	cbnz	r0, 8005a1c <_printf_float+0xc0>
 80059be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059c2:	4b98      	ldr	r3, [pc, #608]	@ (8005c24 <_printf_float+0x2c8>)
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295
 80059c8:	f7fb f892 	bl	8000af0 <__aeabi_dcmple>
 80059cc:	bb30      	cbnz	r0, 8005a1c <_printf_float+0xc0>
 80059ce:	2200      	movs	r2, #0
 80059d0:	2300      	movs	r3, #0
 80059d2:	4640      	mov	r0, r8
 80059d4:	4649      	mov	r1, r9
 80059d6:	f7fb f881 	bl	8000adc <__aeabi_dcmplt>
 80059da:	b110      	cbz	r0, 80059e2 <_printf_float+0x86>
 80059dc:	232d      	movs	r3, #45	@ 0x2d
 80059de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059e2:	4a91      	ldr	r2, [pc, #580]	@ (8005c28 <_printf_float+0x2cc>)
 80059e4:	4b91      	ldr	r3, [pc, #580]	@ (8005c2c <_printf_float+0x2d0>)
 80059e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80059ea:	bf94      	ite	ls
 80059ec:	4690      	movls	r8, r2
 80059ee:	4698      	movhi	r8, r3
 80059f0:	2303      	movs	r3, #3
 80059f2:	6123      	str	r3, [r4, #16]
 80059f4:	f02b 0304 	bic.w	r3, fp, #4
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	f04f 0900 	mov.w	r9, #0
 80059fe:	9700      	str	r7, [sp, #0]
 8005a00:	4633      	mov	r3, r6
 8005a02:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005a04:	4621      	mov	r1, r4
 8005a06:	4628      	mov	r0, r5
 8005a08:	f000 f9d2 	bl	8005db0 <_printf_common>
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	f040 808d 	bne.w	8005b2c <_printf_float+0x1d0>
 8005a12:	f04f 30ff 	mov.w	r0, #4294967295
 8005a16:	b00d      	add	sp, #52	@ 0x34
 8005a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	464b      	mov	r3, r9
 8005a20:	4640      	mov	r0, r8
 8005a22:	4649      	mov	r1, r9
 8005a24:	f7fb f882 	bl	8000b2c <__aeabi_dcmpun>
 8005a28:	b140      	cbz	r0, 8005a3c <_printf_float+0xe0>
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	bfbc      	itt	lt
 8005a30:	232d      	movlt	r3, #45	@ 0x2d
 8005a32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005a36:	4a7e      	ldr	r2, [pc, #504]	@ (8005c30 <_printf_float+0x2d4>)
 8005a38:	4b7e      	ldr	r3, [pc, #504]	@ (8005c34 <_printf_float+0x2d8>)
 8005a3a:	e7d4      	b.n	80059e6 <_printf_float+0x8a>
 8005a3c:	6863      	ldr	r3, [r4, #4]
 8005a3e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005a42:	9206      	str	r2, [sp, #24]
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	d13b      	bne.n	8005ac0 <_printf_float+0x164>
 8005a48:	2306      	movs	r3, #6
 8005a4a:	6063      	str	r3, [r4, #4]
 8005a4c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005a50:	2300      	movs	r3, #0
 8005a52:	6022      	str	r2, [r4, #0]
 8005a54:	9303      	str	r3, [sp, #12]
 8005a56:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a58:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005a5c:	ab09      	add	r3, sp, #36	@ 0x24
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	6861      	ldr	r1, [r4, #4]
 8005a62:	ec49 8b10 	vmov	d0, r8, r9
 8005a66:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f7ff fed7 	bl	800581e <__cvt>
 8005a70:	9b06      	ldr	r3, [sp, #24]
 8005a72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a74:	2b47      	cmp	r3, #71	@ 0x47
 8005a76:	4680      	mov	r8, r0
 8005a78:	d129      	bne.n	8005ace <_printf_float+0x172>
 8005a7a:	1cc8      	adds	r0, r1, #3
 8005a7c:	db02      	blt.n	8005a84 <_printf_float+0x128>
 8005a7e:	6863      	ldr	r3, [r4, #4]
 8005a80:	4299      	cmp	r1, r3
 8005a82:	dd41      	ble.n	8005b08 <_printf_float+0x1ac>
 8005a84:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a88:	fa5f fa8a 	uxtb.w	sl, sl
 8005a8c:	3901      	subs	r1, #1
 8005a8e:	4652      	mov	r2, sl
 8005a90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a94:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a96:	f7ff ff27 	bl	80058e8 <__exponent>
 8005a9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a9c:	1813      	adds	r3, r2, r0
 8005a9e:	2a01      	cmp	r2, #1
 8005aa0:	4681      	mov	r9, r0
 8005aa2:	6123      	str	r3, [r4, #16]
 8005aa4:	dc02      	bgt.n	8005aac <_printf_float+0x150>
 8005aa6:	6822      	ldr	r2, [r4, #0]
 8005aa8:	07d2      	lsls	r2, r2, #31
 8005aaa:	d501      	bpl.n	8005ab0 <_printf_float+0x154>
 8005aac:	3301      	adds	r3, #1
 8005aae:	6123      	str	r3, [r4, #16]
 8005ab0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0a2      	beq.n	80059fe <_printf_float+0xa2>
 8005ab8:	232d      	movs	r3, #45	@ 0x2d
 8005aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005abe:	e79e      	b.n	80059fe <_printf_float+0xa2>
 8005ac0:	9a06      	ldr	r2, [sp, #24]
 8005ac2:	2a47      	cmp	r2, #71	@ 0x47
 8005ac4:	d1c2      	bne.n	8005a4c <_printf_float+0xf0>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1c0      	bne.n	8005a4c <_printf_float+0xf0>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e7bd      	b.n	8005a4a <_printf_float+0xee>
 8005ace:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ad2:	d9db      	bls.n	8005a8c <_printf_float+0x130>
 8005ad4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ad8:	d118      	bne.n	8005b0c <_printf_float+0x1b0>
 8005ada:	2900      	cmp	r1, #0
 8005adc:	6863      	ldr	r3, [r4, #4]
 8005ade:	dd0b      	ble.n	8005af8 <_printf_float+0x19c>
 8005ae0:	6121      	str	r1, [r4, #16]
 8005ae2:	b913      	cbnz	r3, 8005aea <_printf_float+0x18e>
 8005ae4:	6822      	ldr	r2, [r4, #0]
 8005ae6:	07d0      	lsls	r0, r2, #31
 8005ae8:	d502      	bpl.n	8005af0 <_printf_float+0x194>
 8005aea:	3301      	adds	r3, #1
 8005aec:	440b      	add	r3, r1
 8005aee:	6123      	str	r3, [r4, #16]
 8005af0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005af2:	f04f 0900 	mov.w	r9, #0
 8005af6:	e7db      	b.n	8005ab0 <_printf_float+0x154>
 8005af8:	b913      	cbnz	r3, 8005b00 <_printf_float+0x1a4>
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	07d2      	lsls	r2, r2, #31
 8005afe:	d501      	bpl.n	8005b04 <_printf_float+0x1a8>
 8005b00:	3302      	adds	r3, #2
 8005b02:	e7f4      	b.n	8005aee <_printf_float+0x192>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e7f2      	b.n	8005aee <_printf_float+0x192>
 8005b08:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005b0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b0e:	4299      	cmp	r1, r3
 8005b10:	db05      	blt.n	8005b1e <_printf_float+0x1c2>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	6121      	str	r1, [r4, #16]
 8005b16:	07d8      	lsls	r0, r3, #31
 8005b18:	d5ea      	bpl.n	8005af0 <_printf_float+0x194>
 8005b1a:	1c4b      	adds	r3, r1, #1
 8005b1c:	e7e7      	b.n	8005aee <_printf_float+0x192>
 8005b1e:	2900      	cmp	r1, #0
 8005b20:	bfd4      	ite	le
 8005b22:	f1c1 0202 	rsble	r2, r1, #2
 8005b26:	2201      	movgt	r2, #1
 8005b28:	4413      	add	r3, r2
 8005b2a:	e7e0      	b.n	8005aee <_printf_float+0x192>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	055a      	lsls	r2, r3, #21
 8005b30:	d407      	bmi.n	8005b42 <_printf_float+0x1e6>
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	4642      	mov	r2, r8
 8005b36:	4631      	mov	r1, r6
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b8      	blx	r7
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d12b      	bne.n	8005b98 <_printf_float+0x23c>
 8005b40:	e767      	b.n	8005a12 <_printf_float+0xb6>
 8005b42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b46:	f240 80dd 	bls.w	8005d04 <_printf_float+0x3a8>
 8005b4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2300      	movs	r3, #0
 8005b52:	f7fa ffb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d033      	beq.n	8005bc2 <_printf_float+0x266>
 8005b5a:	4a37      	ldr	r2, [pc, #220]	@ (8005c38 <_printf_float+0x2dc>)
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4628      	mov	r0, r5
 8005b62:	47b8      	blx	r7
 8005b64:	3001      	adds	r0, #1
 8005b66:	f43f af54 	beq.w	8005a12 <_printf_float+0xb6>
 8005b6a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005b6e:	4543      	cmp	r3, r8
 8005b70:	db02      	blt.n	8005b78 <_printf_float+0x21c>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	07d8      	lsls	r0, r3, #31
 8005b76:	d50f      	bpl.n	8005b98 <_printf_float+0x23c>
 8005b78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	3001      	adds	r0, #1
 8005b84:	f43f af45 	beq.w	8005a12 <_printf_float+0xb6>
 8005b88:	f04f 0900 	mov.w	r9, #0
 8005b8c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b90:	f104 0a1a 	add.w	sl, r4, #26
 8005b94:	45c8      	cmp	r8, r9
 8005b96:	dc09      	bgt.n	8005bac <_printf_float+0x250>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	079b      	lsls	r3, r3, #30
 8005b9c:	f100 8103 	bmi.w	8005da6 <_printf_float+0x44a>
 8005ba0:	68e0      	ldr	r0, [r4, #12]
 8005ba2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ba4:	4298      	cmp	r0, r3
 8005ba6:	bfb8      	it	lt
 8005ba8:	4618      	movlt	r0, r3
 8005baa:	e734      	b.n	8005a16 <_printf_float+0xba>
 8005bac:	2301      	movs	r3, #1
 8005bae:	4652      	mov	r2, sl
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b8      	blx	r7
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	f43f af2b 	beq.w	8005a12 <_printf_float+0xb6>
 8005bbc:	f109 0901 	add.w	r9, r9, #1
 8005bc0:	e7e8      	b.n	8005b94 <_printf_float+0x238>
 8005bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	dc39      	bgt.n	8005c3c <_printf_float+0x2e0>
 8005bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c38 <_printf_float+0x2dc>)
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f43f af1d 	beq.w	8005a12 <_printf_float+0xb6>
 8005bd8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005bdc:	ea59 0303 	orrs.w	r3, r9, r3
 8005be0:	d102      	bne.n	8005be8 <_printf_float+0x28c>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	07d9      	lsls	r1, r3, #31
 8005be6:	d5d7      	bpl.n	8005b98 <_printf_float+0x23c>
 8005be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f43f af0d 	beq.w	8005a12 <_printf_float+0xb6>
 8005bf8:	f04f 0a00 	mov.w	sl, #0
 8005bfc:	f104 0b1a 	add.w	fp, r4, #26
 8005c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c02:	425b      	negs	r3, r3
 8005c04:	4553      	cmp	r3, sl
 8005c06:	dc01      	bgt.n	8005c0c <_printf_float+0x2b0>
 8005c08:	464b      	mov	r3, r9
 8005c0a:	e793      	b.n	8005b34 <_printf_float+0x1d8>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	465a      	mov	r2, fp
 8005c10:	4631      	mov	r1, r6
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b8      	blx	r7
 8005c16:	3001      	adds	r0, #1
 8005c18:	f43f aefb 	beq.w	8005a12 <_printf_float+0xb6>
 8005c1c:	f10a 0a01 	add.w	sl, sl, #1
 8005c20:	e7ee      	b.n	8005c00 <_printf_float+0x2a4>
 8005c22:	bf00      	nop
 8005c24:	7fefffff 	.word	0x7fefffff
 8005c28:	08008b80 	.word	0x08008b80
 8005c2c:	08008b84 	.word	0x08008b84
 8005c30:	08008b88 	.word	0x08008b88
 8005c34:	08008b8c 	.word	0x08008b8c
 8005c38:	08008b90 	.word	0x08008b90
 8005c3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c3e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c42:	4553      	cmp	r3, sl
 8005c44:	bfa8      	it	ge
 8005c46:	4653      	movge	r3, sl
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	4699      	mov	r9, r3
 8005c4c:	dc36      	bgt.n	8005cbc <_printf_float+0x360>
 8005c4e:	f04f 0b00 	mov.w	fp, #0
 8005c52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c56:	f104 021a 	add.w	r2, r4, #26
 8005c5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c5c:	9306      	str	r3, [sp, #24]
 8005c5e:	eba3 0309 	sub.w	r3, r3, r9
 8005c62:	455b      	cmp	r3, fp
 8005c64:	dc31      	bgt.n	8005cca <_printf_float+0x36e>
 8005c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c68:	459a      	cmp	sl, r3
 8005c6a:	dc3a      	bgt.n	8005ce2 <_printf_float+0x386>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	07da      	lsls	r2, r3, #31
 8005c70:	d437      	bmi.n	8005ce2 <_printf_float+0x386>
 8005c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c74:	ebaa 0903 	sub.w	r9, sl, r3
 8005c78:	9b06      	ldr	r3, [sp, #24]
 8005c7a:	ebaa 0303 	sub.w	r3, sl, r3
 8005c7e:	4599      	cmp	r9, r3
 8005c80:	bfa8      	it	ge
 8005c82:	4699      	movge	r9, r3
 8005c84:	f1b9 0f00 	cmp.w	r9, #0
 8005c88:	dc33      	bgt.n	8005cf2 <_printf_float+0x396>
 8005c8a:	f04f 0800 	mov.w	r8, #0
 8005c8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c92:	f104 0b1a 	add.w	fp, r4, #26
 8005c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c98:	ebaa 0303 	sub.w	r3, sl, r3
 8005c9c:	eba3 0309 	sub.w	r3, r3, r9
 8005ca0:	4543      	cmp	r3, r8
 8005ca2:	f77f af79 	ble.w	8005b98 <_printf_float+0x23c>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	465a      	mov	r2, fp
 8005caa:	4631      	mov	r1, r6
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b8      	blx	r7
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	f43f aeae 	beq.w	8005a12 <_printf_float+0xb6>
 8005cb6:	f108 0801 	add.w	r8, r8, #1
 8005cba:	e7ec      	b.n	8005c96 <_printf_float+0x33a>
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d1c2      	bne.n	8005c4e <_printf_float+0x2f2>
 8005cc8:	e6a3      	b.n	8005a12 <_printf_float+0xb6>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	9206      	str	r2, [sp, #24]
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	f43f ae9c 	beq.w	8005a12 <_printf_float+0xb6>
 8005cda:	9a06      	ldr	r2, [sp, #24]
 8005cdc:	f10b 0b01 	add.w	fp, fp, #1
 8005ce0:	e7bb      	b.n	8005c5a <_printf_float+0x2fe>
 8005ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b8      	blx	r7
 8005cec:	3001      	adds	r0, #1
 8005cee:	d1c0      	bne.n	8005c72 <_printf_float+0x316>
 8005cf0:	e68f      	b.n	8005a12 <_printf_float+0xb6>
 8005cf2:	9a06      	ldr	r2, [sp, #24]
 8005cf4:	464b      	mov	r3, r9
 8005cf6:	4442      	add	r2, r8
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	47b8      	blx	r7
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d1c3      	bne.n	8005c8a <_printf_float+0x32e>
 8005d02:	e686      	b.n	8005a12 <_printf_float+0xb6>
 8005d04:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d08:	f1ba 0f01 	cmp.w	sl, #1
 8005d0c:	dc01      	bgt.n	8005d12 <_printf_float+0x3b6>
 8005d0e:	07db      	lsls	r3, r3, #31
 8005d10:	d536      	bpl.n	8005d80 <_printf_float+0x424>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4642      	mov	r2, r8
 8005d16:	4631      	mov	r1, r6
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b8      	blx	r7
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	f43f ae78 	beq.w	8005a12 <_printf_float+0xb6>
 8005d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d26:	4631      	mov	r1, r6
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f43f ae70 	beq.w	8005a12 <_printf_float+0xb6>
 8005d32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d36:	2200      	movs	r2, #0
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d3e:	f7fa fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d42:	b9c0      	cbnz	r0, 8005d76 <_printf_float+0x41a>
 8005d44:	4653      	mov	r3, sl
 8005d46:	f108 0201 	add.w	r2, r8, #1
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	d10c      	bne.n	8005d6e <_printf_float+0x412>
 8005d54:	e65d      	b.n	8005a12 <_printf_float+0xb6>
 8005d56:	2301      	movs	r3, #1
 8005d58:	465a      	mov	r2, fp
 8005d5a:	4631      	mov	r1, r6
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	47b8      	blx	r7
 8005d60:	3001      	adds	r0, #1
 8005d62:	f43f ae56 	beq.w	8005a12 <_printf_float+0xb6>
 8005d66:	f108 0801 	add.w	r8, r8, #1
 8005d6a:	45d0      	cmp	r8, sl
 8005d6c:	dbf3      	blt.n	8005d56 <_printf_float+0x3fa>
 8005d6e:	464b      	mov	r3, r9
 8005d70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d74:	e6df      	b.n	8005b36 <_printf_float+0x1da>
 8005d76:	f04f 0800 	mov.w	r8, #0
 8005d7a:	f104 0b1a 	add.w	fp, r4, #26
 8005d7e:	e7f4      	b.n	8005d6a <_printf_float+0x40e>
 8005d80:	2301      	movs	r3, #1
 8005d82:	4642      	mov	r2, r8
 8005d84:	e7e1      	b.n	8005d4a <_printf_float+0x3ee>
 8005d86:	2301      	movs	r3, #1
 8005d88:	464a      	mov	r2, r9
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	47b8      	blx	r7
 8005d90:	3001      	adds	r0, #1
 8005d92:	f43f ae3e 	beq.w	8005a12 <_printf_float+0xb6>
 8005d96:	f108 0801 	add.w	r8, r8, #1
 8005d9a:	68e3      	ldr	r3, [r4, #12]
 8005d9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d9e:	1a5b      	subs	r3, r3, r1
 8005da0:	4543      	cmp	r3, r8
 8005da2:	dcf0      	bgt.n	8005d86 <_printf_float+0x42a>
 8005da4:	e6fc      	b.n	8005ba0 <_printf_float+0x244>
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	f104 0919 	add.w	r9, r4, #25
 8005dae:	e7f4      	b.n	8005d9a <_printf_float+0x43e>

08005db0 <_printf_common>:
 8005db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db4:	4616      	mov	r6, r2
 8005db6:	4698      	mov	r8, r3
 8005db8:	688a      	ldr	r2, [r1, #8]
 8005dba:	690b      	ldr	r3, [r1, #16]
 8005dbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	bfb8      	it	lt
 8005dc4:	4613      	movlt	r3, r2
 8005dc6:	6033      	str	r3, [r6, #0]
 8005dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005dcc:	4607      	mov	r7, r0
 8005dce:	460c      	mov	r4, r1
 8005dd0:	b10a      	cbz	r2, 8005dd6 <_printf_common+0x26>
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	6033      	str	r3, [r6, #0]
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	0699      	lsls	r1, r3, #26
 8005dda:	bf42      	ittt	mi
 8005ddc:	6833      	ldrmi	r3, [r6, #0]
 8005dde:	3302      	addmi	r3, #2
 8005de0:	6033      	strmi	r3, [r6, #0]
 8005de2:	6825      	ldr	r5, [r4, #0]
 8005de4:	f015 0506 	ands.w	r5, r5, #6
 8005de8:	d106      	bne.n	8005df8 <_printf_common+0x48>
 8005dea:	f104 0a19 	add.w	sl, r4, #25
 8005dee:	68e3      	ldr	r3, [r4, #12]
 8005df0:	6832      	ldr	r2, [r6, #0]
 8005df2:	1a9b      	subs	r3, r3, r2
 8005df4:	42ab      	cmp	r3, r5
 8005df6:	dc26      	bgt.n	8005e46 <_printf_common+0x96>
 8005df8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005dfc:	6822      	ldr	r2, [r4, #0]
 8005dfe:	3b00      	subs	r3, #0
 8005e00:	bf18      	it	ne
 8005e02:	2301      	movne	r3, #1
 8005e04:	0692      	lsls	r2, r2, #26
 8005e06:	d42b      	bmi.n	8005e60 <_printf_common+0xb0>
 8005e08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e0c:	4641      	mov	r1, r8
 8005e0e:	4638      	mov	r0, r7
 8005e10:	47c8      	blx	r9
 8005e12:	3001      	adds	r0, #1
 8005e14:	d01e      	beq.n	8005e54 <_printf_common+0xa4>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	6922      	ldr	r2, [r4, #16]
 8005e1a:	f003 0306 	and.w	r3, r3, #6
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	bf02      	ittt	eq
 8005e22:	68e5      	ldreq	r5, [r4, #12]
 8005e24:	6833      	ldreq	r3, [r6, #0]
 8005e26:	1aed      	subeq	r5, r5, r3
 8005e28:	68a3      	ldr	r3, [r4, #8]
 8005e2a:	bf0c      	ite	eq
 8005e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e30:	2500      	movne	r5, #0
 8005e32:	4293      	cmp	r3, r2
 8005e34:	bfc4      	itt	gt
 8005e36:	1a9b      	subgt	r3, r3, r2
 8005e38:	18ed      	addgt	r5, r5, r3
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	341a      	adds	r4, #26
 8005e3e:	42b5      	cmp	r5, r6
 8005e40:	d11a      	bne.n	8005e78 <_printf_common+0xc8>
 8005e42:	2000      	movs	r0, #0
 8005e44:	e008      	b.n	8005e58 <_printf_common+0xa8>
 8005e46:	2301      	movs	r3, #1
 8005e48:	4652      	mov	r2, sl
 8005e4a:	4641      	mov	r1, r8
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	47c8      	blx	r9
 8005e50:	3001      	adds	r0, #1
 8005e52:	d103      	bne.n	8005e5c <_printf_common+0xac>
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295
 8005e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5c:	3501      	adds	r5, #1
 8005e5e:	e7c6      	b.n	8005dee <_printf_common+0x3e>
 8005e60:	18e1      	adds	r1, r4, r3
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	2030      	movs	r0, #48	@ 0x30
 8005e66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e6a:	4422      	add	r2, r4
 8005e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e74:	3302      	adds	r3, #2
 8005e76:	e7c7      	b.n	8005e08 <_printf_common+0x58>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4622      	mov	r2, r4
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	4638      	mov	r0, r7
 8005e80:	47c8      	blx	r9
 8005e82:	3001      	adds	r0, #1
 8005e84:	d0e6      	beq.n	8005e54 <_printf_common+0xa4>
 8005e86:	3601      	adds	r6, #1
 8005e88:	e7d9      	b.n	8005e3e <_printf_common+0x8e>
	...

08005e8c <_printf_i>:
 8005e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e90:	7e0f      	ldrb	r7, [r1, #24]
 8005e92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e94:	2f78      	cmp	r7, #120	@ 0x78
 8005e96:	4691      	mov	r9, r2
 8005e98:	4680      	mov	r8, r0
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	469a      	mov	sl, r3
 8005e9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ea2:	d807      	bhi.n	8005eb4 <_printf_i+0x28>
 8005ea4:	2f62      	cmp	r7, #98	@ 0x62
 8005ea6:	d80a      	bhi.n	8005ebe <_printf_i+0x32>
 8005ea8:	2f00      	cmp	r7, #0
 8005eaa:	f000 80d2 	beq.w	8006052 <_printf_i+0x1c6>
 8005eae:	2f58      	cmp	r7, #88	@ 0x58
 8005eb0:	f000 80b9 	beq.w	8006026 <_printf_i+0x19a>
 8005eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005eb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ebc:	e03a      	b.n	8005f34 <_printf_i+0xa8>
 8005ebe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ec2:	2b15      	cmp	r3, #21
 8005ec4:	d8f6      	bhi.n	8005eb4 <_printf_i+0x28>
 8005ec6:	a101      	add	r1, pc, #4	@ (adr r1, 8005ecc <_printf_i+0x40>)
 8005ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ecc:	08005f25 	.word	0x08005f25
 8005ed0:	08005f39 	.word	0x08005f39
 8005ed4:	08005eb5 	.word	0x08005eb5
 8005ed8:	08005eb5 	.word	0x08005eb5
 8005edc:	08005eb5 	.word	0x08005eb5
 8005ee0:	08005eb5 	.word	0x08005eb5
 8005ee4:	08005f39 	.word	0x08005f39
 8005ee8:	08005eb5 	.word	0x08005eb5
 8005eec:	08005eb5 	.word	0x08005eb5
 8005ef0:	08005eb5 	.word	0x08005eb5
 8005ef4:	08005eb5 	.word	0x08005eb5
 8005ef8:	08006039 	.word	0x08006039
 8005efc:	08005f63 	.word	0x08005f63
 8005f00:	08005ff3 	.word	0x08005ff3
 8005f04:	08005eb5 	.word	0x08005eb5
 8005f08:	08005eb5 	.word	0x08005eb5
 8005f0c:	0800605b 	.word	0x0800605b
 8005f10:	08005eb5 	.word	0x08005eb5
 8005f14:	08005f63 	.word	0x08005f63
 8005f18:	08005eb5 	.word	0x08005eb5
 8005f1c:	08005eb5 	.word	0x08005eb5
 8005f20:	08005ffb 	.word	0x08005ffb
 8005f24:	6833      	ldr	r3, [r6, #0]
 8005f26:	1d1a      	adds	r2, r3, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6032      	str	r2, [r6, #0]
 8005f2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f34:	2301      	movs	r3, #1
 8005f36:	e09d      	b.n	8006074 <_printf_i+0x1e8>
 8005f38:	6833      	ldr	r3, [r6, #0]
 8005f3a:	6820      	ldr	r0, [r4, #0]
 8005f3c:	1d19      	adds	r1, r3, #4
 8005f3e:	6031      	str	r1, [r6, #0]
 8005f40:	0606      	lsls	r6, r0, #24
 8005f42:	d501      	bpl.n	8005f48 <_printf_i+0xbc>
 8005f44:	681d      	ldr	r5, [r3, #0]
 8005f46:	e003      	b.n	8005f50 <_printf_i+0xc4>
 8005f48:	0645      	lsls	r5, r0, #25
 8005f4a:	d5fb      	bpl.n	8005f44 <_printf_i+0xb8>
 8005f4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f50:	2d00      	cmp	r5, #0
 8005f52:	da03      	bge.n	8005f5c <_printf_i+0xd0>
 8005f54:	232d      	movs	r3, #45	@ 0x2d
 8005f56:	426d      	negs	r5, r5
 8005f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f5c:	4859      	ldr	r0, [pc, #356]	@ (80060c4 <_printf_i+0x238>)
 8005f5e:	230a      	movs	r3, #10
 8005f60:	e011      	b.n	8005f86 <_printf_i+0xfa>
 8005f62:	6821      	ldr	r1, [r4, #0]
 8005f64:	6833      	ldr	r3, [r6, #0]
 8005f66:	0608      	lsls	r0, r1, #24
 8005f68:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f6c:	d402      	bmi.n	8005f74 <_printf_i+0xe8>
 8005f6e:	0649      	lsls	r1, r1, #25
 8005f70:	bf48      	it	mi
 8005f72:	b2ad      	uxthmi	r5, r5
 8005f74:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f76:	4853      	ldr	r0, [pc, #332]	@ (80060c4 <_printf_i+0x238>)
 8005f78:	6033      	str	r3, [r6, #0]
 8005f7a:	bf14      	ite	ne
 8005f7c:	230a      	movne	r3, #10
 8005f7e:	2308      	moveq	r3, #8
 8005f80:	2100      	movs	r1, #0
 8005f82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f86:	6866      	ldr	r6, [r4, #4]
 8005f88:	60a6      	str	r6, [r4, #8]
 8005f8a:	2e00      	cmp	r6, #0
 8005f8c:	bfa2      	ittt	ge
 8005f8e:	6821      	ldrge	r1, [r4, #0]
 8005f90:	f021 0104 	bicge.w	r1, r1, #4
 8005f94:	6021      	strge	r1, [r4, #0]
 8005f96:	b90d      	cbnz	r5, 8005f9c <_printf_i+0x110>
 8005f98:	2e00      	cmp	r6, #0
 8005f9a:	d04b      	beq.n	8006034 <_printf_i+0x1a8>
 8005f9c:	4616      	mov	r6, r2
 8005f9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fa2:	fb03 5711 	mls	r7, r3, r1, r5
 8005fa6:	5dc7      	ldrb	r7, [r0, r7]
 8005fa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fac:	462f      	mov	r7, r5
 8005fae:	42bb      	cmp	r3, r7
 8005fb0:	460d      	mov	r5, r1
 8005fb2:	d9f4      	bls.n	8005f9e <_printf_i+0x112>
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d10b      	bne.n	8005fd0 <_printf_i+0x144>
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	07df      	lsls	r7, r3, #31
 8005fbc:	d508      	bpl.n	8005fd0 <_printf_i+0x144>
 8005fbe:	6923      	ldr	r3, [r4, #16]
 8005fc0:	6861      	ldr	r1, [r4, #4]
 8005fc2:	4299      	cmp	r1, r3
 8005fc4:	bfde      	ittt	le
 8005fc6:	2330      	movle	r3, #48	@ 0x30
 8005fc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fd0:	1b92      	subs	r2, r2, r6
 8005fd2:	6122      	str	r2, [r4, #16]
 8005fd4:	f8cd a000 	str.w	sl, [sp]
 8005fd8:	464b      	mov	r3, r9
 8005fda:	aa03      	add	r2, sp, #12
 8005fdc:	4621      	mov	r1, r4
 8005fde:	4640      	mov	r0, r8
 8005fe0:	f7ff fee6 	bl	8005db0 <_printf_common>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d14a      	bne.n	800607e <_printf_i+0x1f2>
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fec:	b004      	add	sp, #16
 8005fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	f043 0320 	orr.w	r3, r3, #32
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	4833      	ldr	r0, [pc, #204]	@ (80060c8 <_printf_i+0x23c>)
 8005ffc:	2778      	movs	r7, #120	@ 0x78
 8005ffe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	6831      	ldr	r1, [r6, #0]
 8006006:	061f      	lsls	r7, r3, #24
 8006008:	f851 5b04 	ldr.w	r5, [r1], #4
 800600c:	d402      	bmi.n	8006014 <_printf_i+0x188>
 800600e:	065f      	lsls	r7, r3, #25
 8006010:	bf48      	it	mi
 8006012:	b2ad      	uxthmi	r5, r5
 8006014:	6031      	str	r1, [r6, #0]
 8006016:	07d9      	lsls	r1, r3, #31
 8006018:	bf44      	itt	mi
 800601a:	f043 0320 	orrmi.w	r3, r3, #32
 800601e:	6023      	strmi	r3, [r4, #0]
 8006020:	b11d      	cbz	r5, 800602a <_printf_i+0x19e>
 8006022:	2310      	movs	r3, #16
 8006024:	e7ac      	b.n	8005f80 <_printf_i+0xf4>
 8006026:	4827      	ldr	r0, [pc, #156]	@ (80060c4 <_printf_i+0x238>)
 8006028:	e7e9      	b.n	8005ffe <_printf_i+0x172>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	f023 0320 	bic.w	r3, r3, #32
 8006030:	6023      	str	r3, [r4, #0]
 8006032:	e7f6      	b.n	8006022 <_printf_i+0x196>
 8006034:	4616      	mov	r6, r2
 8006036:	e7bd      	b.n	8005fb4 <_printf_i+0x128>
 8006038:	6833      	ldr	r3, [r6, #0]
 800603a:	6825      	ldr	r5, [r4, #0]
 800603c:	6961      	ldr	r1, [r4, #20]
 800603e:	1d18      	adds	r0, r3, #4
 8006040:	6030      	str	r0, [r6, #0]
 8006042:	062e      	lsls	r6, r5, #24
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	d501      	bpl.n	800604c <_printf_i+0x1c0>
 8006048:	6019      	str	r1, [r3, #0]
 800604a:	e002      	b.n	8006052 <_printf_i+0x1c6>
 800604c:	0668      	lsls	r0, r5, #25
 800604e:	d5fb      	bpl.n	8006048 <_printf_i+0x1bc>
 8006050:	8019      	strh	r1, [r3, #0]
 8006052:	2300      	movs	r3, #0
 8006054:	6123      	str	r3, [r4, #16]
 8006056:	4616      	mov	r6, r2
 8006058:	e7bc      	b.n	8005fd4 <_printf_i+0x148>
 800605a:	6833      	ldr	r3, [r6, #0]
 800605c:	1d1a      	adds	r2, r3, #4
 800605e:	6032      	str	r2, [r6, #0]
 8006060:	681e      	ldr	r6, [r3, #0]
 8006062:	6862      	ldr	r2, [r4, #4]
 8006064:	2100      	movs	r1, #0
 8006066:	4630      	mov	r0, r6
 8006068:	f7fa f8b2 	bl	80001d0 <memchr>
 800606c:	b108      	cbz	r0, 8006072 <_printf_i+0x1e6>
 800606e:	1b80      	subs	r0, r0, r6
 8006070:	6060      	str	r0, [r4, #4]
 8006072:	6863      	ldr	r3, [r4, #4]
 8006074:	6123      	str	r3, [r4, #16]
 8006076:	2300      	movs	r3, #0
 8006078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800607c:	e7aa      	b.n	8005fd4 <_printf_i+0x148>
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	4632      	mov	r2, r6
 8006082:	4649      	mov	r1, r9
 8006084:	4640      	mov	r0, r8
 8006086:	47d0      	blx	sl
 8006088:	3001      	adds	r0, #1
 800608a:	d0ad      	beq.n	8005fe8 <_printf_i+0x15c>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	079b      	lsls	r3, r3, #30
 8006090:	d413      	bmi.n	80060ba <_printf_i+0x22e>
 8006092:	68e0      	ldr	r0, [r4, #12]
 8006094:	9b03      	ldr	r3, [sp, #12]
 8006096:	4298      	cmp	r0, r3
 8006098:	bfb8      	it	lt
 800609a:	4618      	movlt	r0, r3
 800609c:	e7a6      	b.n	8005fec <_printf_i+0x160>
 800609e:	2301      	movs	r3, #1
 80060a0:	4632      	mov	r2, r6
 80060a2:	4649      	mov	r1, r9
 80060a4:	4640      	mov	r0, r8
 80060a6:	47d0      	blx	sl
 80060a8:	3001      	adds	r0, #1
 80060aa:	d09d      	beq.n	8005fe8 <_printf_i+0x15c>
 80060ac:	3501      	adds	r5, #1
 80060ae:	68e3      	ldr	r3, [r4, #12]
 80060b0:	9903      	ldr	r1, [sp, #12]
 80060b2:	1a5b      	subs	r3, r3, r1
 80060b4:	42ab      	cmp	r3, r5
 80060b6:	dcf2      	bgt.n	800609e <_printf_i+0x212>
 80060b8:	e7eb      	b.n	8006092 <_printf_i+0x206>
 80060ba:	2500      	movs	r5, #0
 80060bc:	f104 0619 	add.w	r6, r4, #25
 80060c0:	e7f5      	b.n	80060ae <_printf_i+0x222>
 80060c2:	bf00      	nop
 80060c4:	08008b92 	.word	0x08008b92
 80060c8:	08008ba3 	.word	0x08008ba3

080060cc <std>:
 80060cc:	2300      	movs	r3, #0
 80060ce:	b510      	push	{r4, lr}
 80060d0:	4604      	mov	r4, r0
 80060d2:	e9c0 3300 	strd	r3, r3, [r0]
 80060d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060da:	6083      	str	r3, [r0, #8]
 80060dc:	8181      	strh	r1, [r0, #12]
 80060de:	6643      	str	r3, [r0, #100]	@ 0x64
 80060e0:	81c2      	strh	r2, [r0, #14]
 80060e2:	6183      	str	r3, [r0, #24]
 80060e4:	4619      	mov	r1, r3
 80060e6:	2208      	movs	r2, #8
 80060e8:	305c      	adds	r0, #92	@ 0x5c
 80060ea:	f000 f914 	bl	8006316 <memset>
 80060ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006124 <std+0x58>)
 80060f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80060f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006128 <std+0x5c>)
 80060f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060f6:	4b0d      	ldr	r3, [pc, #52]	@ (800612c <std+0x60>)
 80060f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006130 <std+0x64>)
 80060fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80060fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006134 <std+0x68>)
 8006100:	6224      	str	r4, [r4, #32]
 8006102:	429c      	cmp	r4, r3
 8006104:	d006      	beq.n	8006114 <std+0x48>
 8006106:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800610a:	4294      	cmp	r4, r2
 800610c:	d002      	beq.n	8006114 <std+0x48>
 800610e:	33d0      	adds	r3, #208	@ 0xd0
 8006110:	429c      	cmp	r4, r3
 8006112:	d105      	bne.n	8006120 <std+0x54>
 8006114:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800611c:	f000 b978 	b.w	8006410 <__retarget_lock_init_recursive>
 8006120:	bd10      	pop	{r4, pc}
 8006122:	bf00      	nop
 8006124:	08006291 	.word	0x08006291
 8006128:	080062b3 	.word	0x080062b3
 800612c:	080062eb 	.word	0x080062eb
 8006130:	0800630f 	.word	0x0800630f
 8006134:	200007dc 	.word	0x200007dc

08006138 <stdio_exit_handler>:
 8006138:	4a02      	ldr	r2, [pc, #8]	@ (8006144 <stdio_exit_handler+0xc>)
 800613a:	4903      	ldr	r1, [pc, #12]	@ (8006148 <stdio_exit_handler+0x10>)
 800613c:	4803      	ldr	r0, [pc, #12]	@ (800614c <stdio_exit_handler+0x14>)
 800613e:	f000 b869 	b.w	8006214 <_fwalk_sglue>
 8006142:	bf00      	nop
 8006144:	20000014 	.word	0x20000014
 8006148:	08007d8d 	.word	0x08007d8d
 800614c:	20000024 	.word	0x20000024

08006150 <cleanup_stdio>:
 8006150:	6841      	ldr	r1, [r0, #4]
 8006152:	4b0c      	ldr	r3, [pc, #48]	@ (8006184 <cleanup_stdio+0x34>)
 8006154:	4299      	cmp	r1, r3
 8006156:	b510      	push	{r4, lr}
 8006158:	4604      	mov	r4, r0
 800615a:	d001      	beq.n	8006160 <cleanup_stdio+0x10>
 800615c:	f001 fe16 	bl	8007d8c <_fflush_r>
 8006160:	68a1      	ldr	r1, [r4, #8]
 8006162:	4b09      	ldr	r3, [pc, #36]	@ (8006188 <cleanup_stdio+0x38>)
 8006164:	4299      	cmp	r1, r3
 8006166:	d002      	beq.n	800616e <cleanup_stdio+0x1e>
 8006168:	4620      	mov	r0, r4
 800616a:	f001 fe0f 	bl	8007d8c <_fflush_r>
 800616e:	68e1      	ldr	r1, [r4, #12]
 8006170:	4b06      	ldr	r3, [pc, #24]	@ (800618c <cleanup_stdio+0x3c>)
 8006172:	4299      	cmp	r1, r3
 8006174:	d004      	beq.n	8006180 <cleanup_stdio+0x30>
 8006176:	4620      	mov	r0, r4
 8006178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800617c:	f001 be06 	b.w	8007d8c <_fflush_r>
 8006180:	bd10      	pop	{r4, pc}
 8006182:	bf00      	nop
 8006184:	200007dc 	.word	0x200007dc
 8006188:	20000844 	.word	0x20000844
 800618c:	200008ac 	.word	0x200008ac

08006190 <global_stdio_init.part.0>:
 8006190:	b510      	push	{r4, lr}
 8006192:	4b0b      	ldr	r3, [pc, #44]	@ (80061c0 <global_stdio_init.part.0+0x30>)
 8006194:	4c0b      	ldr	r4, [pc, #44]	@ (80061c4 <global_stdio_init.part.0+0x34>)
 8006196:	4a0c      	ldr	r2, [pc, #48]	@ (80061c8 <global_stdio_init.part.0+0x38>)
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	4620      	mov	r0, r4
 800619c:	2200      	movs	r2, #0
 800619e:	2104      	movs	r1, #4
 80061a0:	f7ff ff94 	bl	80060cc <std>
 80061a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061a8:	2201      	movs	r2, #1
 80061aa:	2109      	movs	r1, #9
 80061ac:	f7ff ff8e 	bl	80060cc <std>
 80061b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061b4:	2202      	movs	r2, #2
 80061b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ba:	2112      	movs	r1, #18
 80061bc:	f7ff bf86 	b.w	80060cc <std>
 80061c0:	20000914 	.word	0x20000914
 80061c4:	200007dc 	.word	0x200007dc
 80061c8:	08006139 	.word	0x08006139

080061cc <__sfp_lock_acquire>:
 80061cc:	4801      	ldr	r0, [pc, #4]	@ (80061d4 <__sfp_lock_acquire+0x8>)
 80061ce:	f000 b920 	b.w	8006412 <__retarget_lock_acquire_recursive>
 80061d2:	bf00      	nop
 80061d4:	2000091d 	.word	0x2000091d

080061d8 <__sfp_lock_release>:
 80061d8:	4801      	ldr	r0, [pc, #4]	@ (80061e0 <__sfp_lock_release+0x8>)
 80061da:	f000 b91b 	b.w	8006414 <__retarget_lock_release_recursive>
 80061de:	bf00      	nop
 80061e0:	2000091d 	.word	0x2000091d

080061e4 <__sinit>:
 80061e4:	b510      	push	{r4, lr}
 80061e6:	4604      	mov	r4, r0
 80061e8:	f7ff fff0 	bl	80061cc <__sfp_lock_acquire>
 80061ec:	6a23      	ldr	r3, [r4, #32]
 80061ee:	b11b      	cbz	r3, 80061f8 <__sinit+0x14>
 80061f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061f4:	f7ff bff0 	b.w	80061d8 <__sfp_lock_release>
 80061f8:	4b04      	ldr	r3, [pc, #16]	@ (800620c <__sinit+0x28>)
 80061fa:	6223      	str	r3, [r4, #32]
 80061fc:	4b04      	ldr	r3, [pc, #16]	@ (8006210 <__sinit+0x2c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1f5      	bne.n	80061f0 <__sinit+0xc>
 8006204:	f7ff ffc4 	bl	8006190 <global_stdio_init.part.0>
 8006208:	e7f2      	b.n	80061f0 <__sinit+0xc>
 800620a:	bf00      	nop
 800620c:	08006151 	.word	0x08006151
 8006210:	20000914 	.word	0x20000914

08006214 <_fwalk_sglue>:
 8006214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006218:	4607      	mov	r7, r0
 800621a:	4688      	mov	r8, r1
 800621c:	4614      	mov	r4, r2
 800621e:	2600      	movs	r6, #0
 8006220:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006224:	f1b9 0901 	subs.w	r9, r9, #1
 8006228:	d505      	bpl.n	8006236 <_fwalk_sglue+0x22>
 800622a:	6824      	ldr	r4, [r4, #0]
 800622c:	2c00      	cmp	r4, #0
 800622e:	d1f7      	bne.n	8006220 <_fwalk_sglue+0xc>
 8006230:	4630      	mov	r0, r6
 8006232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006236:	89ab      	ldrh	r3, [r5, #12]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d907      	bls.n	800624c <_fwalk_sglue+0x38>
 800623c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006240:	3301      	adds	r3, #1
 8006242:	d003      	beq.n	800624c <_fwalk_sglue+0x38>
 8006244:	4629      	mov	r1, r5
 8006246:	4638      	mov	r0, r7
 8006248:	47c0      	blx	r8
 800624a:	4306      	orrs	r6, r0
 800624c:	3568      	adds	r5, #104	@ 0x68
 800624e:	e7e9      	b.n	8006224 <_fwalk_sglue+0x10>

08006250 <siprintf>:
 8006250:	b40e      	push	{r1, r2, r3}
 8006252:	b500      	push	{lr}
 8006254:	b09c      	sub	sp, #112	@ 0x70
 8006256:	ab1d      	add	r3, sp, #116	@ 0x74
 8006258:	9002      	str	r0, [sp, #8]
 800625a:	9006      	str	r0, [sp, #24]
 800625c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006260:	4809      	ldr	r0, [pc, #36]	@ (8006288 <siprintf+0x38>)
 8006262:	9107      	str	r1, [sp, #28]
 8006264:	9104      	str	r1, [sp, #16]
 8006266:	4909      	ldr	r1, [pc, #36]	@ (800628c <siprintf+0x3c>)
 8006268:	f853 2b04 	ldr.w	r2, [r3], #4
 800626c:	9105      	str	r1, [sp, #20]
 800626e:	6800      	ldr	r0, [r0, #0]
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	a902      	add	r1, sp, #8
 8006274:	f001 fc0a 	bl	8007a8c <_svfiprintf_r>
 8006278:	9b02      	ldr	r3, [sp, #8]
 800627a:	2200      	movs	r2, #0
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	b01c      	add	sp, #112	@ 0x70
 8006280:	f85d eb04 	ldr.w	lr, [sp], #4
 8006284:	b003      	add	sp, #12
 8006286:	4770      	bx	lr
 8006288:	20000020 	.word	0x20000020
 800628c:	ffff0208 	.word	0xffff0208

08006290 <__sread>:
 8006290:	b510      	push	{r4, lr}
 8006292:	460c      	mov	r4, r1
 8006294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006298:	f000 f86c 	bl	8006374 <_read_r>
 800629c:	2800      	cmp	r0, #0
 800629e:	bfab      	itete	ge
 80062a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062a2:	89a3      	ldrhlt	r3, [r4, #12]
 80062a4:	181b      	addge	r3, r3, r0
 80062a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062aa:	bfac      	ite	ge
 80062ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062ae:	81a3      	strhlt	r3, [r4, #12]
 80062b0:	bd10      	pop	{r4, pc}

080062b2 <__swrite>:
 80062b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b6:	461f      	mov	r7, r3
 80062b8:	898b      	ldrh	r3, [r1, #12]
 80062ba:	05db      	lsls	r3, r3, #23
 80062bc:	4605      	mov	r5, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	4616      	mov	r6, r2
 80062c2:	d505      	bpl.n	80062d0 <__swrite+0x1e>
 80062c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c8:	2302      	movs	r3, #2
 80062ca:	2200      	movs	r2, #0
 80062cc:	f000 f840 	bl	8006350 <_lseek_r>
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062da:	81a3      	strh	r3, [r4, #12]
 80062dc:	4632      	mov	r2, r6
 80062de:	463b      	mov	r3, r7
 80062e0:	4628      	mov	r0, r5
 80062e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062e6:	f000 b857 	b.w	8006398 <_write_r>

080062ea <__sseek>:
 80062ea:	b510      	push	{r4, lr}
 80062ec:	460c      	mov	r4, r1
 80062ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f2:	f000 f82d 	bl	8006350 <_lseek_r>
 80062f6:	1c43      	adds	r3, r0, #1
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	bf15      	itete	ne
 80062fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006302:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006306:	81a3      	strheq	r3, [r4, #12]
 8006308:	bf18      	it	ne
 800630a:	81a3      	strhne	r3, [r4, #12]
 800630c:	bd10      	pop	{r4, pc}

0800630e <__sclose>:
 800630e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006312:	f000 b80d 	b.w	8006330 <_close_r>

08006316 <memset>:
 8006316:	4402      	add	r2, r0
 8006318:	4603      	mov	r3, r0
 800631a:	4293      	cmp	r3, r2
 800631c:	d100      	bne.n	8006320 <memset+0xa>
 800631e:	4770      	bx	lr
 8006320:	f803 1b01 	strb.w	r1, [r3], #1
 8006324:	e7f9      	b.n	800631a <memset+0x4>
	...

08006328 <_localeconv_r>:
 8006328:	4800      	ldr	r0, [pc, #0]	@ (800632c <_localeconv_r+0x4>)
 800632a:	4770      	bx	lr
 800632c:	20000160 	.word	0x20000160

08006330 <_close_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4d06      	ldr	r5, [pc, #24]	@ (800634c <_close_r+0x1c>)
 8006334:	2300      	movs	r3, #0
 8006336:	4604      	mov	r4, r0
 8006338:	4608      	mov	r0, r1
 800633a:	602b      	str	r3, [r5, #0]
 800633c:	f7fb fbb4 	bl	8001aa8 <_close>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d102      	bne.n	800634a <_close_r+0x1a>
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	b103      	cbz	r3, 800634a <_close_r+0x1a>
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	20000918 	.word	0x20000918

08006350 <_lseek_r>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	4d07      	ldr	r5, [pc, #28]	@ (8006370 <_lseek_r+0x20>)
 8006354:	4604      	mov	r4, r0
 8006356:	4608      	mov	r0, r1
 8006358:	4611      	mov	r1, r2
 800635a:	2200      	movs	r2, #0
 800635c:	602a      	str	r2, [r5, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	f7fb fbc9 	bl	8001af6 <_lseek>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d102      	bne.n	800636e <_lseek_r+0x1e>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	b103      	cbz	r3, 800636e <_lseek_r+0x1e>
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	20000918 	.word	0x20000918

08006374 <_read_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d07      	ldr	r5, [pc, #28]	@ (8006394 <_read_r+0x20>)
 8006378:	4604      	mov	r4, r0
 800637a:	4608      	mov	r0, r1
 800637c:	4611      	mov	r1, r2
 800637e:	2200      	movs	r2, #0
 8006380:	602a      	str	r2, [r5, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	f7fb fb57 	bl	8001a36 <_read>
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	d102      	bne.n	8006392 <_read_r+0x1e>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	b103      	cbz	r3, 8006392 <_read_r+0x1e>
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	20000918 	.word	0x20000918

08006398 <_write_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4d07      	ldr	r5, [pc, #28]	@ (80063b8 <_write_r+0x20>)
 800639c:	4604      	mov	r4, r0
 800639e:	4608      	mov	r0, r1
 80063a0:	4611      	mov	r1, r2
 80063a2:	2200      	movs	r2, #0
 80063a4:	602a      	str	r2, [r5, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f7fb fb62 	bl	8001a70 <_write>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d102      	bne.n	80063b6 <_write_r+0x1e>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	b103      	cbz	r3, 80063b6 <_write_r+0x1e>
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	bd38      	pop	{r3, r4, r5, pc}
 80063b8:	20000918 	.word	0x20000918

080063bc <__errno>:
 80063bc:	4b01      	ldr	r3, [pc, #4]	@ (80063c4 <__errno+0x8>)
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20000020 	.word	0x20000020

080063c8 <__libc_init_array>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	4d0d      	ldr	r5, [pc, #52]	@ (8006400 <__libc_init_array+0x38>)
 80063cc:	4c0d      	ldr	r4, [pc, #52]	@ (8006404 <__libc_init_array+0x3c>)
 80063ce:	1b64      	subs	r4, r4, r5
 80063d0:	10a4      	asrs	r4, r4, #2
 80063d2:	2600      	movs	r6, #0
 80063d4:	42a6      	cmp	r6, r4
 80063d6:	d109      	bne.n	80063ec <__libc_init_array+0x24>
 80063d8:	4d0b      	ldr	r5, [pc, #44]	@ (8006408 <__libc_init_array+0x40>)
 80063da:	4c0c      	ldr	r4, [pc, #48]	@ (800640c <__libc_init_array+0x44>)
 80063dc:	f002 f866 	bl	80084ac <_init>
 80063e0:	1b64      	subs	r4, r4, r5
 80063e2:	10a4      	asrs	r4, r4, #2
 80063e4:	2600      	movs	r6, #0
 80063e6:	42a6      	cmp	r6, r4
 80063e8:	d105      	bne.n	80063f6 <__libc_init_array+0x2e>
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f0:	4798      	blx	r3
 80063f2:	3601      	adds	r6, #1
 80063f4:	e7ee      	b.n	80063d4 <__libc_init_array+0xc>
 80063f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063fa:	4798      	blx	r3
 80063fc:	3601      	adds	r6, #1
 80063fe:	e7f2      	b.n	80063e6 <__libc_init_array+0x1e>
 8006400:	08008ef8 	.word	0x08008ef8
 8006404:	08008ef8 	.word	0x08008ef8
 8006408:	08008ef8 	.word	0x08008ef8
 800640c:	08008efc 	.word	0x08008efc

08006410 <__retarget_lock_init_recursive>:
 8006410:	4770      	bx	lr

08006412 <__retarget_lock_acquire_recursive>:
 8006412:	4770      	bx	lr

08006414 <__retarget_lock_release_recursive>:
 8006414:	4770      	bx	lr

08006416 <memcpy>:
 8006416:	440a      	add	r2, r1
 8006418:	4291      	cmp	r1, r2
 800641a:	f100 33ff 	add.w	r3, r0, #4294967295
 800641e:	d100      	bne.n	8006422 <memcpy+0xc>
 8006420:	4770      	bx	lr
 8006422:	b510      	push	{r4, lr}
 8006424:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006428:	f803 4f01 	strb.w	r4, [r3, #1]!
 800642c:	4291      	cmp	r1, r2
 800642e:	d1f9      	bne.n	8006424 <memcpy+0xe>
 8006430:	bd10      	pop	{r4, pc}

08006432 <quorem>:
 8006432:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006436:	6903      	ldr	r3, [r0, #16]
 8006438:	690c      	ldr	r4, [r1, #16]
 800643a:	42a3      	cmp	r3, r4
 800643c:	4607      	mov	r7, r0
 800643e:	db7e      	blt.n	800653e <quorem+0x10c>
 8006440:	3c01      	subs	r4, #1
 8006442:	f101 0814 	add.w	r8, r1, #20
 8006446:	00a3      	lsls	r3, r4, #2
 8006448:	f100 0514 	add.w	r5, r0, #20
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006458:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800645c:	3301      	adds	r3, #1
 800645e:	429a      	cmp	r2, r3
 8006460:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006464:	fbb2 f6f3 	udiv	r6, r2, r3
 8006468:	d32e      	bcc.n	80064c8 <quorem+0x96>
 800646a:	f04f 0a00 	mov.w	sl, #0
 800646e:	46c4      	mov	ip, r8
 8006470:	46ae      	mov	lr, r5
 8006472:	46d3      	mov	fp, sl
 8006474:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006478:	b298      	uxth	r0, r3
 800647a:	fb06 a000 	mla	r0, r6, r0, sl
 800647e:	0c02      	lsrs	r2, r0, #16
 8006480:	0c1b      	lsrs	r3, r3, #16
 8006482:	fb06 2303 	mla	r3, r6, r3, r2
 8006486:	f8de 2000 	ldr.w	r2, [lr]
 800648a:	b280      	uxth	r0, r0
 800648c:	b292      	uxth	r2, r2
 800648e:	1a12      	subs	r2, r2, r0
 8006490:	445a      	add	r2, fp
 8006492:	f8de 0000 	ldr.w	r0, [lr]
 8006496:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800649a:	b29b      	uxth	r3, r3
 800649c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80064a0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80064a4:	b292      	uxth	r2, r2
 80064a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064aa:	45e1      	cmp	r9, ip
 80064ac:	f84e 2b04 	str.w	r2, [lr], #4
 80064b0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80064b4:	d2de      	bcs.n	8006474 <quorem+0x42>
 80064b6:	9b00      	ldr	r3, [sp, #0]
 80064b8:	58eb      	ldr	r3, [r5, r3]
 80064ba:	b92b      	cbnz	r3, 80064c8 <quorem+0x96>
 80064bc:	9b01      	ldr	r3, [sp, #4]
 80064be:	3b04      	subs	r3, #4
 80064c0:	429d      	cmp	r5, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	d32f      	bcc.n	8006526 <quorem+0xf4>
 80064c6:	613c      	str	r4, [r7, #16]
 80064c8:	4638      	mov	r0, r7
 80064ca:	f001 f97b 	bl	80077c4 <__mcmp>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	db25      	blt.n	800651e <quorem+0xec>
 80064d2:	4629      	mov	r1, r5
 80064d4:	2000      	movs	r0, #0
 80064d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80064da:	f8d1 c000 	ldr.w	ip, [r1]
 80064de:	fa1f fe82 	uxth.w	lr, r2
 80064e2:	fa1f f38c 	uxth.w	r3, ip
 80064e6:	eba3 030e 	sub.w	r3, r3, lr
 80064ea:	4403      	add	r3, r0
 80064ec:	0c12      	lsrs	r2, r2, #16
 80064ee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064fc:	45c1      	cmp	r9, r8
 80064fe:	f841 3b04 	str.w	r3, [r1], #4
 8006502:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006506:	d2e6      	bcs.n	80064d6 <quorem+0xa4>
 8006508:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800650c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006510:	b922      	cbnz	r2, 800651c <quorem+0xea>
 8006512:	3b04      	subs	r3, #4
 8006514:	429d      	cmp	r5, r3
 8006516:	461a      	mov	r2, r3
 8006518:	d30b      	bcc.n	8006532 <quorem+0x100>
 800651a:	613c      	str	r4, [r7, #16]
 800651c:	3601      	adds	r6, #1
 800651e:	4630      	mov	r0, r6
 8006520:	b003      	add	sp, #12
 8006522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	3b04      	subs	r3, #4
 800652a:	2a00      	cmp	r2, #0
 800652c:	d1cb      	bne.n	80064c6 <quorem+0x94>
 800652e:	3c01      	subs	r4, #1
 8006530:	e7c6      	b.n	80064c0 <quorem+0x8e>
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	3b04      	subs	r3, #4
 8006536:	2a00      	cmp	r2, #0
 8006538:	d1ef      	bne.n	800651a <quorem+0xe8>
 800653a:	3c01      	subs	r4, #1
 800653c:	e7ea      	b.n	8006514 <quorem+0xe2>
 800653e:	2000      	movs	r0, #0
 8006540:	e7ee      	b.n	8006520 <quorem+0xee>
 8006542:	0000      	movs	r0, r0
 8006544:	0000      	movs	r0, r0
	...

08006548 <_dtoa_r>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	69c7      	ldr	r7, [r0, #28]
 800654e:	b099      	sub	sp, #100	@ 0x64
 8006550:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006554:	ec55 4b10 	vmov	r4, r5, d0
 8006558:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800655a:	9109      	str	r1, [sp, #36]	@ 0x24
 800655c:	4683      	mov	fp, r0
 800655e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006560:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006562:	b97f      	cbnz	r7, 8006584 <_dtoa_r+0x3c>
 8006564:	2010      	movs	r0, #16
 8006566:	f000 fdfd 	bl	8007164 <malloc>
 800656a:	4602      	mov	r2, r0
 800656c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006570:	b920      	cbnz	r0, 800657c <_dtoa_r+0x34>
 8006572:	4ba7      	ldr	r3, [pc, #668]	@ (8006810 <_dtoa_r+0x2c8>)
 8006574:	21ef      	movs	r1, #239	@ 0xef
 8006576:	48a7      	ldr	r0, [pc, #668]	@ (8006814 <_dtoa_r+0x2cc>)
 8006578:	f001 fc5a 	bl	8007e30 <__assert_func>
 800657c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006580:	6007      	str	r7, [r0, #0]
 8006582:	60c7      	str	r7, [r0, #12]
 8006584:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006588:	6819      	ldr	r1, [r3, #0]
 800658a:	b159      	cbz	r1, 80065a4 <_dtoa_r+0x5c>
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	604a      	str	r2, [r1, #4]
 8006590:	2301      	movs	r3, #1
 8006592:	4093      	lsls	r3, r2
 8006594:	608b      	str	r3, [r1, #8]
 8006596:	4658      	mov	r0, fp
 8006598:	f000 feda 	bl	8007350 <_Bfree>
 800659c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	1e2b      	subs	r3, r5, #0
 80065a6:	bfb9      	ittee	lt
 80065a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80065ac:	9303      	strlt	r3, [sp, #12]
 80065ae:	2300      	movge	r3, #0
 80065b0:	6033      	strge	r3, [r6, #0]
 80065b2:	9f03      	ldr	r7, [sp, #12]
 80065b4:	4b98      	ldr	r3, [pc, #608]	@ (8006818 <_dtoa_r+0x2d0>)
 80065b6:	bfbc      	itt	lt
 80065b8:	2201      	movlt	r2, #1
 80065ba:	6032      	strlt	r2, [r6, #0]
 80065bc:	43bb      	bics	r3, r7
 80065be:	d112      	bne.n	80065e6 <_dtoa_r+0x9e>
 80065c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065cc:	4323      	orrs	r3, r4
 80065ce:	f000 854d 	beq.w	800706c <_dtoa_r+0xb24>
 80065d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800682c <_dtoa_r+0x2e4>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 854f 	beq.w	800707c <_dtoa_r+0xb34>
 80065de:	f10a 0303 	add.w	r3, sl, #3
 80065e2:	f000 bd49 	b.w	8007078 <_dtoa_r+0xb30>
 80065e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065ea:	2200      	movs	r2, #0
 80065ec:	ec51 0b17 	vmov	r0, r1, d7
 80065f0:	2300      	movs	r3, #0
 80065f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80065f6:	f7fa fa67 	bl	8000ac8 <__aeabi_dcmpeq>
 80065fa:	4680      	mov	r8, r0
 80065fc:	b158      	cbz	r0, 8006616 <_dtoa_r+0xce>
 80065fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006600:	2301      	movs	r3, #1
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006606:	b113      	cbz	r3, 800660e <_dtoa_r+0xc6>
 8006608:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800660a:	4b84      	ldr	r3, [pc, #528]	@ (800681c <_dtoa_r+0x2d4>)
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006830 <_dtoa_r+0x2e8>
 8006612:	f000 bd33 	b.w	800707c <_dtoa_r+0xb34>
 8006616:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800661a:	aa16      	add	r2, sp, #88	@ 0x58
 800661c:	a917      	add	r1, sp, #92	@ 0x5c
 800661e:	4658      	mov	r0, fp
 8006620:	f001 f980 	bl	8007924 <__d2b>
 8006624:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006628:	4681      	mov	r9, r0
 800662a:	2e00      	cmp	r6, #0
 800662c:	d077      	beq.n	800671e <_dtoa_r+0x1d6>
 800662e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006630:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800663c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006640:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006644:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006648:	4619      	mov	r1, r3
 800664a:	2200      	movs	r2, #0
 800664c:	4b74      	ldr	r3, [pc, #464]	@ (8006820 <_dtoa_r+0x2d8>)
 800664e:	f7f9 fe1b 	bl	8000288 <__aeabi_dsub>
 8006652:	a369      	add	r3, pc, #420	@ (adr r3, 80067f8 <_dtoa_r+0x2b0>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f7f9 ffce 	bl	80005f8 <__aeabi_dmul>
 800665c:	a368      	add	r3, pc, #416	@ (adr r3, 8006800 <_dtoa_r+0x2b8>)
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	f7f9 fe13 	bl	800028c <__adddf3>
 8006666:	4604      	mov	r4, r0
 8006668:	4630      	mov	r0, r6
 800666a:	460d      	mov	r5, r1
 800666c:	f7f9 ff5a 	bl	8000524 <__aeabi_i2d>
 8006670:	a365      	add	r3, pc, #404	@ (adr r3, 8006808 <_dtoa_r+0x2c0>)
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	f7f9 ffbf 	bl	80005f8 <__aeabi_dmul>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4620      	mov	r0, r4
 8006680:	4629      	mov	r1, r5
 8006682:	f7f9 fe03 	bl	800028c <__adddf3>
 8006686:	4604      	mov	r4, r0
 8006688:	460d      	mov	r5, r1
 800668a:	f7fa fa65 	bl	8000b58 <__aeabi_d2iz>
 800668e:	2200      	movs	r2, #0
 8006690:	4607      	mov	r7, r0
 8006692:	2300      	movs	r3, #0
 8006694:	4620      	mov	r0, r4
 8006696:	4629      	mov	r1, r5
 8006698:	f7fa fa20 	bl	8000adc <__aeabi_dcmplt>
 800669c:	b140      	cbz	r0, 80066b0 <_dtoa_r+0x168>
 800669e:	4638      	mov	r0, r7
 80066a0:	f7f9 ff40 	bl	8000524 <__aeabi_i2d>
 80066a4:	4622      	mov	r2, r4
 80066a6:	462b      	mov	r3, r5
 80066a8:	f7fa fa0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80066ac:	b900      	cbnz	r0, 80066b0 <_dtoa_r+0x168>
 80066ae:	3f01      	subs	r7, #1
 80066b0:	2f16      	cmp	r7, #22
 80066b2:	d851      	bhi.n	8006758 <_dtoa_r+0x210>
 80066b4:	4b5b      	ldr	r3, [pc, #364]	@ (8006824 <_dtoa_r+0x2dc>)
 80066b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066c2:	f7fa fa0b 	bl	8000adc <__aeabi_dcmplt>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d048      	beq.n	800675c <_dtoa_r+0x214>
 80066ca:	3f01      	subs	r7, #1
 80066cc:	2300      	movs	r3, #0
 80066ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80066d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80066d2:	1b9b      	subs	r3, r3, r6
 80066d4:	1e5a      	subs	r2, r3, #1
 80066d6:	bf44      	itt	mi
 80066d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80066dc:	2300      	movmi	r3, #0
 80066de:	9208      	str	r2, [sp, #32]
 80066e0:	bf54      	ite	pl
 80066e2:	f04f 0800 	movpl.w	r8, #0
 80066e6:	9308      	strmi	r3, [sp, #32]
 80066e8:	2f00      	cmp	r7, #0
 80066ea:	db39      	blt.n	8006760 <_dtoa_r+0x218>
 80066ec:	9b08      	ldr	r3, [sp, #32]
 80066ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80066f0:	443b      	add	r3, r7
 80066f2:	9308      	str	r3, [sp, #32]
 80066f4:	2300      	movs	r3, #0
 80066f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066fa:	2b09      	cmp	r3, #9
 80066fc:	d864      	bhi.n	80067c8 <_dtoa_r+0x280>
 80066fe:	2b05      	cmp	r3, #5
 8006700:	bfc4      	itt	gt
 8006702:	3b04      	subgt	r3, #4
 8006704:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006708:	f1a3 0302 	sub.w	r3, r3, #2
 800670c:	bfcc      	ite	gt
 800670e:	2400      	movgt	r4, #0
 8006710:	2401      	movle	r4, #1
 8006712:	2b03      	cmp	r3, #3
 8006714:	d863      	bhi.n	80067de <_dtoa_r+0x296>
 8006716:	e8df f003 	tbb	[pc, r3]
 800671a:	372a      	.short	0x372a
 800671c:	5535      	.short	0x5535
 800671e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006722:	441e      	add	r6, r3
 8006724:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006728:	2b20      	cmp	r3, #32
 800672a:	bfc1      	itttt	gt
 800672c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006730:	409f      	lslgt	r7, r3
 8006732:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006736:	fa24 f303 	lsrgt.w	r3, r4, r3
 800673a:	bfd6      	itet	le
 800673c:	f1c3 0320 	rsble	r3, r3, #32
 8006740:	ea47 0003 	orrgt.w	r0, r7, r3
 8006744:	fa04 f003 	lslle.w	r0, r4, r3
 8006748:	f7f9 fedc 	bl	8000504 <__aeabi_ui2d>
 800674c:	2201      	movs	r2, #1
 800674e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006752:	3e01      	subs	r6, #1
 8006754:	9214      	str	r2, [sp, #80]	@ 0x50
 8006756:	e777      	b.n	8006648 <_dtoa_r+0x100>
 8006758:	2301      	movs	r3, #1
 800675a:	e7b8      	b.n	80066ce <_dtoa_r+0x186>
 800675c:	9012      	str	r0, [sp, #72]	@ 0x48
 800675e:	e7b7      	b.n	80066d0 <_dtoa_r+0x188>
 8006760:	427b      	negs	r3, r7
 8006762:	930a      	str	r3, [sp, #40]	@ 0x28
 8006764:	2300      	movs	r3, #0
 8006766:	eba8 0807 	sub.w	r8, r8, r7
 800676a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800676c:	e7c4      	b.n	80066f8 <_dtoa_r+0x1b0>
 800676e:	2300      	movs	r3, #0
 8006770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006774:	2b00      	cmp	r3, #0
 8006776:	dc35      	bgt.n	80067e4 <_dtoa_r+0x29c>
 8006778:	2301      	movs	r3, #1
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	9307      	str	r3, [sp, #28]
 800677e:	461a      	mov	r2, r3
 8006780:	920e      	str	r2, [sp, #56]	@ 0x38
 8006782:	e00b      	b.n	800679c <_dtoa_r+0x254>
 8006784:	2301      	movs	r3, #1
 8006786:	e7f3      	b.n	8006770 <_dtoa_r+0x228>
 8006788:	2300      	movs	r3, #0
 800678a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800678c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800678e:	18fb      	adds	r3, r7, r3
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	3301      	adds	r3, #1
 8006794:	2b01      	cmp	r3, #1
 8006796:	9307      	str	r3, [sp, #28]
 8006798:	bfb8      	it	lt
 800679a:	2301      	movlt	r3, #1
 800679c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80067a0:	2100      	movs	r1, #0
 80067a2:	2204      	movs	r2, #4
 80067a4:	f102 0514 	add.w	r5, r2, #20
 80067a8:	429d      	cmp	r5, r3
 80067aa:	d91f      	bls.n	80067ec <_dtoa_r+0x2a4>
 80067ac:	6041      	str	r1, [r0, #4]
 80067ae:	4658      	mov	r0, fp
 80067b0:	f000 fd8e 	bl	80072d0 <_Balloc>
 80067b4:	4682      	mov	sl, r0
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d13c      	bne.n	8006834 <_dtoa_r+0x2ec>
 80067ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006828 <_dtoa_r+0x2e0>)
 80067bc:	4602      	mov	r2, r0
 80067be:	f240 11af 	movw	r1, #431	@ 0x1af
 80067c2:	e6d8      	b.n	8006576 <_dtoa_r+0x2e>
 80067c4:	2301      	movs	r3, #1
 80067c6:	e7e0      	b.n	800678a <_dtoa_r+0x242>
 80067c8:	2401      	movs	r4, #1
 80067ca:	2300      	movs	r3, #0
 80067cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80067d0:	f04f 33ff 	mov.w	r3, #4294967295
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	9307      	str	r3, [sp, #28]
 80067d8:	2200      	movs	r2, #0
 80067da:	2312      	movs	r3, #18
 80067dc:	e7d0      	b.n	8006780 <_dtoa_r+0x238>
 80067de:	2301      	movs	r3, #1
 80067e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067e2:	e7f5      	b.n	80067d0 <_dtoa_r+0x288>
 80067e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	9307      	str	r3, [sp, #28]
 80067ea:	e7d7      	b.n	800679c <_dtoa_r+0x254>
 80067ec:	3101      	adds	r1, #1
 80067ee:	0052      	lsls	r2, r2, #1
 80067f0:	e7d8      	b.n	80067a4 <_dtoa_r+0x25c>
 80067f2:	bf00      	nop
 80067f4:	f3af 8000 	nop.w
 80067f8:	636f4361 	.word	0x636f4361
 80067fc:	3fd287a7 	.word	0x3fd287a7
 8006800:	8b60c8b3 	.word	0x8b60c8b3
 8006804:	3fc68a28 	.word	0x3fc68a28
 8006808:	509f79fb 	.word	0x509f79fb
 800680c:	3fd34413 	.word	0x3fd34413
 8006810:	08008bc1 	.word	0x08008bc1
 8006814:	08008bd8 	.word	0x08008bd8
 8006818:	7ff00000 	.word	0x7ff00000
 800681c:	08008b91 	.word	0x08008b91
 8006820:	3ff80000 	.word	0x3ff80000
 8006824:	08008cd0 	.word	0x08008cd0
 8006828:	08008c30 	.word	0x08008c30
 800682c:	08008bbd 	.word	0x08008bbd
 8006830:	08008b90 	.word	0x08008b90
 8006834:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006838:	6018      	str	r0, [r3, #0]
 800683a:	9b07      	ldr	r3, [sp, #28]
 800683c:	2b0e      	cmp	r3, #14
 800683e:	f200 80a4 	bhi.w	800698a <_dtoa_r+0x442>
 8006842:	2c00      	cmp	r4, #0
 8006844:	f000 80a1 	beq.w	800698a <_dtoa_r+0x442>
 8006848:	2f00      	cmp	r7, #0
 800684a:	dd33      	ble.n	80068b4 <_dtoa_r+0x36c>
 800684c:	4bad      	ldr	r3, [pc, #692]	@ (8006b04 <_dtoa_r+0x5bc>)
 800684e:	f007 020f 	and.w	r2, r7, #15
 8006852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006856:	ed93 7b00 	vldr	d7, [r3]
 800685a:	05f8      	lsls	r0, r7, #23
 800685c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006860:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006864:	d516      	bpl.n	8006894 <_dtoa_r+0x34c>
 8006866:	4ba8      	ldr	r3, [pc, #672]	@ (8006b08 <_dtoa_r+0x5c0>)
 8006868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800686c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006870:	f7f9 ffec 	bl	800084c <__aeabi_ddiv>
 8006874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006878:	f004 040f 	and.w	r4, r4, #15
 800687c:	2603      	movs	r6, #3
 800687e:	4da2      	ldr	r5, [pc, #648]	@ (8006b08 <_dtoa_r+0x5c0>)
 8006880:	b954      	cbnz	r4, 8006898 <_dtoa_r+0x350>
 8006882:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800688a:	f7f9 ffdf 	bl	800084c <__aeabi_ddiv>
 800688e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006892:	e028      	b.n	80068e6 <_dtoa_r+0x39e>
 8006894:	2602      	movs	r6, #2
 8006896:	e7f2      	b.n	800687e <_dtoa_r+0x336>
 8006898:	07e1      	lsls	r1, r4, #31
 800689a:	d508      	bpl.n	80068ae <_dtoa_r+0x366>
 800689c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068a4:	f7f9 fea8 	bl	80005f8 <__aeabi_dmul>
 80068a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068ac:	3601      	adds	r6, #1
 80068ae:	1064      	asrs	r4, r4, #1
 80068b0:	3508      	adds	r5, #8
 80068b2:	e7e5      	b.n	8006880 <_dtoa_r+0x338>
 80068b4:	f000 80d2 	beq.w	8006a5c <_dtoa_r+0x514>
 80068b8:	427c      	negs	r4, r7
 80068ba:	4b92      	ldr	r3, [pc, #584]	@ (8006b04 <_dtoa_r+0x5bc>)
 80068bc:	4d92      	ldr	r5, [pc, #584]	@ (8006b08 <_dtoa_r+0x5c0>)
 80068be:	f004 020f 	and.w	r2, r4, #15
 80068c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068ce:	f7f9 fe93 	bl	80005f8 <__aeabi_dmul>
 80068d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068d6:	1124      	asrs	r4, r4, #4
 80068d8:	2300      	movs	r3, #0
 80068da:	2602      	movs	r6, #2
 80068dc:	2c00      	cmp	r4, #0
 80068de:	f040 80b2 	bne.w	8006a46 <_dtoa_r+0x4fe>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1d3      	bne.n	800688e <_dtoa_r+0x346>
 80068e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80068e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 80b7 	beq.w	8006a60 <_dtoa_r+0x518>
 80068f2:	4b86      	ldr	r3, [pc, #536]	@ (8006b0c <_dtoa_r+0x5c4>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	4620      	mov	r0, r4
 80068f8:	4629      	mov	r1, r5
 80068fa:	f7fa f8ef 	bl	8000adc <__aeabi_dcmplt>
 80068fe:	2800      	cmp	r0, #0
 8006900:	f000 80ae 	beq.w	8006a60 <_dtoa_r+0x518>
 8006904:	9b07      	ldr	r3, [sp, #28]
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 80aa 	beq.w	8006a60 <_dtoa_r+0x518>
 800690c:	9b00      	ldr	r3, [sp, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	dd37      	ble.n	8006982 <_dtoa_r+0x43a>
 8006912:	1e7b      	subs	r3, r7, #1
 8006914:	9304      	str	r3, [sp, #16]
 8006916:	4620      	mov	r0, r4
 8006918:	4b7d      	ldr	r3, [pc, #500]	@ (8006b10 <_dtoa_r+0x5c8>)
 800691a:	2200      	movs	r2, #0
 800691c:	4629      	mov	r1, r5
 800691e:	f7f9 fe6b 	bl	80005f8 <__aeabi_dmul>
 8006922:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006926:	9c00      	ldr	r4, [sp, #0]
 8006928:	3601      	adds	r6, #1
 800692a:	4630      	mov	r0, r6
 800692c:	f7f9 fdfa 	bl	8000524 <__aeabi_i2d>
 8006930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006934:	f7f9 fe60 	bl	80005f8 <__aeabi_dmul>
 8006938:	4b76      	ldr	r3, [pc, #472]	@ (8006b14 <_dtoa_r+0x5cc>)
 800693a:	2200      	movs	r2, #0
 800693c:	f7f9 fca6 	bl	800028c <__adddf3>
 8006940:	4605      	mov	r5, r0
 8006942:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006946:	2c00      	cmp	r4, #0
 8006948:	f040 808d 	bne.w	8006a66 <_dtoa_r+0x51e>
 800694c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006950:	4b71      	ldr	r3, [pc, #452]	@ (8006b18 <_dtoa_r+0x5d0>)
 8006952:	2200      	movs	r2, #0
 8006954:	f7f9 fc98 	bl	8000288 <__aeabi_dsub>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006960:	462a      	mov	r2, r5
 8006962:	4633      	mov	r3, r6
 8006964:	f7fa f8d8 	bl	8000b18 <__aeabi_dcmpgt>
 8006968:	2800      	cmp	r0, #0
 800696a:	f040 828b 	bne.w	8006e84 <_dtoa_r+0x93c>
 800696e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006972:	462a      	mov	r2, r5
 8006974:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006978:	f7fa f8b0 	bl	8000adc <__aeabi_dcmplt>
 800697c:	2800      	cmp	r0, #0
 800697e:	f040 8128 	bne.w	8006bd2 <_dtoa_r+0x68a>
 8006982:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006986:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800698a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800698c:	2b00      	cmp	r3, #0
 800698e:	f2c0 815a 	blt.w	8006c46 <_dtoa_r+0x6fe>
 8006992:	2f0e      	cmp	r7, #14
 8006994:	f300 8157 	bgt.w	8006c46 <_dtoa_r+0x6fe>
 8006998:	4b5a      	ldr	r3, [pc, #360]	@ (8006b04 <_dtoa_r+0x5bc>)
 800699a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800699e:	ed93 7b00 	vldr	d7, [r3]
 80069a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	ed8d 7b00 	vstr	d7, [sp]
 80069aa:	da03      	bge.n	80069b4 <_dtoa_r+0x46c>
 80069ac:	9b07      	ldr	r3, [sp, #28]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f340 8101 	ble.w	8006bb6 <_dtoa_r+0x66e>
 80069b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80069b8:	4656      	mov	r6, sl
 80069ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069be:	4620      	mov	r0, r4
 80069c0:	4629      	mov	r1, r5
 80069c2:	f7f9 ff43 	bl	800084c <__aeabi_ddiv>
 80069c6:	f7fa f8c7 	bl	8000b58 <__aeabi_d2iz>
 80069ca:	4680      	mov	r8, r0
 80069cc:	f7f9 fdaa 	bl	8000524 <__aeabi_i2d>
 80069d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069d4:	f7f9 fe10 	bl	80005f8 <__aeabi_dmul>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4620      	mov	r0, r4
 80069de:	4629      	mov	r1, r5
 80069e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80069e4:	f7f9 fc50 	bl	8000288 <__aeabi_dsub>
 80069e8:	f806 4b01 	strb.w	r4, [r6], #1
 80069ec:	9d07      	ldr	r5, [sp, #28]
 80069ee:	eba6 040a 	sub.w	r4, r6, sl
 80069f2:	42a5      	cmp	r5, r4
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	f040 8117 	bne.w	8006c2a <_dtoa_r+0x6e2>
 80069fc:	f7f9 fc46 	bl	800028c <__adddf3>
 8006a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a04:	4604      	mov	r4, r0
 8006a06:	460d      	mov	r5, r1
 8006a08:	f7fa f886 	bl	8000b18 <__aeabi_dcmpgt>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	f040 80f9 	bne.w	8006c04 <_dtoa_r+0x6bc>
 8006a12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a16:	4620      	mov	r0, r4
 8006a18:	4629      	mov	r1, r5
 8006a1a:	f7fa f855 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a1e:	b118      	cbz	r0, 8006a28 <_dtoa_r+0x4e0>
 8006a20:	f018 0f01 	tst.w	r8, #1
 8006a24:	f040 80ee 	bne.w	8006c04 <_dtoa_r+0x6bc>
 8006a28:	4649      	mov	r1, r9
 8006a2a:	4658      	mov	r0, fp
 8006a2c:	f000 fc90 	bl	8007350 <_Bfree>
 8006a30:	2300      	movs	r3, #0
 8006a32:	7033      	strb	r3, [r6, #0]
 8006a34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a36:	3701      	adds	r7, #1
 8006a38:	601f      	str	r7, [r3, #0]
 8006a3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 831d 	beq.w	800707c <_dtoa_r+0xb34>
 8006a42:	601e      	str	r6, [r3, #0]
 8006a44:	e31a      	b.n	800707c <_dtoa_r+0xb34>
 8006a46:	07e2      	lsls	r2, r4, #31
 8006a48:	d505      	bpl.n	8006a56 <_dtoa_r+0x50e>
 8006a4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a4e:	f7f9 fdd3 	bl	80005f8 <__aeabi_dmul>
 8006a52:	3601      	adds	r6, #1
 8006a54:	2301      	movs	r3, #1
 8006a56:	1064      	asrs	r4, r4, #1
 8006a58:	3508      	adds	r5, #8
 8006a5a:	e73f      	b.n	80068dc <_dtoa_r+0x394>
 8006a5c:	2602      	movs	r6, #2
 8006a5e:	e742      	b.n	80068e6 <_dtoa_r+0x39e>
 8006a60:	9c07      	ldr	r4, [sp, #28]
 8006a62:	9704      	str	r7, [sp, #16]
 8006a64:	e761      	b.n	800692a <_dtoa_r+0x3e2>
 8006a66:	4b27      	ldr	r3, [pc, #156]	@ (8006b04 <_dtoa_r+0x5bc>)
 8006a68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a72:	4454      	add	r4, sl
 8006a74:	2900      	cmp	r1, #0
 8006a76:	d053      	beq.n	8006b20 <_dtoa_r+0x5d8>
 8006a78:	4928      	ldr	r1, [pc, #160]	@ (8006b1c <_dtoa_r+0x5d4>)
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	f7f9 fee6 	bl	800084c <__aeabi_ddiv>
 8006a80:	4633      	mov	r3, r6
 8006a82:	462a      	mov	r2, r5
 8006a84:	f7f9 fc00 	bl	8000288 <__aeabi_dsub>
 8006a88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a8c:	4656      	mov	r6, sl
 8006a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a92:	f7fa f861 	bl	8000b58 <__aeabi_d2iz>
 8006a96:	4605      	mov	r5, r0
 8006a98:	f7f9 fd44 	bl	8000524 <__aeabi_i2d>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aa4:	f7f9 fbf0 	bl	8000288 <__aeabi_dsub>
 8006aa8:	3530      	adds	r5, #48	@ 0x30
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ab2:	f806 5b01 	strb.w	r5, [r6], #1
 8006ab6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006aba:	f7fa f80f 	bl	8000adc <__aeabi_dcmplt>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d171      	bne.n	8006ba6 <_dtoa_r+0x65e>
 8006ac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ac6:	4911      	ldr	r1, [pc, #68]	@ (8006b0c <_dtoa_r+0x5c4>)
 8006ac8:	2000      	movs	r0, #0
 8006aca:	f7f9 fbdd 	bl	8000288 <__aeabi_dsub>
 8006ace:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ad2:	f7fa f803 	bl	8000adc <__aeabi_dcmplt>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	f040 8095 	bne.w	8006c06 <_dtoa_r+0x6be>
 8006adc:	42a6      	cmp	r6, r4
 8006ade:	f43f af50 	beq.w	8006982 <_dtoa_r+0x43a>
 8006ae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b10 <_dtoa_r+0x5c8>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f7f9 fd85 	bl	80005f8 <__aeabi_dmul>
 8006aee:	4b08      	ldr	r3, [pc, #32]	@ (8006b10 <_dtoa_r+0x5c8>)
 8006af0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006af4:	2200      	movs	r2, #0
 8006af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006afa:	f7f9 fd7d 	bl	80005f8 <__aeabi_dmul>
 8006afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b02:	e7c4      	b.n	8006a8e <_dtoa_r+0x546>
 8006b04:	08008cd0 	.word	0x08008cd0
 8006b08:	08008ca8 	.word	0x08008ca8
 8006b0c:	3ff00000 	.word	0x3ff00000
 8006b10:	40240000 	.word	0x40240000
 8006b14:	401c0000 	.word	0x401c0000
 8006b18:	40140000 	.word	0x40140000
 8006b1c:	3fe00000 	.word	0x3fe00000
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	f7f9 fd68 	bl	80005f8 <__aeabi_dmul>
 8006b28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b2c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006b2e:	4656      	mov	r6, sl
 8006b30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b34:	f7fa f810 	bl	8000b58 <__aeabi_d2iz>
 8006b38:	4605      	mov	r5, r0
 8006b3a:	f7f9 fcf3 	bl	8000524 <__aeabi_i2d>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b46:	f7f9 fb9f 	bl	8000288 <__aeabi_dsub>
 8006b4a:	3530      	adds	r5, #48	@ 0x30
 8006b4c:	f806 5b01 	strb.w	r5, [r6], #1
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	42a6      	cmp	r6, r4
 8006b56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	d124      	bne.n	8006baa <_dtoa_r+0x662>
 8006b60:	4bac      	ldr	r3, [pc, #688]	@ (8006e14 <_dtoa_r+0x8cc>)
 8006b62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b66:	f7f9 fb91 	bl	800028c <__adddf3>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b72:	f7f9 ffd1 	bl	8000b18 <__aeabi_dcmpgt>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d145      	bne.n	8006c06 <_dtoa_r+0x6be>
 8006b7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b7e:	49a5      	ldr	r1, [pc, #660]	@ (8006e14 <_dtoa_r+0x8cc>)
 8006b80:	2000      	movs	r0, #0
 8006b82:	f7f9 fb81 	bl	8000288 <__aeabi_dsub>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b8e:	f7f9 ffa5 	bl	8000adc <__aeabi_dcmplt>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	f43f aef5 	beq.w	8006982 <_dtoa_r+0x43a>
 8006b98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006b9a:	1e73      	subs	r3, r6, #1
 8006b9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ba2:	2b30      	cmp	r3, #48	@ 0x30
 8006ba4:	d0f8      	beq.n	8006b98 <_dtoa_r+0x650>
 8006ba6:	9f04      	ldr	r7, [sp, #16]
 8006ba8:	e73e      	b.n	8006a28 <_dtoa_r+0x4e0>
 8006baa:	4b9b      	ldr	r3, [pc, #620]	@ (8006e18 <_dtoa_r+0x8d0>)
 8006bac:	f7f9 fd24 	bl	80005f8 <__aeabi_dmul>
 8006bb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bb4:	e7bc      	b.n	8006b30 <_dtoa_r+0x5e8>
 8006bb6:	d10c      	bne.n	8006bd2 <_dtoa_r+0x68a>
 8006bb8:	4b98      	ldr	r3, [pc, #608]	@ (8006e1c <_dtoa_r+0x8d4>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bc0:	f7f9 fd1a 	bl	80005f8 <__aeabi_dmul>
 8006bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bc8:	f7f9 ff9c 	bl	8000b04 <__aeabi_dcmpge>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	f000 8157 	beq.w	8006e80 <_dtoa_r+0x938>
 8006bd2:	2400      	movs	r4, #0
 8006bd4:	4625      	mov	r5, r4
 8006bd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	9304      	str	r3, [sp, #16]
 8006bdc:	4656      	mov	r6, sl
 8006bde:	2700      	movs	r7, #0
 8006be0:	4621      	mov	r1, r4
 8006be2:	4658      	mov	r0, fp
 8006be4:	f000 fbb4 	bl	8007350 <_Bfree>
 8006be8:	2d00      	cmp	r5, #0
 8006bea:	d0dc      	beq.n	8006ba6 <_dtoa_r+0x65e>
 8006bec:	b12f      	cbz	r7, 8006bfa <_dtoa_r+0x6b2>
 8006bee:	42af      	cmp	r7, r5
 8006bf0:	d003      	beq.n	8006bfa <_dtoa_r+0x6b2>
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	4658      	mov	r0, fp
 8006bf6:	f000 fbab 	bl	8007350 <_Bfree>
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	4658      	mov	r0, fp
 8006bfe:	f000 fba7 	bl	8007350 <_Bfree>
 8006c02:	e7d0      	b.n	8006ba6 <_dtoa_r+0x65e>
 8006c04:	9704      	str	r7, [sp, #16]
 8006c06:	4633      	mov	r3, r6
 8006c08:	461e      	mov	r6, r3
 8006c0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c0e:	2a39      	cmp	r2, #57	@ 0x39
 8006c10:	d107      	bne.n	8006c22 <_dtoa_r+0x6da>
 8006c12:	459a      	cmp	sl, r3
 8006c14:	d1f8      	bne.n	8006c08 <_dtoa_r+0x6c0>
 8006c16:	9a04      	ldr	r2, [sp, #16]
 8006c18:	3201      	adds	r2, #1
 8006c1a:	9204      	str	r2, [sp, #16]
 8006c1c:	2230      	movs	r2, #48	@ 0x30
 8006c1e:	f88a 2000 	strb.w	r2, [sl]
 8006c22:	781a      	ldrb	r2, [r3, #0]
 8006c24:	3201      	adds	r2, #1
 8006c26:	701a      	strb	r2, [r3, #0]
 8006c28:	e7bd      	b.n	8006ba6 <_dtoa_r+0x65e>
 8006c2a:	4b7b      	ldr	r3, [pc, #492]	@ (8006e18 <_dtoa_r+0x8d0>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f7f9 fce3 	bl	80005f8 <__aeabi_dmul>
 8006c32:	2200      	movs	r2, #0
 8006c34:	2300      	movs	r3, #0
 8006c36:	4604      	mov	r4, r0
 8006c38:	460d      	mov	r5, r1
 8006c3a:	f7f9 ff45 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	f43f aebb 	beq.w	80069ba <_dtoa_r+0x472>
 8006c44:	e6f0      	b.n	8006a28 <_dtoa_r+0x4e0>
 8006c46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c48:	2a00      	cmp	r2, #0
 8006c4a:	f000 80db 	beq.w	8006e04 <_dtoa_r+0x8bc>
 8006c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c50:	2a01      	cmp	r2, #1
 8006c52:	f300 80bf 	bgt.w	8006dd4 <_dtoa_r+0x88c>
 8006c56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006c58:	2a00      	cmp	r2, #0
 8006c5a:	f000 80b7 	beq.w	8006dcc <_dtoa_r+0x884>
 8006c5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c64:	4646      	mov	r6, r8
 8006c66:	9a08      	ldr	r2, [sp, #32]
 8006c68:	2101      	movs	r1, #1
 8006c6a:	441a      	add	r2, r3
 8006c6c:	4658      	mov	r0, fp
 8006c6e:	4498      	add	r8, r3
 8006c70:	9208      	str	r2, [sp, #32]
 8006c72:	f000 fc21 	bl	80074b8 <__i2b>
 8006c76:	4605      	mov	r5, r0
 8006c78:	b15e      	cbz	r6, 8006c92 <_dtoa_r+0x74a>
 8006c7a:	9b08      	ldr	r3, [sp, #32]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dd08      	ble.n	8006c92 <_dtoa_r+0x74a>
 8006c80:	42b3      	cmp	r3, r6
 8006c82:	9a08      	ldr	r2, [sp, #32]
 8006c84:	bfa8      	it	ge
 8006c86:	4633      	movge	r3, r6
 8006c88:	eba8 0803 	sub.w	r8, r8, r3
 8006c8c:	1af6      	subs	r6, r6, r3
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	9308      	str	r3, [sp, #32]
 8006c92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c94:	b1f3      	cbz	r3, 8006cd4 <_dtoa_r+0x78c>
 8006c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80b7 	beq.w	8006e0c <_dtoa_r+0x8c4>
 8006c9e:	b18c      	cbz	r4, 8006cc4 <_dtoa_r+0x77c>
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	4622      	mov	r2, r4
 8006ca4:	4658      	mov	r0, fp
 8006ca6:	f000 fcc7 	bl	8007638 <__pow5mult>
 8006caa:	464a      	mov	r2, r9
 8006cac:	4601      	mov	r1, r0
 8006cae:	4605      	mov	r5, r0
 8006cb0:	4658      	mov	r0, fp
 8006cb2:	f000 fc17 	bl	80074e4 <__multiply>
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	9004      	str	r0, [sp, #16]
 8006cba:	4658      	mov	r0, fp
 8006cbc:	f000 fb48 	bl	8007350 <_Bfree>
 8006cc0:	9b04      	ldr	r3, [sp, #16]
 8006cc2:	4699      	mov	r9, r3
 8006cc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cc6:	1b1a      	subs	r2, r3, r4
 8006cc8:	d004      	beq.n	8006cd4 <_dtoa_r+0x78c>
 8006cca:	4649      	mov	r1, r9
 8006ccc:	4658      	mov	r0, fp
 8006cce:	f000 fcb3 	bl	8007638 <__pow5mult>
 8006cd2:	4681      	mov	r9, r0
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	4658      	mov	r0, fp
 8006cd8:	f000 fbee 	bl	80074b8 <__i2b>
 8006cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cde:	4604      	mov	r4, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 81cf 	beq.w	8007084 <_dtoa_r+0xb3c>
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	4601      	mov	r1, r0
 8006cea:	4658      	mov	r0, fp
 8006cec:	f000 fca4 	bl	8007638 <__pow5mult>
 8006cf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	f300 8095 	bgt.w	8006e24 <_dtoa_r+0x8dc>
 8006cfa:	9b02      	ldr	r3, [sp, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f040 8087 	bne.w	8006e10 <_dtoa_r+0x8c8>
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f040 8089 	bne.w	8006e20 <_dtoa_r+0x8d8>
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d14:	0d1b      	lsrs	r3, r3, #20
 8006d16:	051b      	lsls	r3, r3, #20
 8006d18:	b12b      	cbz	r3, 8006d26 <_dtoa_r+0x7de>
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	9308      	str	r3, [sp, #32]
 8006d20:	f108 0801 	add.w	r8, r8, #1
 8006d24:	2301      	movs	r3, #1
 8006d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 81b0 	beq.w	8007090 <_dtoa_r+0xb48>
 8006d30:	6923      	ldr	r3, [r4, #16]
 8006d32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d36:	6918      	ldr	r0, [r3, #16]
 8006d38:	f000 fb72 	bl	8007420 <__hi0bits>
 8006d3c:	f1c0 0020 	rsb	r0, r0, #32
 8006d40:	9b08      	ldr	r3, [sp, #32]
 8006d42:	4418      	add	r0, r3
 8006d44:	f010 001f 	ands.w	r0, r0, #31
 8006d48:	d077      	beq.n	8006e3a <_dtoa_r+0x8f2>
 8006d4a:	f1c0 0320 	rsb	r3, r0, #32
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	dd6b      	ble.n	8006e2a <_dtoa_r+0x8e2>
 8006d52:	9b08      	ldr	r3, [sp, #32]
 8006d54:	f1c0 001c 	rsb	r0, r0, #28
 8006d58:	4403      	add	r3, r0
 8006d5a:	4480      	add	r8, r0
 8006d5c:	4406      	add	r6, r0
 8006d5e:	9308      	str	r3, [sp, #32]
 8006d60:	f1b8 0f00 	cmp.w	r8, #0
 8006d64:	dd05      	ble.n	8006d72 <_dtoa_r+0x82a>
 8006d66:	4649      	mov	r1, r9
 8006d68:	4642      	mov	r2, r8
 8006d6a:	4658      	mov	r0, fp
 8006d6c:	f000 fcbe 	bl	80076ec <__lshift>
 8006d70:	4681      	mov	r9, r0
 8006d72:	9b08      	ldr	r3, [sp, #32]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	dd05      	ble.n	8006d84 <_dtoa_r+0x83c>
 8006d78:	4621      	mov	r1, r4
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	4658      	mov	r0, fp
 8006d7e:	f000 fcb5 	bl	80076ec <__lshift>
 8006d82:	4604      	mov	r4, r0
 8006d84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d059      	beq.n	8006e3e <_dtoa_r+0x8f6>
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	4648      	mov	r0, r9
 8006d8e:	f000 fd19 	bl	80077c4 <__mcmp>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	da53      	bge.n	8006e3e <_dtoa_r+0x8f6>
 8006d96:	1e7b      	subs	r3, r7, #1
 8006d98:	9304      	str	r3, [sp, #16]
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	220a      	movs	r2, #10
 8006da0:	4658      	mov	r0, fp
 8006da2:	f000 faf7 	bl	8007394 <__multadd>
 8006da6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006da8:	4681      	mov	r9, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 8172 	beq.w	8007094 <_dtoa_r+0xb4c>
 8006db0:	2300      	movs	r3, #0
 8006db2:	4629      	mov	r1, r5
 8006db4:	220a      	movs	r2, #10
 8006db6:	4658      	mov	r0, fp
 8006db8:	f000 faec 	bl	8007394 <__multadd>
 8006dbc:	9b00      	ldr	r3, [sp, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	dc67      	bgt.n	8006e94 <_dtoa_r+0x94c>
 8006dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	dc41      	bgt.n	8006e4e <_dtoa_r+0x906>
 8006dca:	e063      	b.n	8006e94 <_dtoa_r+0x94c>
 8006dcc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006dce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006dd2:	e746      	b.n	8006c62 <_dtoa_r+0x71a>
 8006dd4:	9b07      	ldr	r3, [sp, #28]
 8006dd6:	1e5c      	subs	r4, r3, #1
 8006dd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dda:	42a3      	cmp	r3, r4
 8006ddc:	bfbf      	itttt	lt
 8006dde:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006de0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006de2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006de4:	1ae3      	sublt	r3, r4, r3
 8006de6:	bfb4      	ite	lt
 8006de8:	18d2      	addlt	r2, r2, r3
 8006dea:	1b1c      	subge	r4, r3, r4
 8006dec:	9b07      	ldr	r3, [sp, #28]
 8006dee:	bfbc      	itt	lt
 8006df0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006df2:	2400      	movlt	r4, #0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	bfb5      	itete	lt
 8006df8:	eba8 0603 	sublt.w	r6, r8, r3
 8006dfc:	9b07      	ldrge	r3, [sp, #28]
 8006dfe:	2300      	movlt	r3, #0
 8006e00:	4646      	movge	r6, r8
 8006e02:	e730      	b.n	8006c66 <_dtoa_r+0x71e>
 8006e04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006e08:	4646      	mov	r6, r8
 8006e0a:	e735      	b.n	8006c78 <_dtoa_r+0x730>
 8006e0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e0e:	e75c      	b.n	8006cca <_dtoa_r+0x782>
 8006e10:	2300      	movs	r3, #0
 8006e12:	e788      	b.n	8006d26 <_dtoa_r+0x7de>
 8006e14:	3fe00000 	.word	0x3fe00000
 8006e18:	40240000 	.word	0x40240000
 8006e1c:	40140000 	.word	0x40140000
 8006e20:	9b02      	ldr	r3, [sp, #8]
 8006e22:	e780      	b.n	8006d26 <_dtoa_r+0x7de>
 8006e24:	2300      	movs	r3, #0
 8006e26:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e28:	e782      	b.n	8006d30 <_dtoa_r+0x7e8>
 8006e2a:	d099      	beq.n	8006d60 <_dtoa_r+0x818>
 8006e2c:	9a08      	ldr	r2, [sp, #32]
 8006e2e:	331c      	adds	r3, #28
 8006e30:	441a      	add	r2, r3
 8006e32:	4498      	add	r8, r3
 8006e34:	441e      	add	r6, r3
 8006e36:	9208      	str	r2, [sp, #32]
 8006e38:	e792      	b.n	8006d60 <_dtoa_r+0x818>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	e7f6      	b.n	8006e2c <_dtoa_r+0x8e4>
 8006e3e:	9b07      	ldr	r3, [sp, #28]
 8006e40:	9704      	str	r7, [sp, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	dc20      	bgt.n	8006e88 <_dtoa_r+0x940>
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	dd1e      	ble.n	8006e8c <_dtoa_r+0x944>
 8006e4e:	9b00      	ldr	r3, [sp, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f47f aec0 	bne.w	8006bd6 <_dtoa_r+0x68e>
 8006e56:	4621      	mov	r1, r4
 8006e58:	2205      	movs	r2, #5
 8006e5a:	4658      	mov	r0, fp
 8006e5c:	f000 fa9a 	bl	8007394 <__multadd>
 8006e60:	4601      	mov	r1, r0
 8006e62:	4604      	mov	r4, r0
 8006e64:	4648      	mov	r0, r9
 8006e66:	f000 fcad 	bl	80077c4 <__mcmp>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	f77f aeb3 	ble.w	8006bd6 <_dtoa_r+0x68e>
 8006e70:	4656      	mov	r6, sl
 8006e72:	2331      	movs	r3, #49	@ 0x31
 8006e74:	f806 3b01 	strb.w	r3, [r6], #1
 8006e78:	9b04      	ldr	r3, [sp, #16]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	e6ae      	b.n	8006bde <_dtoa_r+0x696>
 8006e80:	9c07      	ldr	r4, [sp, #28]
 8006e82:	9704      	str	r7, [sp, #16]
 8006e84:	4625      	mov	r5, r4
 8006e86:	e7f3      	b.n	8006e70 <_dtoa_r+0x928>
 8006e88:	9b07      	ldr	r3, [sp, #28]
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 8104 	beq.w	800709c <_dtoa_r+0xb54>
 8006e94:	2e00      	cmp	r6, #0
 8006e96:	dd05      	ble.n	8006ea4 <_dtoa_r+0x95c>
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4632      	mov	r2, r6
 8006e9c:	4658      	mov	r0, fp
 8006e9e:	f000 fc25 	bl	80076ec <__lshift>
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d05a      	beq.n	8006f60 <_dtoa_r+0xa18>
 8006eaa:	6869      	ldr	r1, [r5, #4]
 8006eac:	4658      	mov	r0, fp
 8006eae:	f000 fa0f 	bl	80072d0 <_Balloc>
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	b928      	cbnz	r0, 8006ec2 <_dtoa_r+0x97a>
 8006eb6:	4b84      	ldr	r3, [pc, #528]	@ (80070c8 <_dtoa_r+0xb80>)
 8006eb8:	4602      	mov	r2, r0
 8006eba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006ebe:	f7ff bb5a 	b.w	8006576 <_dtoa_r+0x2e>
 8006ec2:	692a      	ldr	r2, [r5, #16]
 8006ec4:	3202      	adds	r2, #2
 8006ec6:	0092      	lsls	r2, r2, #2
 8006ec8:	f105 010c 	add.w	r1, r5, #12
 8006ecc:	300c      	adds	r0, #12
 8006ece:	f7ff faa2 	bl	8006416 <memcpy>
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4658      	mov	r0, fp
 8006ed8:	f000 fc08 	bl	80076ec <__lshift>
 8006edc:	f10a 0301 	add.w	r3, sl, #1
 8006ee0:	9307      	str	r3, [sp, #28]
 8006ee2:	9b00      	ldr	r3, [sp, #0]
 8006ee4:	4453      	add	r3, sl
 8006ee6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ee8:	9b02      	ldr	r3, [sp, #8]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	462f      	mov	r7, r5
 8006ef0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ef2:	4605      	mov	r5, r0
 8006ef4:	9b07      	ldr	r3, [sp, #28]
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	4648      	mov	r0, r9
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	f7ff fa98 	bl	8006432 <quorem>
 8006f02:	4639      	mov	r1, r7
 8006f04:	9002      	str	r0, [sp, #8]
 8006f06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f0a:	4648      	mov	r0, r9
 8006f0c:	f000 fc5a 	bl	80077c4 <__mcmp>
 8006f10:	462a      	mov	r2, r5
 8006f12:	9008      	str	r0, [sp, #32]
 8006f14:	4621      	mov	r1, r4
 8006f16:	4658      	mov	r0, fp
 8006f18:	f000 fc70 	bl	80077fc <__mdiff>
 8006f1c:	68c2      	ldr	r2, [r0, #12]
 8006f1e:	4606      	mov	r6, r0
 8006f20:	bb02      	cbnz	r2, 8006f64 <_dtoa_r+0xa1c>
 8006f22:	4601      	mov	r1, r0
 8006f24:	4648      	mov	r0, r9
 8006f26:	f000 fc4d 	bl	80077c4 <__mcmp>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4658      	mov	r0, fp
 8006f30:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f32:	f000 fa0d 	bl	8007350 <_Bfree>
 8006f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f3a:	9e07      	ldr	r6, [sp, #28]
 8006f3c:	ea43 0102 	orr.w	r1, r3, r2
 8006f40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f42:	4319      	orrs	r1, r3
 8006f44:	d110      	bne.n	8006f68 <_dtoa_r+0xa20>
 8006f46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f4a:	d029      	beq.n	8006fa0 <_dtoa_r+0xa58>
 8006f4c:	9b08      	ldr	r3, [sp, #32]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	dd02      	ble.n	8006f58 <_dtoa_r+0xa10>
 8006f52:	9b02      	ldr	r3, [sp, #8]
 8006f54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f58:	9b00      	ldr	r3, [sp, #0]
 8006f5a:	f883 8000 	strb.w	r8, [r3]
 8006f5e:	e63f      	b.n	8006be0 <_dtoa_r+0x698>
 8006f60:	4628      	mov	r0, r5
 8006f62:	e7bb      	b.n	8006edc <_dtoa_r+0x994>
 8006f64:	2201      	movs	r2, #1
 8006f66:	e7e1      	b.n	8006f2c <_dtoa_r+0x9e4>
 8006f68:	9b08      	ldr	r3, [sp, #32]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	db04      	blt.n	8006f78 <_dtoa_r+0xa30>
 8006f6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f70:	430b      	orrs	r3, r1
 8006f72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f74:	430b      	orrs	r3, r1
 8006f76:	d120      	bne.n	8006fba <_dtoa_r+0xa72>
 8006f78:	2a00      	cmp	r2, #0
 8006f7a:	dded      	ble.n	8006f58 <_dtoa_r+0xa10>
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	2201      	movs	r2, #1
 8006f80:	4658      	mov	r0, fp
 8006f82:	f000 fbb3 	bl	80076ec <__lshift>
 8006f86:	4621      	mov	r1, r4
 8006f88:	4681      	mov	r9, r0
 8006f8a:	f000 fc1b 	bl	80077c4 <__mcmp>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	dc03      	bgt.n	8006f9a <_dtoa_r+0xa52>
 8006f92:	d1e1      	bne.n	8006f58 <_dtoa_r+0xa10>
 8006f94:	f018 0f01 	tst.w	r8, #1
 8006f98:	d0de      	beq.n	8006f58 <_dtoa_r+0xa10>
 8006f9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f9e:	d1d8      	bne.n	8006f52 <_dtoa_r+0xa0a>
 8006fa0:	9a00      	ldr	r2, [sp, #0]
 8006fa2:	2339      	movs	r3, #57	@ 0x39
 8006fa4:	7013      	strb	r3, [r2, #0]
 8006fa6:	4633      	mov	r3, r6
 8006fa8:	461e      	mov	r6, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006fb0:	2a39      	cmp	r2, #57	@ 0x39
 8006fb2:	d052      	beq.n	800705a <_dtoa_r+0xb12>
 8006fb4:	3201      	adds	r2, #1
 8006fb6:	701a      	strb	r2, [r3, #0]
 8006fb8:	e612      	b.n	8006be0 <_dtoa_r+0x698>
 8006fba:	2a00      	cmp	r2, #0
 8006fbc:	dd07      	ble.n	8006fce <_dtoa_r+0xa86>
 8006fbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006fc2:	d0ed      	beq.n	8006fa0 <_dtoa_r+0xa58>
 8006fc4:	9a00      	ldr	r2, [sp, #0]
 8006fc6:	f108 0301 	add.w	r3, r8, #1
 8006fca:	7013      	strb	r3, [r2, #0]
 8006fcc:	e608      	b.n	8006be0 <_dtoa_r+0x698>
 8006fce:	9b07      	ldr	r3, [sp, #28]
 8006fd0:	9a07      	ldr	r2, [sp, #28]
 8006fd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006fd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d028      	beq.n	800702e <_dtoa_r+0xae6>
 8006fdc:	4649      	mov	r1, r9
 8006fde:	2300      	movs	r3, #0
 8006fe0:	220a      	movs	r2, #10
 8006fe2:	4658      	mov	r0, fp
 8006fe4:	f000 f9d6 	bl	8007394 <__multadd>
 8006fe8:	42af      	cmp	r7, r5
 8006fea:	4681      	mov	r9, r0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	f04f 020a 	mov.w	r2, #10
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	4658      	mov	r0, fp
 8006ff8:	d107      	bne.n	800700a <_dtoa_r+0xac2>
 8006ffa:	f000 f9cb 	bl	8007394 <__multadd>
 8006ffe:	4607      	mov	r7, r0
 8007000:	4605      	mov	r5, r0
 8007002:	9b07      	ldr	r3, [sp, #28]
 8007004:	3301      	adds	r3, #1
 8007006:	9307      	str	r3, [sp, #28]
 8007008:	e774      	b.n	8006ef4 <_dtoa_r+0x9ac>
 800700a:	f000 f9c3 	bl	8007394 <__multadd>
 800700e:	4629      	mov	r1, r5
 8007010:	4607      	mov	r7, r0
 8007012:	2300      	movs	r3, #0
 8007014:	220a      	movs	r2, #10
 8007016:	4658      	mov	r0, fp
 8007018:	f000 f9bc 	bl	8007394 <__multadd>
 800701c:	4605      	mov	r5, r0
 800701e:	e7f0      	b.n	8007002 <_dtoa_r+0xaba>
 8007020:	9b00      	ldr	r3, [sp, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	bfcc      	ite	gt
 8007026:	461e      	movgt	r6, r3
 8007028:	2601      	movle	r6, #1
 800702a:	4456      	add	r6, sl
 800702c:	2700      	movs	r7, #0
 800702e:	4649      	mov	r1, r9
 8007030:	2201      	movs	r2, #1
 8007032:	4658      	mov	r0, fp
 8007034:	f000 fb5a 	bl	80076ec <__lshift>
 8007038:	4621      	mov	r1, r4
 800703a:	4681      	mov	r9, r0
 800703c:	f000 fbc2 	bl	80077c4 <__mcmp>
 8007040:	2800      	cmp	r0, #0
 8007042:	dcb0      	bgt.n	8006fa6 <_dtoa_r+0xa5e>
 8007044:	d102      	bne.n	800704c <_dtoa_r+0xb04>
 8007046:	f018 0f01 	tst.w	r8, #1
 800704a:	d1ac      	bne.n	8006fa6 <_dtoa_r+0xa5e>
 800704c:	4633      	mov	r3, r6
 800704e:	461e      	mov	r6, r3
 8007050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007054:	2a30      	cmp	r2, #48	@ 0x30
 8007056:	d0fa      	beq.n	800704e <_dtoa_r+0xb06>
 8007058:	e5c2      	b.n	8006be0 <_dtoa_r+0x698>
 800705a:	459a      	cmp	sl, r3
 800705c:	d1a4      	bne.n	8006fa8 <_dtoa_r+0xa60>
 800705e:	9b04      	ldr	r3, [sp, #16]
 8007060:	3301      	adds	r3, #1
 8007062:	9304      	str	r3, [sp, #16]
 8007064:	2331      	movs	r3, #49	@ 0x31
 8007066:	f88a 3000 	strb.w	r3, [sl]
 800706a:	e5b9      	b.n	8006be0 <_dtoa_r+0x698>
 800706c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800706e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80070cc <_dtoa_r+0xb84>
 8007072:	b11b      	cbz	r3, 800707c <_dtoa_r+0xb34>
 8007074:	f10a 0308 	add.w	r3, sl, #8
 8007078:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	4650      	mov	r0, sl
 800707e:	b019      	add	sp, #100	@ 0x64
 8007080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007086:	2b01      	cmp	r3, #1
 8007088:	f77f ae37 	ble.w	8006cfa <_dtoa_r+0x7b2>
 800708c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800708e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007090:	2001      	movs	r0, #1
 8007092:	e655      	b.n	8006d40 <_dtoa_r+0x7f8>
 8007094:	9b00      	ldr	r3, [sp, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	f77f aed6 	ble.w	8006e48 <_dtoa_r+0x900>
 800709c:	4656      	mov	r6, sl
 800709e:	4621      	mov	r1, r4
 80070a0:	4648      	mov	r0, r9
 80070a2:	f7ff f9c6 	bl	8006432 <quorem>
 80070a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80070aa:	f806 8b01 	strb.w	r8, [r6], #1
 80070ae:	9b00      	ldr	r3, [sp, #0]
 80070b0:	eba6 020a 	sub.w	r2, r6, sl
 80070b4:	4293      	cmp	r3, r2
 80070b6:	ddb3      	ble.n	8007020 <_dtoa_r+0xad8>
 80070b8:	4649      	mov	r1, r9
 80070ba:	2300      	movs	r3, #0
 80070bc:	220a      	movs	r2, #10
 80070be:	4658      	mov	r0, fp
 80070c0:	f000 f968 	bl	8007394 <__multadd>
 80070c4:	4681      	mov	r9, r0
 80070c6:	e7ea      	b.n	800709e <_dtoa_r+0xb56>
 80070c8:	08008c30 	.word	0x08008c30
 80070cc:	08008bb4 	.word	0x08008bb4

080070d0 <_free_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4605      	mov	r5, r0
 80070d4:	2900      	cmp	r1, #0
 80070d6:	d041      	beq.n	800715c <_free_r+0x8c>
 80070d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070dc:	1f0c      	subs	r4, r1, #4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bfb8      	it	lt
 80070e2:	18e4      	addlt	r4, r4, r3
 80070e4:	f000 f8e8 	bl	80072b8 <__malloc_lock>
 80070e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007160 <_free_r+0x90>)
 80070ea:	6813      	ldr	r3, [r2, #0]
 80070ec:	b933      	cbnz	r3, 80070fc <_free_r+0x2c>
 80070ee:	6063      	str	r3, [r4, #4]
 80070f0:	6014      	str	r4, [r2, #0]
 80070f2:	4628      	mov	r0, r5
 80070f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070f8:	f000 b8e4 	b.w	80072c4 <__malloc_unlock>
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	d908      	bls.n	8007112 <_free_r+0x42>
 8007100:	6820      	ldr	r0, [r4, #0]
 8007102:	1821      	adds	r1, r4, r0
 8007104:	428b      	cmp	r3, r1
 8007106:	bf01      	itttt	eq
 8007108:	6819      	ldreq	r1, [r3, #0]
 800710a:	685b      	ldreq	r3, [r3, #4]
 800710c:	1809      	addeq	r1, r1, r0
 800710e:	6021      	streq	r1, [r4, #0]
 8007110:	e7ed      	b.n	80070ee <_free_r+0x1e>
 8007112:	461a      	mov	r2, r3
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	b10b      	cbz	r3, 800711c <_free_r+0x4c>
 8007118:	42a3      	cmp	r3, r4
 800711a:	d9fa      	bls.n	8007112 <_free_r+0x42>
 800711c:	6811      	ldr	r1, [r2, #0]
 800711e:	1850      	adds	r0, r2, r1
 8007120:	42a0      	cmp	r0, r4
 8007122:	d10b      	bne.n	800713c <_free_r+0x6c>
 8007124:	6820      	ldr	r0, [r4, #0]
 8007126:	4401      	add	r1, r0
 8007128:	1850      	adds	r0, r2, r1
 800712a:	4283      	cmp	r3, r0
 800712c:	6011      	str	r1, [r2, #0]
 800712e:	d1e0      	bne.n	80070f2 <_free_r+0x22>
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	6053      	str	r3, [r2, #4]
 8007136:	4408      	add	r0, r1
 8007138:	6010      	str	r0, [r2, #0]
 800713a:	e7da      	b.n	80070f2 <_free_r+0x22>
 800713c:	d902      	bls.n	8007144 <_free_r+0x74>
 800713e:	230c      	movs	r3, #12
 8007140:	602b      	str	r3, [r5, #0]
 8007142:	e7d6      	b.n	80070f2 <_free_r+0x22>
 8007144:	6820      	ldr	r0, [r4, #0]
 8007146:	1821      	adds	r1, r4, r0
 8007148:	428b      	cmp	r3, r1
 800714a:	bf04      	itt	eq
 800714c:	6819      	ldreq	r1, [r3, #0]
 800714e:	685b      	ldreq	r3, [r3, #4]
 8007150:	6063      	str	r3, [r4, #4]
 8007152:	bf04      	itt	eq
 8007154:	1809      	addeq	r1, r1, r0
 8007156:	6021      	streq	r1, [r4, #0]
 8007158:	6054      	str	r4, [r2, #4]
 800715a:	e7ca      	b.n	80070f2 <_free_r+0x22>
 800715c:	bd38      	pop	{r3, r4, r5, pc}
 800715e:	bf00      	nop
 8007160:	20000924 	.word	0x20000924

08007164 <malloc>:
 8007164:	4b02      	ldr	r3, [pc, #8]	@ (8007170 <malloc+0xc>)
 8007166:	4601      	mov	r1, r0
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	f000 b825 	b.w	80071b8 <_malloc_r>
 800716e:	bf00      	nop
 8007170:	20000020 	.word	0x20000020

08007174 <sbrk_aligned>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	4e0f      	ldr	r6, [pc, #60]	@ (80071b4 <sbrk_aligned+0x40>)
 8007178:	460c      	mov	r4, r1
 800717a:	6831      	ldr	r1, [r6, #0]
 800717c:	4605      	mov	r5, r0
 800717e:	b911      	cbnz	r1, 8007186 <sbrk_aligned+0x12>
 8007180:	f000 fe46 	bl	8007e10 <_sbrk_r>
 8007184:	6030      	str	r0, [r6, #0]
 8007186:	4621      	mov	r1, r4
 8007188:	4628      	mov	r0, r5
 800718a:	f000 fe41 	bl	8007e10 <_sbrk_r>
 800718e:	1c43      	adds	r3, r0, #1
 8007190:	d103      	bne.n	800719a <sbrk_aligned+0x26>
 8007192:	f04f 34ff 	mov.w	r4, #4294967295
 8007196:	4620      	mov	r0, r4
 8007198:	bd70      	pop	{r4, r5, r6, pc}
 800719a:	1cc4      	adds	r4, r0, #3
 800719c:	f024 0403 	bic.w	r4, r4, #3
 80071a0:	42a0      	cmp	r0, r4
 80071a2:	d0f8      	beq.n	8007196 <sbrk_aligned+0x22>
 80071a4:	1a21      	subs	r1, r4, r0
 80071a6:	4628      	mov	r0, r5
 80071a8:	f000 fe32 	bl	8007e10 <_sbrk_r>
 80071ac:	3001      	adds	r0, #1
 80071ae:	d1f2      	bne.n	8007196 <sbrk_aligned+0x22>
 80071b0:	e7ef      	b.n	8007192 <sbrk_aligned+0x1e>
 80071b2:	bf00      	nop
 80071b4:	20000920 	.word	0x20000920

080071b8 <_malloc_r>:
 80071b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071bc:	1ccd      	adds	r5, r1, #3
 80071be:	f025 0503 	bic.w	r5, r5, #3
 80071c2:	3508      	adds	r5, #8
 80071c4:	2d0c      	cmp	r5, #12
 80071c6:	bf38      	it	cc
 80071c8:	250c      	movcc	r5, #12
 80071ca:	2d00      	cmp	r5, #0
 80071cc:	4606      	mov	r6, r0
 80071ce:	db01      	blt.n	80071d4 <_malloc_r+0x1c>
 80071d0:	42a9      	cmp	r1, r5
 80071d2:	d904      	bls.n	80071de <_malloc_r+0x26>
 80071d4:	230c      	movs	r3, #12
 80071d6:	6033      	str	r3, [r6, #0]
 80071d8:	2000      	movs	r0, #0
 80071da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072b4 <_malloc_r+0xfc>
 80071e2:	f000 f869 	bl	80072b8 <__malloc_lock>
 80071e6:	f8d8 3000 	ldr.w	r3, [r8]
 80071ea:	461c      	mov	r4, r3
 80071ec:	bb44      	cbnz	r4, 8007240 <_malloc_r+0x88>
 80071ee:	4629      	mov	r1, r5
 80071f0:	4630      	mov	r0, r6
 80071f2:	f7ff ffbf 	bl	8007174 <sbrk_aligned>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	4604      	mov	r4, r0
 80071fa:	d158      	bne.n	80072ae <_malloc_r+0xf6>
 80071fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007200:	4627      	mov	r7, r4
 8007202:	2f00      	cmp	r7, #0
 8007204:	d143      	bne.n	800728e <_malloc_r+0xd6>
 8007206:	2c00      	cmp	r4, #0
 8007208:	d04b      	beq.n	80072a2 <_malloc_r+0xea>
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	4639      	mov	r1, r7
 800720e:	4630      	mov	r0, r6
 8007210:	eb04 0903 	add.w	r9, r4, r3
 8007214:	f000 fdfc 	bl	8007e10 <_sbrk_r>
 8007218:	4581      	cmp	r9, r0
 800721a:	d142      	bne.n	80072a2 <_malloc_r+0xea>
 800721c:	6821      	ldr	r1, [r4, #0]
 800721e:	1a6d      	subs	r5, r5, r1
 8007220:	4629      	mov	r1, r5
 8007222:	4630      	mov	r0, r6
 8007224:	f7ff ffa6 	bl	8007174 <sbrk_aligned>
 8007228:	3001      	adds	r0, #1
 800722a:	d03a      	beq.n	80072a2 <_malloc_r+0xea>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	442b      	add	r3, r5
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	f8d8 3000 	ldr.w	r3, [r8]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	bb62      	cbnz	r2, 8007294 <_malloc_r+0xdc>
 800723a:	f8c8 7000 	str.w	r7, [r8]
 800723e:	e00f      	b.n	8007260 <_malloc_r+0xa8>
 8007240:	6822      	ldr	r2, [r4, #0]
 8007242:	1b52      	subs	r2, r2, r5
 8007244:	d420      	bmi.n	8007288 <_malloc_r+0xd0>
 8007246:	2a0b      	cmp	r2, #11
 8007248:	d917      	bls.n	800727a <_malloc_r+0xc2>
 800724a:	1961      	adds	r1, r4, r5
 800724c:	42a3      	cmp	r3, r4
 800724e:	6025      	str	r5, [r4, #0]
 8007250:	bf18      	it	ne
 8007252:	6059      	strne	r1, [r3, #4]
 8007254:	6863      	ldr	r3, [r4, #4]
 8007256:	bf08      	it	eq
 8007258:	f8c8 1000 	streq.w	r1, [r8]
 800725c:	5162      	str	r2, [r4, r5]
 800725e:	604b      	str	r3, [r1, #4]
 8007260:	4630      	mov	r0, r6
 8007262:	f000 f82f 	bl	80072c4 <__malloc_unlock>
 8007266:	f104 000b 	add.w	r0, r4, #11
 800726a:	1d23      	adds	r3, r4, #4
 800726c:	f020 0007 	bic.w	r0, r0, #7
 8007270:	1ac2      	subs	r2, r0, r3
 8007272:	bf1c      	itt	ne
 8007274:	1a1b      	subne	r3, r3, r0
 8007276:	50a3      	strne	r3, [r4, r2]
 8007278:	e7af      	b.n	80071da <_malloc_r+0x22>
 800727a:	6862      	ldr	r2, [r4, #4]
 800727c:	42a3      	cmp	r3, r4
 800727e:	bf0c      	ite	eq
 8007280:	f8c8 2000 	streq.w	r2, [r8]
 8007284:	605a      	strne	r2, [r3, #4]
 8007286:	e7eb      	b.n	8007260 <_malloc_r+0xa8>
 8007288:	4623      	mov	r3, r4
 800728a:	6864      	ldr	r4, [r4, #4]
 800728c:	e7ae      	b.n	80071ec <_malloc_r+0x34>
 800728e:	463c      	mov	r4, r7
 8007290:	687f      	ldr	r7, [r7, #4]
 8007292:	e7b6      	b.n	8007202 <_malloc_r+0x4a>
 8007294:	461a      	mov	r2, r3
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	42a3      	cmp	r3, r4
 800729a:	d1fb      	bne.n	8007294 <_malloc_r+0xdc>
 800729c:	2300      	movs	r3, #0
 800729e:	6053      	str	r3, [r2, #4]
 80072a0:	e7de      	b.n	8007260 <_malloc_r+0xa8>
 80072a2:	230c      	movs	r3, #12
 80072a4:	6033      	str	r3, [r6, #0]
 80072a6:	4630      	mov	r0, r6
 80072a8:	f000 f80c 	bl	80072c4 <__malloc_unlock>
 80072ac:	e794      	b.n	80071d8 <_malloc_r+0x20>
 80072ae:	6005      	str	r5, [r0, #0]
 80072b0:	e7d6      	b.n	8007260 <_malloc_r+0xa8>
 80072b2:	bf00      	nop
 80072b4:	20000924 	.word	0x20000924

080072b8 <__malloc_lock>:
 80072b8:	4801      	ldr	r0, [pc, #4]	@ (80072c0 <__malloc_lock+0x8>)
 80072ba:	f7ff b8aa 	b.w	8006412 <__retarget_lock_acquire_recursive>
 80072be:	bf00      	nop
 80072c0:	2000091c 	.word	0x2000091c

080072c4 <__malloc_unlock>:
 80072c4:	4801      	ldr	r0, [pc, #4]	@ (80072cc <__malloc_unlock+0x8>)
 80072c6:	f7ff b8a5 	b.w	8006414 <__retarget_lock_release_recursive>
 80072ca:	bf00      	nop
 80072cc:	2000091c 	.word	0x2000091c

080072d0 <_Balloc>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	69c6      	ldr	r6, [r0, #28]
 80072d4:	4604      	mov	r4, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	b976      	cbnz	r6, 80072f8 <_Balloc+0x28>
 80072da:	2010      	movs	r0, #16
 80072dc:	f7ff ff42 	bl	8007164 <malloc>
 80072e0:	4602      	mov	r2, r0
 80072e2:	61e0      	str	r0, [r4, #28]
 80072e4:	b920      	cbnz	r0, 80072f0 <_Balloc+0x20>
 80072e6:	4b18      	ldr	r3, [pc, #96]	@ (8007348 <_Balloc+0x78>)
 80072e8:	4818      	ldr	r0, [pc, #96]	@ (800734c <_Balloc+0x7c>)
 80072ea:	216b      	movs	r1, #107	@ 0x6b
 80072ec:	f000 fda0 	bl	8007e30 <__assert_func>
 80072f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072f4:	6006      	str	r6, [r0, #0]
 80072f6:	60c6      	str	r6, [r0, #12]
 80072f8:	69e6      	ldr	r6, [r4, #28]
 80072fa:	68f3      	ldr	r3, [r6, #12]
 80072fc:	b183      	cbz	r3, 8007320 <_Balloc+0x50>
 80072fe:	69e3      	ldr	r3, [r4, #28]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007306:	b9b8      	cbnz	r0, 8007338 <_Balloc+0x68>
 8007308:	2101      	movs	r1, #1
 800730a:	fa01 f605 	lsl.w	r6, r1, r5
 800730e:	1d72      	adds	r2, r6, #5
 8007310:	0092      	lsls	r2, r2, #2
 8007312:	4620      	mov	r0, r4
 8007314:	f000 fdaa 	bl	8007e6c <_calloc_r>
 8007318:	b160      	cbz	r0, 8007334 <_Balloc+0x64>
 800731a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800731e:	e00e      	b.n	800733e <_Balloc+0x6e>
 8007320:	2221      	movs	r2, #33	@ 0x21
 8007322:	2104      	movs	r1, #4
 8007324:	4620      	mov	r0, r4
 8007326:	f000 fda1 	bl	8007e6c <_calloc_r>
 800732a:	69e3      	ldr	r3, [r4, #28]
 800732c:	60f0      	str	r0, [r6, #12]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e4      	bne.n	80072fe <_Balloc+0x2e>
 8007334:	2000      	movs	r0, #0
 8007336:	bd70      	pop	{r4, r5, r6, pc}
 8007338:	6802      	ldr	r2, [r0, #0]
 800733a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800733e:	2300      	movs	r3, #0
 8007340:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007344:	e7f7      	b.n	8007336 <_Balloc+0x66>
 8007346:	bf00      	nop
 8007348:	08008bc1 	.word	0x08008bc1
 800734c:	08008c41 	.word	0x08008c41

08007350 <_Bfree>:
 8007350:	b570      	push	{r4, r5, r6, lr}
 8007352:	69c6      	ldr	r6, [r0, #28]
 8007354:	4605      	mov	r5, r0
 8007356:	460c      	mov	r4, r1
 8007358:	b976      	cbnz	r6, 8007378 <_Bfree+0x28>
 800735a:	2010      	movs	r0, #16
 800735c:	f7ff ff02 	bl	8007164 <malloc>
 8007360:	4602      	mov	r2, r0
 8007362:	61e8      	str	r0, [r5, #28]
 8007364:	b920      	cbnz	r0, 8007370 <_Bfree+0x20>
 8007366:	4b09      	ldr	r3, [pc, #36]	@ (800738c <_Bfree+0x3c>)
 8007368:	4809      	ldr	r0, [pc, #36]	@ (8007390 <_Bfree+0x40>)
 800736a:	218f      	movs	r1, #143	@ 0x8f
 800736c:	f000 fd60 	bl	8007e30 <__assert_func>
 8007370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007374:	6006      	str	r6, [r0, #0]
 8007376:	60c6      	str	r6, [r0, #12]
 8007378:	b13c      	cbz	r4, 800738a <_Bfree+0x3a>
 800737a:	69eb      	ldr	r3, [r5, #28]
 800737c:	6862      	ldr	r2, [r4, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007384:	6021      	str	r1, [r4, #0]
 8007386:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800738a:	bd70      	pop	{r4, r5, r6, pc}
 800738c:	08008bc1 	.word	0x08008bc1
 8007390:	08008c41 	.word	0x08008c41

08007394 <__multadd>:
 8007394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007398:	690d      	ldr	r5, [r1, #16]
 800739a:	4607      	mov	r7, r0
 800739c:	460c      	mov	r4, r1
 800739e:	461e      	mov	r6, r3
 80073a0:	f101 0c14 	add.w	ip, r1, #20
 80073a4:	2000      	movs	r0, #0
 80073a6:	f8dc 3000 	ldr.w	r3, [ip]
 80073aa:	b299      	uxth	r1, r3
 80073ac:	fb02 6101 	mla	r1, r2, r1, r6
 80073b0:	0c1e      	lsrs	r6, r3, #16
 80073b2:	0c0b      	lsrs	r3, r1, #16
 80073b4:	fb02 3306 	mla	r3, r2, r6, r3
 80073b8:	b289      	uxth	r1, r1
 80073ba:	3001      	adds	r0, #1
 80073bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073c0:	4285      	cmp	r5, r0
 80073c2:	f84c 1b04 	str.w	r1, [ip], #4
 80073c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073ca:	dcec      	bgt.n	80073a6 <__multadd+0x12>
 80073cc:	b30e      	cbz	r6, 8007412 <__multadd+0x7e>
 80073ce:	68a3      	ldr	r3, [r4, #8]
 80073d0:	42ab      	cmp	r3, r5
 80073d2:	dc19      	bgt.n	8007408 <__multadd+0x74>
 80073d4:	6861      	ldr	r1, [r4, #4]
 80073d6:	4638      	mov	r0, r7
 80073d8:	3101      	adds	r1, #1
 80073da:	f7ff ff79 	bl	80072d0 <_Balloc>
 80073de:	4680      	mov	r8, r0
 80073e0:	b928      	cbnz	r0, 80073ee <__multadd+0x5a>
 80073e2:	4602      	mov	r2, r0
 80073e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007418 <__multadd+0x84>)
 80073e6:	480d      	ldr	r0, [pc, #52]	@ (800741c <__multadd+0x88>)
 80073e8:	21ba      	movs	r1, #186	@ 0xba
 80073ea:	f000 fd21 	bl	8007e30 <__assert_func>
 80073ee:	6922      	ldr	r2, [r4, #16]
 80073f0:	3202      	adds	r2, #2
 80073f2:	f104 010c 	add.w	r1, r4, #12
 80073f6:	0092      	lsls	r2, r2, #2
 80073f8:	300c      	adds	r0, #12
 80073fa:	f7ff f80c 	bl	8006416 <memcpy>
 80073fe:	4621      	mov	r1, r4
 8007400:	4638      	mov	r0, r7
 8007402:	f7ff ffa5 	bl	8007350 <_Bfree>
 8007406:	4644      	mov	r4, r8
 8007408:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800740c:	3501      	adds	r5, #1
 800740e:	615e      	str	r6, [r3, #20]
 8007410:	6125      	str	r5, [r4, #16]
 8007412:	4620      	mov	r0, r4
 8007414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007418:	08008c30 	.word	0x08008c30
 800741c:	08008c41 	.word	0x08008c41

08007420 <__hi0bits>:
 8007420:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007424:	4603      	mov	r3, r0
 8007426:	bf36      	itet	cc
 8007428:	0403      	lslcc	r3, r0, #16
 800742a:	2000      	movcs	r0, #0
 800742c:	2010      	movcc	r0, #16
 800742e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007432:	bf3c      	itt	cc
 8007434:	021b      	lslcc	r3, r3, #8
 8007436:	3008      	addcc	r0, #8
 8007438:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800743c:	bf3c      	itt	cc
 800743e:	011b      	lslcc	r3, r3, #4
 8007440:	3004      	addcc	r0, #4
 8007442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007446:	bf3c      	itt	cc
 8007448:	009b      	lslcc	r3, r3, #2
 800744a:	3002      	addcc	r0, #2
 800744c:	2b00      	cmp	r3, #0
 800744e:	db05      	blt.n	800745c <__hi0bits+0x3c>
 8007450:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007454:	f100 0001 	add.w	r0, r0, #1
 8007458:	bf08      	it	eq
 800745a:	2020      	moveq	r0, #32
 800745c:	4770      	bx	lr

0800745e <__lo0bits>:
 800745e:	6803      	ldr	r3, [r0, #0]
 8007460:	4602      	mov	r2, r0
 8007462:	f013 0007 	ands.w	r0, r3, #7
 8007466:	d00b      	beq.n	8007480 <__lo0bits+0x22>
 8007468:	07d9      	lsls	r1, r3, #31
 800746a:	d421      	bmi.n	80074b0 <__lo0bits+0x52>
 800746c:	0798      	lsls	r0, r3, #30
 800746e:	bf49      	itett	mi
 8007470:	085b      	lsrmi	r3, r3, #1
 8007472:	089b      	lsrpl	r3, r3, #2
 8007474:	2001      	movmi	r0, #1
 8007476:	6013      	strmi	r3, [r2, #0]
 8007478:	bf5c      	itt	pl
 800747a:	6013      	strpl	r3, [r2, #0]
 800747c:	2002      	movpl	r0, #2
 800747e:	4770      	bx	lr
 8007480:	b299      	uxth	r1, r3
 8007482:	b909      	cbnz	r1, 8007488 <__lo0bits+0x2a>
 8007484:	0c1b      	lsrs	r3, r3, #16
 8007486:	2010      	movs	r0, #16
 8007488:	b2d9      	uxtb	r1, r3
 800748a:	b909      	cbnz	r1, 8007490 <__lo0bits+0x32>
 800748c:	3008      	adds	r0, #8
 800748e:	0a1b      	lsrs	r3, r3, #8
 8007490:	0719      	lsls	r1, r3, #28
 8007492:	bf04      	itt	eq
 8007494:	091b      	lsreq	r3, r3, #4
 8007496:	3004      	addeq	r0, #4
 8007498:	0799      	lsls	r1, r3, #30
 800749a:	bf04      	itt	eq
 800749c:	089b      	lsreq	r3, r3, #2
 800749e:	3002      	addeq	r0, #2
 80074a0:	07d9      	lsls	r1, r3, #31
 80074a2:	d403      	bmi.n	80074ac <__lo0bits+0x4e>
 80074a4:	085b      	lsrs	r3, r3, #1
 80074a6:	f100 0001 	add.w	r0, r0, #1
 80074aa:	d003      	beq.n	80074b4 <__lo0bits+0x56>
 80074ac:	6013      	str	r3, [r2, #0]
 80074ae:	4770      	bx	lr
 80074b0:	2000      	movs	r0, #0
 80074b2:	4770      	bx	lr
 80074b4:	2020      	movs	r0, #32
 80074b6:	4770      	bx	lr

080074b8 <__i2b>:
 80074b8:	b510      	push	{r4, lr}
 80074ba:	460c      	mov	r4, r1
 80074bc:	2101      	movs	r1, #1
 80074be:	f7ff ff07 	bl	80072d0 <_Balloc>
 80074c2:	4602      	mov	r2, r0
 80074c4:	b928      	cbnz	r0, 80074d2 <__i2b+0x1a>
 80074c6:	4b05      	ldr	r3, [pc, #20]	@ (80074dc <__i2b+0x24>)
 80074c8:	4805      	ldr	r0, [pc, #20]	@ (80074e0 <__i2b+0x28>)
 80074ca:	f240 1145 	movw	r1, #325	@ 0x145
 80074ce:	f000 fcaf 	bl	8007e30 <__assert_func>
 80074d2:	2301      	movs	r3, #1
 80074d4:	6144      	str	r4, [r0, #20]
 80074d6:	6103      	str	r3, [r0, #16]
 80074d8:	bd10      	pop	{r4, pc}
 80074da:	bf00      	nop
 80074dc:	08008c30 	.word	0x08008c30
 80074e0:	08008c41 	.word	0x08008c41

080074e4 <__multiply>:
 80074e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e8:	4614      	mov	r4, r2
 80074ea:	690a      	ldr	r2, [r1, #16]
 80074ec:	6923      	ldr	r3, [r4, #16]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	bfa8      	it	ge
 80074f2:	4623      	movge	r3, r4
 80074f4:	460f      	mov	r7, r1
 80074f6:	bfa4      	itt	ge
 80074f8:	460c      	movge	r4, r1
 80074fa:	461f      	movge	r7, r3
 80074fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007500:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007504:	68a3      	ldr	r3, [r4, #8]
 8007506:	6861      	ldr	r1, [r4, #4]
 8007508:	eb0a 0609 	add.w	r6, sl, r9
 800750c:	42b3      	cmp	r3, r6
 800750e:	b085      	sub	sp, #20
 8007510:	bfb8      	it	lt
 8007512:	3101      	addlt	r1, #1
 8007514:	f7ff fedc 	bl	80072d0 <_Balloc>
 8007518:	b930      	cbnz	r0, 8007528 <__multiply+0x44>
 800751a:	4602      	mov	r2, r0
 800751c:	4b44      	ldr	r3, [pc, #272]	@ (8007630 <__multiply+0x14c>)
 800751e:	4845      	ldr	r0, [pc, #276]	@ (8007634 <__multiply+0x150>)
 8007520:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007524:	f000 fc84 	bl	8007e30 <__assert_func>
 8007528:	f100 0514 	add.w	r5, r0, #20
 800752c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007530:	462b      	mov	r3, r5
 8007532:	2200      	movs	r2, #0
 8007534:	4543      	cmp	r3, r8
 8007536:	d321      	bcc.n	800757c <__multiply+0x98>
 8007538:	f107 0114 	add.w	r1, r7, #20
 800753c:	f104 0214 	add.w	r2, r4, #20
 8007540:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007544:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007548:	9302      	str	r3, [sp, #8]
 800754a:	1b13      	subs	r3, r2, r4
 800754c:	3b15      	subs	r3, #21
 800754e:	f023 0303 	bic.w	r3, r3, #3
 8007552:	3304      	adds	r3, #4
 8007554:	f104 0715 	add.w	r7, r4, #21
 8007558:	42ba      	cmp	r2, r7
 800755a:	bf38      	it	cc
 800755c:	2304      	movcc	r3, #4
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	9b02      	ldr	r3, [sp, #8]
 8007562:	9103      	str	r1, [sp, #12]
 8007564:	428b      	cmp	r3, r1
 8007566:	d80c      	bhi.n	8007582 <__multiply+0x9e>
 8007568:	2e00      	cmp	r6, #0
 800756a:	dd03      	ble.n	8007574 <__multiply+0x90>
 800756c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007570:	2b00      	cmp	r3, #0
 8007572:	d05b      	beq.n	800762c <__multiply+0x148>
 8007574:	6106      	str	r6, [r0, #16]
 8007576:	b005      	add	sp, #20
 8007578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800757c:	f843 2b04 	str.w	r2, [r3], #4
 8007580:	e7d8      	b.n	8007534 <__multiply+0x50>
 8007582:	f8b1 a000 	ldrh.w	sl, [r1]
 8007586:	f1ba 0f00 	cmp.w	sl, #0
 800758a:	d024      	beq.n	80075d6 <__multiply+0xf2>
 800758c:	f104 0e14 	add.w	lr, r4, #20
 8007590:	46a9      	mov	r9, r5
 8007592:	f04f 0c00 	mov.w	ip, #0
 8007596:	f85e 7b04 	ldr.w	r7, [lr], #4
 800759a:	f8d9 3000 	ldr.w	r3, [r9]
 800759e:	fa1f fb87 	uxth.w	fp, r7
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80075a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80075ac:	f8d9 7000 	ldr.w	r7, [r9]
 80075b0:	4463      	add	r3, ip
 80075b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80075b6:	fb0a c70b 	mla	r7, sl, fp, ip
 80075ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80075be:	b29b      	uxth	r3, r3
 80075c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075c4:	4572      	cmp	r2, lr
 80075c6:	f849 3b04 	str.w	r3, [r9], #4
 80075ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80075ce:	d8e2      	bhi.n	8007596 <__multiply+0xb2>
 80075d0:	9b01      	ldr	r3, [sp, #4]
 80075d2:	f845 c003 	str.w	ip, [r5, r3]
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075dc:	3104      	adds	r1, #4
 80075de:	f1b9 0f00 	cmp.w	r9, #0
 80075e2:	d021      	beq.n	8007628 <__multiply+0x144>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	f104 0c14 	add.w	ip, r4, #20
 80075ea:	46ae      	mov	lr, r5
 80075ec:	f04f 0a00 	mov.w	sl, #0
 80075f0:	f8bc b000 	ldrh.w	fp, [ip]
 80075f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80075f8:	fb09 770b 	mla	r7, r9, fp, r7
 80075fc:	4457      	add	r7, sl
 80075fe:	b29b      	uxth	r3, r3
 8007600:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007604:	f84e 3b04 	str.w	r3, [lr], #4
 8007608:	f85c 3b04 	ldr.w	r3, [ip], #4
 800760c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007610:	f8be 3000 	ldrh.w	r3, [lr]
 8007614:	fb09 330a 	mla	r3, r9, sl, r3
 8007618:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800761c:	4562      	cmp	r2, ip
 800761e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007622:	d8e5      	bhi.n	80075f0 <__multiply+0x10c>
 8007624:	9f01      	ldr	r7, [sp, #4]
 8007626:	51eb      	str	r3, [r5, r7]
 8007628:	3504      	adds	r5, #4
 800762a:	e799      	b.n	8007560 <__multiply+0x7c>
 800762c:	3e01      	subs	r6, #1
 800762e:	e79b      	b.n	8007568 <__multiply+0x84>
 8007630:	08008c30 	.word	0x08008c30
 8007634:	08008c41 	.word	0x08008c41

08007638 <__pow5mult>:
 8007638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800763c:	4615      	mov	r5, r2
 800763e:	f012 0203 	ands.w	r2, r2, #3
 8007642:	4607      	mov	r7, r0
 8007644:	460e      	mov	r6, r1
 8007646:	d007      	beq.n	8007658 <__pow5mult+0x20>
 8007648:	4c25      	ldr	r4, [pc, #148]	@ (80076e0 <__pow5mult+0xa8>)
 800764a:	3a01      	subs	r2, #1
 800764c:	2300      	movs	r3, #0
 800764e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007652:	f7ff fe9f 	bl	8007394 <__multadd>
 8007656:	4606      	mov	r6, r0
 8007658:	10ad      	asrs	r5, r5, #2
 800765a:	d03d      	beq.n	80076d8 <__pow5mult+0xa0>
 800765c:	69fc      	ldr	r4, [r7, #28]
 800765e:	b97c      	cbnz	r4, 8007680 <__pow5mult+0x48>
 8007660:	2010      	movs	r0, #16
 8007662:	f7ff fd7f 	bl	8007164 <malloc>
 8007666:	4602      	mov	r2, r0
 8007668:	61f8      	str	r0, [r7, #28]
 800766a:	b928      	cbnz	r0, 8007678 <__pow5mult+0x40>
 800766c:	4b1d      	ldr	r3, [pc, #116]	@ (80076e4 <__pow5mult+0xac>)
 800766e:	481e      	ldr	r0, [pc, #120]	@ (80076e8 <__pow5mult+0xb0>)
 8007670:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007674:	f000 fbdc 	bl	8007e30 <__assert_func>
 8007678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800767c:	6004      	str	r4, [r0, #0]
 800767e:	60c4      	str	r4, [r0, #12]
 8007680:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007684:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007688:	b94c      	cbnz	r4, 800769e <__pow5mult+0x66>
 800768a:	f240 2171 	movw	r1, #625	@ 0x271
 800768e:	4638      	mov	r0, r7
 8007690:	f7ff ff12 	bl	80074b8 <__i2b>
 8007694:	2300      	movs	r3, #0
 8007696:	f8c8 0008 	str.w	r0, [r8, #8]
 800769a:	4604      	mov	r4, r0
 800769c:	6003      	str	r3, [r0, #0]
 800769e:	f04f 0900 	mov.w	r9, #0
 80076a2:	07eb      	lsls	r3, r5, #31
 80076a4:	d50a      	bpl.n	80076bc <__pow5mult+0x84>
 80076a6:	4631      	mov	r1, r6
 80076a8:	4622      	mov	r2, r4
 80076aa:	4638      	mov	r0, r7
 80076ac:	f7ff ff1a 	bl	80074e4 <__multiply>
 80076b0:	4631      	mov	r1, r6
 80076b2:	4680      	mov	r8, r0
 80076b4:	4638      	mov	r0, r7
 80076b6:	f7ff fe4b 	bl	8007350 <_Bfree>
 80076ba:	4646      	mov	r6, r8
 80076bc:	106d      	asrs	r5, r5, #1
 80076be:	d00b      	beq.n	80076d8 <__pow5mult+0xa0>
 80076c0:	6820      	ldr	r0, [r4, #0]
 80076c2:	b938      	cbnz	r0, 80076d4 <__pow5mult+0x9c>
 80076c4:	4622      	mov	r2, r4
 80076c6:	4621      	mov	r1, r4
 80076c8:	4638      	mov	r0, r7
 80076ca:	f7ff ff0b 	bl	80074e4 <__multiply>
 80076ce:	6020      	str	r0, [r4, #0]
 80076d0:	f8c0 9000 	str.w	r9, [r0]
 80076d4:	4604      	mov	r4, r0
 80076d6:	e7e4      	b.n	80076a2 <__pow5mult+0x6a>
 80076d8:	4630      	mov	r0, r6
 80076da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076de:	bf00      	nop
 80076e0:	08008c9c 	.word	0x08008c9c
 80076e4:	08008bc1 	.word	0x08008bc1
 80076e8:	08008c41 	.word	0x08008c41

080076ec <__lshift>:
 80076ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f0:	460c      	mov	r4, r1
 80076f2:	6849      	ldr	r1, [r1, #4]
 80076f4:	6923      	ldr	r3, [r4, #16]
 80076f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076fa:	68a3      	ldr	r3, [r4, #8]
 80076fc:	4607      	mov	r7, r0
 80076fe:	4691      	mov	r9, r2
 8007700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007704:	f108 0601 	add.w	r6, r8, #1
 8007708:	42b3      	cmp	r3, r6
 800770a:	db0b      	blt.n	8007724 <__lshift+0x38>
 800770c:	4638      	mov	r0, r7
 800770e:	f7ff fddf 	bl	80072d0 <_Balloc>
 8007712:	4605      	mov	r5, r0
 8007714:	b948      	cbnz	r0, 800772a <__lshift+0x3e>
 8007716:	4602      	mov	r2, r0
 8007718:	4b28      	ldr	r3, [pc, #160]	@ (80077bc <__lshift+0xd0>)
 800771a:	4829      	ldr	r0, [pc, #164]	@ (80077c0 <__lshift+0xd4>)
 800771c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007720:	f000 fb86 	bl	8007e30 <__assert_func>
 8007724:	3101      	adds	r1, #1
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	e7ee      	b.n	8007708 <__lshift+0x1c>
 800772a:	2300      	movs	r3, #0
 800772c:	f100 0114 	add.w	r1, r0, #20
 8007730:	f100 0210 	add.w	r2, r0, #16
 8007734:	4618      	mov	r0, r3
 8007736:	4553      	cmp	r3, sl
 8007738:	db33      	blt.n	80077a2 <__lshift+0xb6>
 800773a:	6920      	ldr	r0, [r4, #16]
 800773c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007740:	f104 0314 	add.w	r3, r4, #20
 8007744:	f019 091f 	ands.w	r9, r9, #31
 8007748:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800774c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007750:	d02b      	beq.n	80077aa <__lshift+0xbe>
 8007752:	f1c9 0e20 	rsb	lr, r9, #32
 8007756:	468a      	mov	sl, r1
 8007758:	2200      	movs	r2, #0
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	fa00 f009 	lsl.w	r0, r0, r9
 8007760:	4310      	orrs	r0, r2
 8007762:	f84a 0b04 	str.w	r0, [sl], #4
 8007766:	f853 2b04 	ldr.w	r2, [r3], #4
 800776a:	459c      	cmp	ip, r3
 800776c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007770:	d8f3      	bhi.n	800775a <__lshift+0x6e>
 8007772:	ebac 0304 	sub.w	r3, ip, r4
 8007776:	3b15      	subs	r3, #21
 8007778:	f023 0303 	bic.w	r3, r3, #3
 800777c:	3304      	adds	r3, #4
 800777e:	f104 0015 	add.w	r0, r4, #21
 8007782:	4584      	cmp	ip, r0
 8007784:	bf38      	it	cc
 8007786:	2304      	movcc	r3, #4
 8007788:	50ca      	str	r2, [r1, r3]
 800778a:	b10a      	cbz	r2, 8007790 <__lshift+0xa4>
 800778c:	f108 0602 	add.w	r6, r8, #2
 8007790:	3e01      	subs	r6, #1
 8007792:	4638      	mov	r0, r7
 8007794:	612e      	str	r6, [r5, #16]
 8007796:	4621      	mov	r1, r4
 8007798:	f7ff fdda 	bl	8007350 <_Bfree>
 800779c:	4628      	mov	r0, r5
 800779e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80077a6:	3301      	adds	r3, #1
 80077a8:	e7c5      	b.n	8007736 <__lshift+0x4a>
 80077aa:	3904      	subs	r1, #4
 80077ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80077b4:	459c      	cmp	ip, r3
 80077b6:	d8f9      	bhi.n	80077ac <__lshift+0xc0>
 80077b8:	e7ea      	b.n	8007790 <__lshift+0xa4>
 80077ba:	bf00      	nop
 80077bc:	08008c30 	.word	0x08008c30
 80077c0:	08008c41 	.word	0x08008c41

080077c4 <__mcmp>:
 80077c4:	690a      	ldr	r2, [r1, #16]
 80077c6:	4603      	mov	r3, r0
 80077c8:	6900      	ldr	r0, [r0, #16]
 80077ca:	1a80      	subs	r0, r0, r2
 80077cc:	b530      	push	{r4, r5, lr}
 80077ce:	d10e      	bne.n	80077ee <__mcmp+0x2a>
 80077d0:	3314      	adds	r3, #20
 80077d2:	3114      	adds	r1, #20
 80077d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077e4:	4295      	cmp	r5, r2
 80077e6:	d003      	beq.n	80077f0 <__mcmp+0x2c>
 80077e8:	d205      	bcs.n	80077f6 <__mcmp+0x32>
 80077ea:	f04f 30ff 	mov.w	r0, #4294967295
 80077ee:	bd30      	pop	{r4, r5, pc}
 80077f0:	42a3      	cmp	r3, r4
 80077f2:	d3f3      	bcc.n	80077dc <__mcmp+0x18>
 80077f4:	e7fb      	b.n	80077ee <__mcmp+0x2a>
 80077f6:	2001      	movs	r0, #1
 80077f8:	e7f9      	b.n	80077ee <__mcmp+0x2a>
	...

080077fc <__mdiff>:
 80077fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	4689      	mov	r9, r1
 8007802:	4606      	mov	r6, r0
 8007804:	4611      	mov	r1, r2
 8007806:	4648      	mov	r0, r9
 8007808:	4614      	mov	r4, r2
 800780a:	f7ff ffdb 	bl	80077c4 <__mcmp>
 800780e:	1e05      	subs	r5, r0, #0
 8007810:	d112      	bne.n	8007838 <__mdiff+0x3c>
 8007812:	4629      	mov	r1, r5
 8007814:	4630      	mov	r0, r6
 8007816:	f7ff fd5b 	bl	80072d0 <_Balloc>
 800781a:	4602      	mov	r2, r0
 800781c:	b928      	cbnz	r0, 800782a <__mdiff+0x2e>
 800781e:	4b3f      	ldr	r3, [pc, #252]	@ (800791c <__mdiff+0x120>)
 8007820:	f240 2137 	movw	r1, #567	@ 0x237
 8007824:	483e      	ldr	r0, [pc, #248]	@ (8007920 <__mdiff+0x124>)
 8007826:	f000 fb03 	bl	8007e30 <__assert_func>
 800782a:	2301      	movs	r3, #1
 800782c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007830:	4610      	mov	r0, r2
 8007832:	b003      	add	sp, #12
 8007834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007838:	bfbc      	itt	lt
 800783a:	464b      	movlt	r3, r9
 800783c:	46a1      	movlt	r9, r4
 800783e:	4630      	mov	r0, r6
 8007840:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007844:	bfba      	itte	lt
 8007846:	461c      	movlt	r4, r3
 8007848:	2501      	movlt	r5, #1
 800784a:	2500      	movge	r5, #0
 800784c:	f7ff fd40 	bl	80072d0 <_Balloc>
 8007850:	4602      	mov	r2, r0
 8007852:	b918      	cbnz	r0, 800785c <__mdiff+0x60>
 8007854:	4b31      	ldr	r3, [pc, #196]	@ (800791c <__mdiff+0x120>)
 8007856:	f240 2145 	movw	r1, #581	@ 0x245
 800785a:	e7e3      	b.n	8007824 <__mdiff+0x28>
 800785c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007860:	6926      	ldr	r6, [r4, #16]
 8007862:	60c5      	str	r5, [r0, #12]
 8007864:	f109 0310 	add.w	r3, r9, #16
 8007868:	f109 0514 	add.w	r5, r9, #20
 800786c:	f104 0e14 	add.w	lr, r4, #20
 8007870:	f100 0b14 	add.w	fp, r0, #20
 8007874:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007878:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	46d9      	mov	r9, fp
 8007880:	f04f 0c00 	mov.w	ip, #0
 8007884:	9b01      	ldr	r3, [sp, #4]
 8007886:	f85e 0b04 	ldr.w	r0, [lr], #4
 800788a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	fa1f f38a 	uxth.w	r3, sl
 8007894:	4619      	mov	r1, r3
 8007896:	b283      	uxth	r3, r0
 8007898:	1acb      	subs	r3, r1, r3
 800789a:	0c00      	lsrs	r0, r0, #16
 800789c:	4463      	add	r3, ip
 800789e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80078a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80078ac:	4576      	cmp	r6, lr
 80078ae:	f849 3b04 	str.w	r3, [r9], #4
 80078b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078b6:	d8e5      	bhi.n	8007884 <__mdiff+0x88>
 80078b8:	1b33      	subs	r3, r6, r4
 80078ba:	3b15      	subs	r3, #21
 80078bc:	f023 0303 	bic.w	r3, r3, #3
 80078c0:	3415      	adds	r4, #21
 80078c2:	3304      	adds	r3, #4
 80078c4:	42a6      	cmp	r6, r4
 80078c6:	bf38      	it	cc
 80078c8:	2304      	movcc	r3, #4
 80078ca:	441d      	add	r5, r3
 80078cc:	445b      	add	r3, fp
 80078ce:	461e      	mov	r6, r3
 80078d0:	462c      	mov	r4, r5
 80078d2:	4544      	cmp	r4, r8
 80078d4:	d30e      	bcc.n	80078f4 <__mdiff+0xf8>
 80078d6:	f108 0103 	add.w	r1, r8, #3
 80078da:	1b49      	subs	r1, r1, r5
 80078dc:	f021 0103 	bic.w	r1, r1, #3
 80078e0:	3d03      	subs	r5, #3
 80078e2:	45a8      	cmp	r8, r5
 80078e4:	bf38      	it	cc
 80078e6:	2100      	movcc	r1, #0
 80078e8:	440b      	add	r3, r1
 80078ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078ee:	b191      	cbz	r1, 8007916 <__mdiff+0x11a>
 80078f0:	6117      	str	r7, [r2, #16]
 80078f2:	e79d      	b.n	8007830 <__mdiff+0x34>
 80078f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80078f8:	46e6      	mov	lr, ip
 80078fa:	0c08      	lsrs	r0, r1, #16
 80078fc:	fa1c fc81 	uxtah	ip, ip, r1
 8007900:	4471      	add	r1, lr
 8007902:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007906:	b289      	uxth	r1, r1
 8007908:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800790c:	f846 1b04 	str.w	r1, [r6], #4
 8007910:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007914:	e7dd      	b.n	80078d2 <__mdiff+0xd6>
 8007916:	3f01      	subs	r7, #1
 8007918:	e7e7      	b.n	80078ea <__mdiff+0xee>
 800791a:	bf00      	nop
 800791c:	08008c30 	.word	0x08008c30
 8007920:	08008c41 	.word	0x08008c41

08007924 <__d2b>:
 8007924:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007928:	460f      	mov	r7, r1
 800792a:	2101      	movs	r1, #1
 800792c:	ec59 8b10 	vmov	r8, r9, d0
 8007930:	4616      	mov	r6, r2
 8007932:	f7ff fccd 	bl	80072d0 <_Balloc>
 8007936:	4604      	mov	r4, r0
 8007938:	b930      	cbnz	r0, 8007948 <__d2b+0x24>
 800793a:	4602      	mov	r2, r0
 800793c:	4b23      	ldr	r3, [pc, #140]	@ (80079cc <__d2b+0xa8>)
 800793e:	4824      	ldr	r0, [pc, #144]	@ (80079d0 <__d2b+0xac>)
 8007940:	f240 310f 	movw	r1, #783	@ 0x30f
 8007944:	f000 fa74 	bl	8007e30 <__assert_func>
 8007948:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800794c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007950:	b10d      	cbz	r5, 8007956 <__d2b+0x32>
 8007952:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007956:	9301      	str	r3, [sp, #4]
 8007958:	f1b8 0300 	subs.w	r3, r8, #0
 800795c:	d023      	beq.n	80079a6 <__d2b+0x82>
 800795e:	4668      	mov	r0, sp
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	f7ff fd7c 	bl	800745e <__lo0bits>
 8007966:	e9dd 1200 	ldrd	r1, r2, [sp]
 800796a:	b1d0      	cbz	r0, 80079a2 <__d2b+0x7e>
 800796c:	f1c0 0320 	rsb	r3, r0, #32
 8007970:	fa02 f303 	lsl.w	r3, r2, r3
 8007974:	430b      	orrs	r3, r1
 8007976:	40c2      	lsrs	r2, r0
 8007978:	6163      	str	r3, [r4, #20]
 800797a:	9201      	str	r2, [sp, #4]
 800797c:	9b01      	ldr	r3, [sp, #4]
 800797e:	61a3      	str	r3, [r4, #24]
 8007980:	2b00      	cmp	r3, #0
 8007982:	bf0c      	ite	eq
 8007984:	2201      	moveq	r2, #1
 8007986:	2202      	movne	r2, #2
 8007988:	6122      	str	r2, [r4, #16]
 800798a:	b1a5      	cbz	r5, 80079b6 <__d2b+0x92>
 800798c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007990:	4405      	add	r5, r0
 8007992:	603d      	str	r5, [r7, #0]
 8007994:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007998:	6030      	str	r0, [r6, #0]
 800799a:	4620      	mov	r0, r4
 800799c:	b003      	add	sp, #12
 800799e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079a2:	6161      	str	r1, [r4, #20]
 80079a4:	e7ea      	b.n	800797c <__d2b+0x58>
 80079a6:	a801      	add	r0, sp, #4
 80079a8:	f7ff fd59 	bl	800745e <__lo0bits>
 80079ac:	9b01      	ldr	r3, [sp, #4]
 80079ae:	6163      	str	r3, [r4, #20]
 80079b0:	3020      	adds	r0, #32
 80079b2:	2201      	movs	r2, #1
 80079b4:	e7e8      	b.n	8007988 <__d2b+0x64>
 80079b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80079be:	6038      	str	r0, [r7, #0]
 80079c0:	6918      	ldr	r0, [r3, #16]
 80079c2:	f7ff fd2d 	bl	8007420 <__hi0bits>
 80079c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079ca:	e7e5      	b.n	8007998 <__d2b+0x74>
 80079cc:	08008c30 	.word	0x08008c30
 80079d0:	08008c41 	.word	0x08008c41

080079d4 <__ssputs_r>:
 80079d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d8:	688e      	ldr	r6, [r1, #8]
 80079da:	461f      	mov	r7, r3
 80079dc:	42be      	cmp	r6, r7
 80079de:	680b      	ldr	r3, [r1, #0]
 80079e0:	4682      	mov	sl, r0
 80079e2:	460c      	mov	r4, r1
 80079e4:	4690      	mov	r8, r2
 80079e6:	d82d      	bhi.n	8007a44 <__ssputs_r+0x70>
 80079e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079f0:	d026      	beq.n	8007a40 <__ssputs_r+0x6c>
 80079f2:	6965      	ldr	r5, [r4, #20]
 80079f4:	6909      	ldr	r1, [r1, #16]
 80079f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079fa:	eba3 0901 	sub.w	r9, r3, r1
 80079fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a02:	1c7b      	adds	r3, r7, #1
 8007a04:	444b      	add	r3, r9
 8007a06:	106d      	asrs	r5, r5, #1
 8007a08:	429d      	cmp	r5, r3
 8007a0a:	bf38      	it	cc
 8007a0c:	461d      	movcc	r5, r3
 8007a0e:	0553      	lsls	r3, r2, #21
 8007a10:	d527      	bpl.n	8007a62 <__ssputs_r+0x8e>
 8007a12:	4629      	mov	r1, r5
 8007a14:	f7ff fbd0 	bl	80071b8 <_malloc_r>
 8007a18:	4606      	mov	r6, r0
 8007a1a:	b360      	cbz	r0, 8007a76 <__ssputs_r+0xa2>
 8007a1c:	6921      	ldr	r1, [r4, #16]
 8007a1e:	464a      	mov	r2, r9
 8007a20:	f7fe fcf9 	bl	8006416 <memcpy>
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a2e:	81a3      	strh	r3, [r4, #12]
 8007a30:	6126      	str	r6, [r4, #16]
 8007a32:	6165      	str	r5, [r4, #20]
 8007a34:	444e      	add	r6, r9
 8007a36:	eba5 0509 	sub.w	r5, r5, r9
 8007a3a:	6026      	str	r6, [r4, #0]
 8007a3c:	60a5      	str	r5, [r4, #8]
 8007a3e:	463e      	mov	r6, r7
 8007a40:	42be      	cmp	r6, r7
 8007a42:	d900      	bls.n	8007a46 <__ssputs_r+0x72>
 8007a44:	463e      	mov	r6, r7
 8007a46:	6820      	ldr	r0, [r4, #0]
 8007a48:	4632      	mov	r2, r6
 8007a4a:	4641      	mov	r1, r8
 8007a4c:	f000 f9c6 	bl	8007ddc <memmove>
 8007a50:	68a3      	ldr	r3, [r4, #8]
 8007a52:	1b9b      	subs	r3, r3, r6
 8007a54:	60a3      	str	r3, [r4, #8]
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	4433      	add	r3, r6
 8007a5a:	6023      	str	r3, [r4, #0]
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a62:	462a      	mov	r2, r5
 8007a64:	f000 fa28 	bl	8007eb8 <_realloc_r>
 8007a68:	4606      	mov	r6, r0
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d1e0      	bne.n	8007a30 <__ssputs_r+0x5c>
 8007a6e:	6921      	ldr	r1, [r4, #16]
 8007a70:	4650      	mov	r0, sl
 8007a72:	f7ff fb2d 	bl	80070d0 <_free_r>
 8007a76:	230c      	movs	r3, #12
 8007a78:	f8ca 3000 	str.w	r3, [sl]
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	f04f 30ff 	mov.w	r0, #4294967295
 8007a88:	e7e9      	b.n	8007a5e <__ssputs_r+0x8a>
	...

08007a8c <_svfiprintf_r>:
 8007a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a90:	4698      	mov	r8, r3
 8007a92:	898b      	ldrh	r3, [r1, #12]
 8007a94:	061b      	lsls	r3, r3, #24
 8007a96:	b09d      	sub	sp, #116	@ 0x74
 8007a98:	4607      	mov	r7, r0
 8007a9a:	460d      	mov	r5, r1
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	d510      	bpl.n	8007ac2 <_svfiprintf_r+0x36>
 8007aa0:	690b      	ldr	r3, [r1, #16]
 8007aa2:	b973      	cbnz	r3, 8007ac2 <_svfiprintf_r+0x36>
 8007aa4:	2140      	movs	r1, #64	@ 0x40
 8007aa6:	f7ff fb87 	bl	80071b8 <_malloc_r>
 8007aaa:	6028      	str	r0, [r5, #0]
 8007aac:	6128      	str	r0, [r5, #16]
 8007aae:	b930      	cbnz	r0, 8007abe <_svfiprintf_r+0x32>
 8007ab0:	230c      	movs	r3, #12
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab8:	b01d      	add	sp, #116	@ 0x74
 8007aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abe:	2340      	movs	r3, #64	@ 0x40
 8007ac0:	616b      	str	r3, [r5, #20]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ac6:	2320      	movs	r3, #32
 8007ac8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ad0:	2330      	movs	r3, #48	@ 0x30
 8007ad2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c70 <_svfiprintf_r+0x1e4>
 8007ad6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ada:	f04f 0901 	mov.w	r9, #1
 8007ade:	4623      	mov	r3, r4
 8007ae0:	469a      	mov	sl, r3
 8007ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ae6:	b10a      	cbz	r2, 8007aec <_svfiprintf_r+0x60>
 8007ae8:	2a25      	cmp	r2, #37	@ 0x25
 8007aea:	d1f9      	bne.n	8007ae0 <_svfiprintf_r+0x54>
 8007aec:	ebba 0b04 	subs.w	fp, sl, r4
 8007af0:	d00b      	beq.n	8007b0a <_svfiprintf_r+0x7e>
 8007af2:	465b      	mov	r3, fp
 8007af4:	4622      	mov	r2, r4
 8007af6:	4629      	mov	r1, r5
 8007af8:	4638      	mov	r0, r7
 8007afa:	f7ff ff6b 	bl	80079d4 <__ssputs_r>
 8007afe:	3001      	adds	r0, #1
 8007b00:	f000 80a7 	beq.w	8007c52 <_svfiprintf_r+0x1c6>
 8007b04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b06:	445a      	add	r2, fp
 8007b08:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 809f 	beq.w	8007c52 <_svfiprintf_r+0x1c6>
 8007b14:	2300      	movs	r3, #0
 8007b16:	f04f 32ff 	mov.w	r2, #4294967295
 8007b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b1e:	f10a 0a01 	add.w	sl, sl, #1
 8007b22:	9304      	str	r3, [sp, #16]
 8007b24:	9307      	str	r3, [sp, #28]
 8007b26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b2c:	4654      	mov	r4, sl
 8007b2e:	2205      	movs	r2, #5
 8007b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b34:	484e      	ldr	r0, [pc, #312]	@ (8007c70 <_svfiprintf_r+0x1e4>)
 8007b36:	f7f8 fb4b 	bl	80001d0 <memchr>
 8007b3a:	9a04      	ldr	r2, [sp, #16]
 8007b3c:	b9d8      	cbnz	r0, 8007b76 <_svfiprintf_r+0xea>
 8007b3e:	06d0      	lsls	r0, r2, #27
 8007b40:	bf44      	itt	mi
 8007b42:	2320      	movmi	r3, #32
 8007b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b48:	0711      	lsls	r1, r2, #28
 8007b4a:	bf44      	itt	mi
 8007b4c:	232b      	movmi	r3, #43	@ 0x2b
 8007b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b52:	f89a 3000 	ldrb.w	r3, [sl]
 8007b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b58:	d015      	beq.n	8007b86 <_svfiprintf_r+0xfa>
 8007b5a:	9a07      	ldr	r2, [sp, #28]
 8007b5c:	4654      	mov	r4, sl
 8007b5e:	2000      	movs	r0, #0
 8007b60:	f04f 0c0a 	mov.w	ip, #10
 8007b64:	4621      	mov	r1, r4
 8007b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b6a:	3b30      	subs	r3, #48	@ 0x30
 8007b6c:	2b09      	cmp	r3, #9
 8007b6e:	d94b      	bls.n	8007c08 <_svfiprintf_r+0x17c>
 8007b70:	b1b0      	cbz	r0, 8007ba0 <_svfiprintf_r+0x114>
 8007b72:	9207      	str	r2, [sp, #28]
 8007b74:	e014      	b.n	8007ba0 <_svfiprintf_r+0x114>
 8007b76:	eba0 0308 	sub.w	r3, r0, r8
 8007b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	9304      	str	r3, [sp, #16]
 8007b82:	46a2      	mov	sl, r4
 8007b84:	e7d2      	b.n	8007b2c <_svfiprintf_r+0xa0>
 8007b86:	9b03      	ldr	r3, [sp, #12]
 8007b88:	1d19      	adds	r1, r3, #4
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	9103      	str	r1, [sp, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bfbb      	ittet	lt
 8007b92:	425b      	neglt	r3, r3
 8007b94:	f042 0202 	orrlt.w	r2, r2, #2
 8007b98:	9307      	strge	r3, [sp, #28]
 8007b9a:	9307      	strlt	r3, [sp, #28]
 8007b9c:	bfb8      	it	lt
 8007b9e:	9204      	strlt	r2, [sp, #16]
 8007ba0:	7823      	ldrb	r3, [r4, #0]
 8007ba2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ba4:	d10a      	bne.n	8007bbc <_svfiprintf_r+0x130>
 8007ba6:	7863      	ldrb	r3, [r4, #1]
 8007ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007baa:	d132      	bne.n	8007c12 <_svfiprintf_r+0x186>
 8007bac:	9b03      	ldr	r3, [sp, #12]
 8007bae:	1d1a      	adds	r2, r3, #4
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	9203      	str	r2, [sp, #12]
 8007bb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bb8:	3402      	adds	r4, #2
 8007bba:	9305      	str	r3, [sp, #20]
 8007bbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c80 <_svfiprintf_r+0x1f4>
 8007bc0:	7821      	ldrb	r1, [r4, #0]
 8007bc2:	2203      	movs	r2, #3
 8007bc4:	4650      	mov	r0, sl
 8007bc6:	f7f8 fb03 	bl	80001d0 <memchr>
 8007bca:	b138      	cbz	r0, 8007bdc <_svfiprintf_r+0x150>
 8007bcc:	9b04      	ldr	r3, [sp, #16]
 8007bce:	eba0 000a 	sub.w	r0, r0, sl
 8007bd2:	2240      	movs	r2, #64	@ 0x40
 8007bd4:	4082      	lsls	r2, r0
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	3401      	adds	r4, #1
 8007bda:	9304      	str	r3, [sp, #16]
 8007bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be0:	4824      	ldr	r0, [pc, #144]	@ (8007c74 <_svfiprintf_r+0x1e8>)
 8007be2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007be6:	2206      	movs	r2, #6
 8007be8:	f7f8 faf2 	bl	80001d0 <memchr>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d036      	beq.n	8007c5e <_svfiprintf_r+0x1d2>
 8007bf0:	4b21      	ldr	r3, [pc, #132]	@ (8007c78 <_svfiprintf_r+0x1ec>)
 8007bf2:	bb1b      	cbnz	r3, 8007c3c <_svfiprintf_r+0x1b0>
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	3307      	adds	r3, #7
 8007bf8:	f023 0307 	bic.w	r3, r3, #7
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	9303      	str	r3, [sp, #12]
 8007c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c02:	4433      	add	r3, r6
 8007c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c06:	e76a      	b.n	8007ade <_svfiprintf_r+0x52>
 8007c08:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	2001      	movs	r0, #1
 8007c10:	e7a8      	b.n	8007b64 <_svfiprintf_r+0xd8>
 8007c12:	2300      	movs	r3, #0
 8007c14:	3401      	adds	r4, #1
 8007c16:	9305      	str	r3, [sp, #20]
 8007c18:	4619      	mov	r1, r3
 8007c1a:	f04f 0c0a 	mov.w	ip, #10
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c24:	3a30      	subs	r2, #48	@ 0x30
 8007c26:	2a09      	cmp	r2, #9
 8007c28:	d903      	bls.n	8007c32 <_svfiprintf_r+0x1a6>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0c6      	beq.n	8007bbc <_svfiprintf_r+0x130>
 8007c2e:	9105      	str	r1, [sp, #20]
 8007c30:	e7c4      	b.n	8007bbc <_svfiprintf_r+0x130>
 8007c32:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c36:	4604      	mov	r4, r0
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e7f0      	b.n	8007c1e <_svfiprintf_r+0x192>
 8007c3c:	ab03      	add	r3, sp, #12
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	462a      	mov	r2, r5
 8007c42:	4b0e      	ldr	r3, [pc, #56]	@ (8007c7c <_svfiprintf_r+0x1f0>)
 8007c44:	a904      	add	r1, sp, #16
 8007c46:	4638      	mov	r0, r7
 8007c48:	f7fd fe88 	bl	800595c <_printf_float>
 8007c4c:	1c42      	adds	r2, r0, #1
 8007c4e:	4606      	mov	r6, r0
 8007c50:	d1d6      	bne.n	8007c00 <_svfiprintf_r+0x174>
 8007c52:	89ab      	ldrh	r3, [r5, #12]
 8007c54:	065b      	lsls	r3, r3, #25
 8007c56:	f53f af2d 	bmi.w	8007ab4 <_svfiprintf_r+0x28>
 8007c5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c5c:	e72c      	b.n	8007ab8 <_svfiprintf_r+0x2c>
 8007c5e:	ab03      	add	r3, sp, #12
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	462a      	mov	r2, r5
 8007c64:	4b05      	ldr	r3, [pc, #20]	@ (8007c7c <_svfiprintf_r+0x1f0>)
 8007c66:	a904      	add	r1, sp, #16
 8007c68:	4638      	mov	r0, r7
 8007c6a:	f7fe f90f 	bl	8005e8c <_printf_i>
 8007c6e:	e7ed      	b.n	8007c4c <_svfiprintf_r+0x1c0>
 8007c70:	08008d98 	.word	0x08008d98
 8007c74:	08008da2 	.word	0x08008da2
 8007c78:	0800595d 	.word	0x0800595d
 8007c7c:	080079d5 	.word	0x080079d5
 8007c80:	08008d9e 	.word	0x08008d9e

08007c84 <__sflush_r>:
 8007c84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8c:	0716      	lsls	r6, r2, #28
 8007c8e:	4605      	mov	r5, r0
 8007c90:	460c      	mov	r4, r1
 8007c92:	d454      	bmi.n	8007d3e <__sflush_r+0xba>
 8007c94:	684b      	ldr	r3, [r1, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	dc02      	bgt.n	8007ca0 <__sflush_r+0x1c>
 8007c9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	dd48      	ble.n	8007d32 <__sflush_r+0xae>
 8007ca0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ca2:	2e00      	cmp	r6, #0
 8007ca4:	d045      	beq.n	8007d32 <__sflush_r+0xae>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007cac:	682f      	ldr	r7, [r5, #0]
 8007cae:	6a21      	ldr	r1, [r4, #32]
 8007cb0:	602b      	str	r3, [r5, #0]
 8007cb2:	d030      	beq.n	8007d16 <__sflush_r+0x92>
 8007cb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	0759      	lsls	r1, r3, #29
 8007cba:	d505      	bpl.n	8007cc8 <__sflush_r+0x44>
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	1ad2      	subs	r2, r2, r3
 8007cc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cc2:	b10b      	cbz	r3, 8007cc8 <__sflush_r+0x44>
 8007cc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cc6:	1ad2      	subs	r2, r2, r3
 8007cc8:	2300      	movs	r3, #0
 8007cca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ccc:	6a21      	ldr	r1, [r4, #32]
 8007cce:	4628      	mov	r0, r5
 8007cd0:	47b0      	blx	r6
 8007cd2:	1c43      	adds	r3, r0, #1
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	d106      	bne.n	8007ce6 <__sflush_r+0x62>
 8007cd8:	6829      	ldr	r1, [r5, #0]
 8007cda:	291d      	cmp	r1, #29
 8007cdc:	d82b      	bhi.n	8007d36 <__sflush_r+0xb2>
 8007cde:	4a2a      	ldr	r2, [pc, #168]	@ (8007d88 <__sflush_r+0x104>)
 8007ce0:	410a      	asrs	r2, r1
 8007ce2:	07d6      	lsls	r6, r2, #31
 8007ce4:	d427      	bmi.n	8007d36 <__sflush_r+0xb2>
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	6062      	str	r2, [r4, #4]
 8007cea:	04d9      	lsls	r1, r3, #19
 8007cec:	6922      	ldr	r2, [r4, #16]
 8007cee:	6022      	str	r2, [r4, #0]
 8007cf0:	d504      	bpl.n	8007cfc <__sflush_r+0x78>
 8007cf2:	1c42      	adds	r2, r0, #1
 8007cf4:	d101      	bne.n	8007cfa <__sflush_r+0x76>
 8007cf6:	682b      	ldr	r3, [r5, #0]
 8007cf8:	b903      	cbnz	r3, 8007cfc <__sflush_r+0x78>
 8007cfa:	6560      	str	r0, [r4, #84]	@ 0x54
 8007cfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cfe:	602f      	str	r7, [r5, #0]
 8007d00:	b1b9      	cbz	r1, 8007d32 <__sflush_r+0xae>
 8007d02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d06:	4299      	cmp	r1, r3
 8007d08:	d002      	beq.n	8007d10 <__sflush_r+0x8c>
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f7ff f9e0 	bl	80070d0 <_free_r>
 8007d10:	2300      	movs	r3, #0
 8007d12:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d14:	e00d      	b.n	8007d32 <__sflush_r+0xae>
 8007d16:	2301      	movs	r3, #1
 8007d18:	4628      	mov	r0, r5
 8007d1a:	47b0      	blx	r6
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	1c50      	adds	r0, r2, #1
 8007d20:	d1c9      	bne.n	8007cb6 <__sflush_r+0x32>
 8007d22:	682b      	ldr	r3, [r5, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d0c6      	beq.n	8007cb6 <__sflush_r+0x32>
 8007d28:	2b1d      	cmp	r3, #29
 8007d2a:	d001      	beq.n	8007d30 <__sflush_r+0xac>
 8007d2c:	2b16      	cmp	r3, #22
 8007d2e:	d11e      	bne.n	8007d6e <__sflush_r+0xea>
 8007d30:	602f      	str	r7, [r5, #0]
 8007d32:	2000      	movs	r0, #0
 8007d34:	e022      	b.n	8007d7c <__sflush_r+0xf8>
 8007d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d3a:	b21b      	sxth	r3, r3
 8007d3c:	e01b      	b.n	8007d76 <__sflush_r+0xf2>
 8007d3e:	690f      	ldr	r7, [r1, #16]
 8007d40:	2f00      	cmp	r7, #0
 8007d42:	d0f6      	beq.n	8007d32 <__sflush_r+0xae>
 8007d44:	0793      	lsls	r3, r2, #30
 8007d46:	680e      	ldr	r6, [r1, #0]
 8007d48:	bf08      	it	eq
 8007d4a:	694b      	ldreq	r3, [r1, #20]
 8007d4c:	600f      	str	r7, [r1, #0]
 8007d4e:	bf18      	it	ne
 8007d50:	2300      	movne	r3, #0
 8007d52:	eba6 0807 	sub.w	r8, r6, r7
 8007d56:	608b      	str	r3, [r1, #8]
 8007d58:	f1b8 0f00 	cmp.w	r8, #0
 8007d5c:	dde9      	ble.n	8007d32 <__sflush_r+0xae>
 8007d5e:	6a21      	ldr	r1, [r4, #32]
 8007d60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d62:	4643      	mov	r3, r8
 8007d64:	463a      	mov	r2, r7
 8007d66:	4628      	mov	r0, r5
 8007d68:	47b0      	blx	r6
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	dc08      	bgt.n	8007d80 <__sflush_r+0xfc>
 8007d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d76:	81a3      	strh	r3, [r4, #12]
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d80:	4407      	add	r7, r0
 8007d82:	eba8 0800 	sub.w	r8, r8, r0
 8007d86:	e7e7      	b.n	8007d58 <__sflush_r+0xd4>
 8007d88:	dfbffffe 	.word	0xdfbffffe

08007d8c <_fflush_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	690b      	ldr	r3, [r1, #16]
 8007d90:	4605      	mov	r5, r0
 8007d92:	460c      	mov	r4, r1
 8007d94:	b913      	cbnz	r3, 8007d9c <_fflush_r+0x10>
 8007d96:	2500      	movs	r5, #0
 8007d98:	4628      	mov	r0, r5
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	b118      	cbz	r0, 8007da6 <_fflush_r+0x1a>
 8007d9e:	6a03      	ldr	r3, [r0, #32]
 8007da0:	b90b      	cbnz	r3, 8007da6 <_fflush_r+0x1a>
 8007da2:	f7fe fa1f 	bl	80061e4 <__sinit>
 8007da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0f3      	beq.n	8007d96 <_fflush_r+0xa>
 8007dae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007db0:	07d0      	lsls	r0, r2, #31
 8007db2:	d404      	bmi.n	8007dbe <_fflush_r+0x32>
 8007db4:	0599      	lsls	r1, r3, #22
 8007db6:	d402      	bmi.n	8007dbe <_fflush_r+0x32>
 8007db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dba:	f7fe fb2a 	bl	8006412 <__retarget_lock_acquire_recursive>
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	f7ff ff5f 	bl	8007c84 <__sflush_r>
 8007dc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dc8:	07da      	lsls	r2, r3, #31
 8007dca:	4605      	mov	r5, r0
 8007dcc:	d4e4      	bmi.n	8007d98 <_fflush_r+0xc>
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	059b      	lsls	r3, r3, #22
 8007dd2:	d4e1      	bmi.n	8007d98 <_fflush_r+0xc>
 8007dd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dd6:	f7fe fb1d 	bl	8006414 <__retarget_lock_release_recursive>
 8007dda:	e7dd      	b.n	8007d98 <_fflush_r+0xc>

08007ddc <memmove>:
 8007ddc:	4288      	cmp	r0, r1
 8007dde:	b510      	push	{r4, lr}
 8007de0:	eb01 0402 	add.w	r4, r1, r2
 8007de4:	d902      	bls.n	8007dec <memmove+0x10>
 8007de6:	4284      	cmp	r4, r0
 8007de8:	4623      	mov	r3, r4
 8007dea:	d807      	bhi.n	8007dfc <memmove+0x20>
 8007dec:	1e43      	subs	r3, r0, #1
 8007dee:	42a1      	cmp	r1, r4
 8007df0:	d008      	beq.n	8007e04 <memmove+0x28>
 8007df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007df6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dfa:	e7f8      	b.n	8007dee <memmove+0x12>
 8007dfc:	4402      	add	r2, r0
 8007dfe:	4601      	mov	r1, r0
 8007e00:	428a      	cmp	r2, r1
 8007e02:	d100      	bne.n	8007e06 <memmove+0x2a>
 8007e04:	bd10      	pop	{r4, pc}
 8007e06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e0e:	e7f7      	b.n	8007e00 <memmove+0x24>

08007e10 <_sbrk_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4d06      	ldr	r5, [pc, #24]	@ (8007e2c <_sbrk_r+0x1c>)
 8007e14:	2300      	movs	r3, #0
 8007e16:	4604      	mov	r4, r0
 8007e18:	4608      	mov	r0, r1
 8007e1a:	602b      	str	r3, [r5, #0]
 8007e1c:	f7f9 fe78 	bl	8001b10 <_sbrk>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_sbrk_r+0x1a>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_sbrk_r+0x1a>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	20000918 	.word	0x20000918

08007e30 <__assert_func>:
 8007e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e32:	4614      	mov	r4, r2
 8007e34:	461a      	mov	r2, r3
 8007e36:	4b09      	ldr	r3, [pc, #36]	@ (8007e5c <__assert_func+0x2c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	68d8      	ldr	r0, [r3, #12]
 8007e3e:	b954      	cbnz	r4, 8007e56 <__assert_func+0x26>
 8007e40:	4b07      	ldr	r3, [pc, #28]	@ (8007e60 <__assert_func+0x30>)
 8007e42:	461c      	mov	r4, r3
 8007e44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e48:	9100      	str	r1, [sp, #0]
 8007e4a:	462b      	mov	r3, r5
 8007e4c:	4905      	ldr	r1, [pc, #20]	@ (8007e64 <__assert_func+0x34>)
 8007e4e:	f000 f86f 	bl	8007f30 <fiprintf>
 8007e52:	f000 f87f 	bl	8007f54 <abort>
 8007e56:	4b04      	ldr	r3, [pc, #16]	@ (8007e68 <__assert_func+0x38>)
 8007e58:	e7f4      	b.n	8007e44 <__assert_func+0x14>
 8007e5a:	bf00      	nop
 8007e5c:	20000020 	.word	0x20000020
 8007e60:	08008dee 	.word	0x08008dee
 8007e64:	08008dc0 	.word	0x08008dc0
 8007e68:	08008db3 	.word	0x08008db3

08007e6c <_calloc_r>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	fba1 5402 	umull	r5, r4, r1, r2
 8007e72:	b93c      	cbnz	r4, 8007e84 <_calloc_r+0x18>
 8007e74:	4629      	mov	r1, r5
 8007e76:	f7ff f99f 	bl	80071b8 <_malloc_r>
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	b928      	cbnz	r0, 8007e8a <_calloc_r+0x1e>
 8007e7e:	2600      	movs	r6, #0
 8007e80:	4630      	mov	r0, r6
 8007e82:	bd70      	pop	{r4, r5, r6, pc}
 8007e84:	220c      	movs	r2, #12
 8007e86:	6002      	str	r2, [r0, #0]
 8007e88:	e7f9      	b.n	8007e7e <_calloc_r+0x12>
 8007e8a:	462a      	mov	r2, r5
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	f7fe fa42 	bl	8006316 <memset>
 8007e92:	e7f5      	b.n	8007e80 <_calloc_r+0x14>

08007e94 <__ascii_mbtowc>:
 8007e94:	b082      	sub	sp, #8
 8007e96:	b901      	cbnz	r1, 8007e9a <__ascii_mbtowc+0x6>
 8007e98:	a901      	add	r1, sp, #4
 8007e9a:	b142      	cbz	r2, 8007eae <__ascii_mbtowc+0x1a>
 8007e9c:	b14b      	cbz	r3, 8007eb2 <__ascii_mbtowc+0x1e>
 8007e9e:	7813      	ldrb	r3, [r2, #0]
 8007ea0:	600b      	str	r3, [r1, #0]
 8007ea2:	7812      	ldrb	r2, [r2, #0]
 8007ea4:	1e10      	subs	r0, r2, #0
 8007ea6:	bf18      	it	ne
 8007ea8:	2001      	movne	r0, #1
 8007eaa:	b002      	add	sp, #8
 8007eac:	4770      	bx	lr
 8007eae:	4610      	mov	r0, r2
 8007eb0:	e7fb      	b.n	8007eaa <__ascii_mbtowc+0x16>
 8007eb2:	f06f 0001 	mvn.w	r0, #1
 8007eb6:	e7f8      	b.n	8007eaa <__ascii_mbtowc+0x16>

08007eb8 <_realloc_r>:
 8007eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	4615      	mov	r5, r2
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	b921      	cbnz	r1, 8007ece <_realloc_r+0x16>
 8007ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec8:	4611      	mov	r1, r2
 8007eca:	f7ff b975 	b.w	80071b8 <_malloc_r>
 8007ece:	b92a      	cbnz	r2, 8007edc <_realloc_r+0x24>
 8007ed0:	f7ff f8fe 	bl	80070d0 <_free_r>
 8007ed4:	2400      	movs	r4, #0
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007edc:	f000 f841 	bl	8007f62 <_malloc_usable_size_r>
 8007ee0:	4285      	cmp	r5, r0
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	d802      	bhi.n	8007eec <_realloc_r+0x34>
 8007ee6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007eea:	d8f4      	bhi.n	8007ed6 <_realloc_r+0x1e>
 8007eec:	4629      	mov	r1, r5
 8007eee:	4640      	mov	r0, r8
 8007ef0:	f7ff f962 	bl	80071b8 <_malloc_r>
 8007ef4:	4607      	mov	r7, r0
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d0ec      	beq.n	8007ed4 <_realloc_r+0x1c>
 8007efa:	42b5      	cmp	r5, r6
 8007efc:	462a      	mov	r2, r5
 8007efe:	4621      	mov	r1, r4
 8007f00:	bf28      	it	cs
 8007f02:	4632      	movcs	r2, r6
 8007f04:	f7fe fa87 	bl	8006416 <memcpy>
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7ff f8e0 	bl	80070d0 <_free_r>
 8007f10:	463c      	mov	r4, r7
 8007f12:	e7e0      	b.n	8007ed6 <_realloc_r+0x1e>

08007f14 <__ascii_wctomb>:
 8007f14:	4603      	mov	r3, r0
 8007f16:	4608      	mov	r0, r1
 8007f18:	b141      	cbz	r1, 8007f2c <__ascii_wctomb+0x18>
 8007f1a:	2aff      	cmp	r2, #255	@ 0xff
 8007f1c:	d904      	bls.n	8007f28 <__ascii_wctomb+0x14>
 8007f1e:	228a      	movs	r2, #138	@ 0x8a
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	f04f 30ff 	mov.w	r0, #4294967295
 8007f26:	4770      	bx	lr
 8007f28:	700a      	strb	r2, [r1, #0]
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	4770      	bx	lr
	...

08007f30 <fiprintf>:
 8007f30:	b40e      	push	{r1, r2, r3}
 8007f32:	b503      	push	{r0, r1, lr}
 8007f34:	4601      	mov	r1, r0
 8007f36:	ab03      	add	r3, sp, #12
 8007f38:	4805      	ldr	r0, [pc, #20]	@ (8007f50 <fiprintf+0x20>)
 8007f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f3e:	6800      	ldr	r0, [r0, #0]
 8007f40:	9301      	str	r3, [sp, #4]
 8007f42:	f000 f83f 	bl	8007fc4 <_vfiprintf_r>
 8007f46:	b002      	add	sp, #8
 8007f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f4c:	b003      	add	sp, #12
 8007f4e:	4770      	bx	lr
 8007f50:	20000020 	.word	0x20000020

08007f54 <abort>:
 8007f54:	b508      	push	{r3, lr}
 8007f56:	2006      	movs	r0, #6
 8007f58:	f000 fa08 	bl	800836c <raise>
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	f7f9 fd5f 	bl	8001a20 <_exit>

08007f62 <_malloc_usable_size_r>:
 8007f62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f66:	1f18      	subs	r0, r3, #4
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	bfbc      	itt	lt
 8007f6c:	580b      	ldrlt	r3, [r1, r0]
 8007f6e:	18c0      	addlt	r0, r0, r3
 8007f70:	4770      	bx	lr

08007f72 <__sfputc_r>:
 8007f72:	6893      	ldr	r3, [r2, #8]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	b410      	push	{r4}
 8007f7a:	6093      	str	r3, [r2, #8]
 8007f7c:	da08      	bge.n	8007f90 <__sfputc_r+0x1e>
 8007f7e:	6994      	ldr	r4, [r2, #24]
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	db01      	blt.n	8007f88 <__sfputc_r+0x16>
 8007f84:	290a      	cmp	r1, #10
 8007f86:	d103      	bne.n	8007f90 <__sfputc_r+0x1e>
 8007f88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f8c:	f000 b932 	b.w	80081f4 <__swbuf_r>
 8007f90:	6813      	ldr	r3, [r2, #0]
 8007f92:	1c58      	adds	r0, r3, #1
 8007f94:	6010      	str	r0, [r2, #0]
 8007f96:	7019      	strb	r1, [r3, #0]
 8007f98:	4608      	mov	r0, r1
 8007f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <__sfputs_r>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	460f      	mov	r7, r1
 8007fa6:	4614      	mov	r4, r2
 8007fa8:	18d5      	adds	r5, r2, r3
 8007faa:	42ac      	cmp	r4, r5
 8007fac:	d101      	bne.n	8007fb2 <__sfputs_r+0x12>
 8007fae:	2000      	movs	r0, #0
 8007fb0:	e007      	b.n	8007fc2 <__sfputs_r+0x22>
 8007fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb6:	463a      	mov	r2, r7
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f7ff ffda 	bl	8007f72 <__sfputc_r>
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	d1f3      	bne.n	8007faa <__sfputs_r+0xa>
 8007fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fc4 <_vfiprintf_r>:
 8007fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc8:	460d      	mov	r5, r1
 8007fca:	b09d      	sub	sp, #116	@ 0x74
 8007fcc:	4614      	mov	r4, r2
 8007fce:	4698      	mov	r8, r3
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	b118      	cbz	r0, 8007fdc <_vfiprintf_r+0x18>
 8007fd4:	6a03      	ldr	r3, [r0, #32]
 8007fd6:	b90b      	cbnz	r3, 8007fdc <_vfiprintf_r+0x18>
 8007fd8:	f7fe f904 	bl	80061e4 <__sinit>
 8007fdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fde:	07d9      	lsls	r1, r3, #31
 8007fe0:	d405      	bmi.n	8007fee <_vfiprintf_r+0x2a>
 8007fe2:	89ab      	ldrh	r3, [r5, #12]
 8007fe4:	059a      	lsls	r2, r3, #22
 8007fe6:	d402      	bmi.n	8007fee <_vfiprintf_r+0x2a>
 8007fe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fea:	f7fe fa12 	bl	8006412 <__retarget_lock_acquire_recursive>
 8007fee:	89ab      	ldrh	r3, [r5, #12]
 8007ff0:	071b      	lsls	r3, r3, #28
 8007ff2:	d501      	bpl.n	8007ff8 <_vfiprintf_r+0x34>
 8007ff4:	692b      	ldr	r3, [r5, #16]
 8007ff6:	b99b      	cbnz	r3, 8008020 <_vfiprintf_r+0x5c>
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f000 f938 	bl	8008270 <__swsetup_r>
 8008000:	b170      	cbz	r0, 8008020 <_vfiprintf_r+0x5c>
 8008002:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008004:	07dc      	lsls	r4, r3, #31
 8008006:	d504      	bpl.n	8008012 <_vfiprintf_r+0x4e>
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	b01d      	add	sp, #116	@ 0x74
 800800e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008012:	89ab      	ldrh	r3, [r5, #12]
 8008014:	0598      	lsls	r0, r3, #22
 8008016:	d4f7      	bmi.n	8008008 <_vfiprintf_r+0x44>
 8008018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800801a:	f7fe f9fb 	bl	8006414 <__retarget_lock_release_recursive>
 800801e:	e7f3      	b.n	8008008 <_vfiprintf_r+0x44>
 8008020:	2300      	movs	r3, #0
 8008022:	9309      	str	r3, [sp, #36]	@ 0x24
 8008024:	2320      	movs	r3, #32
 8008026:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800802a:	f8cd 800c 	str.w	r8, [sp, #12]
 800802e:	2330      	movs	r3, #48	@ 0x30
 8008030:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80081e0 <_vfiprintf_r+0x21c>
 8008034:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008038:	f04f 0901 	mov.w	r9, #1
 800803c:	4623      	mov	r3, r4
 800803e:	469a      	mov	sl, r3
 8008040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008044:	b10a      	cbz	r2, 800804a <_vfiprintf_r+0x86>
 8008046:	2a25      	cmp	r2, #37	@ 0x25
 8008048:	d1f9      	bne.n	800803e <_vfiprintf_r+0x7a>
 800804a:	ebba 0b04 	subs.w	fp, sl, r4
 800804e:	d00b      	beq.n	8008068 <_vfiprintf_r+0xa4>
 8008050:	465b      	mov	r3, fp
 8008052:	4622      	mov	r2, r4
 8008054:	4629      	mov	r1, r5
 8008056:	4630      	mov	r0, r6
 8008058:	f7ff ffa2 	bl	8007fa0 <__sfputs_r>
 800805c:	3001      	adds	r0, #1
 800805e:	f000 80a7 	beq.w	80081b0 <_vfiprintf_r+0x1ec>
 8008062:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008064:	445a      	add	r2, fp
 8008066:	9209      	str	r2, [sp, #36]	@ 0x24
 8008068:	f89a 3000 	ldrb.w	r3, [sl]
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 809f 	beq.w	80081b0 <_vfiprintf_r+0x1ec>
 8008072:	2300      	movs	r3, #0
 8008074:	f04f 32ff 	mov.w	r2, #4294967295
 8008078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800807c:	f10a 0a01 	add.w	sl, sl, #1
 8008080:	9304      	str	r3, [sp, #16]
 8008082:	9307      	str	r3, [sp, #28]
 8008084:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008088:	931a      	str	r3, [sp, #104]	@ 0x68
 800808a:	4654      	mov	r4, sl
 800808c:	2205      	movs	r2, #5
 800808e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008092:	4853      	ldr	r0, [pc, #332]	@ (80081e0 <_vfiprintf_r+0x21c>)
 8008094:	f7f8 f89c 	bl	80001d0 <memchr>
 8008098:	9a04      	ldr	r2, [sp, #16]
 800809a:	b9d8      	cbnz	r0, 80080d4 <_vfiprintf_r+0x110>
 800809c:	06d1      	lsls	r1, r2, #27
 800809e:	bf44      	itt	mi
 80080a0:	2320      	movmi	r3, #32
 80080a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080a6:	0713      	lsls	r3, r2, #28
 80080a8:	bf44      	itt	mi
 80080aa:	232b      	movmi	r3, #43	@ 0x2b
 80080ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080b0:	f89a 3000 	ldrb.w	r3, [sl]
 80080b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80080b6:	d015      	beq.n	80080e4 <_vfiprintf_r+0x120>
 80080b8:	9a07      	ldr	r2, [sp, #28]
 80080ba:	4654      	mov	r4, sl
 80080bc:	2000      	movs	r0, #0
 80080be:	f04f 0c0a 	mov.w	ip, #10
 80080c2:	4621      	mov	r1, r4
 80080c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c8:	3b30      	subs	r3, #48	@ 0x30
 80080ca:	2b09      	cmp	r3, #9
 80080cc:	d94b      	bls.n	8008166 <_vfiprintf_r+0x1a2>
 80080ce:	b1b0      	cbz	r0, 80080fe <_vfiprintf_r+0x13a>
 80080d0:	9207      	str	r2, [sp, #28]
 80080d2:	e014      	b.n	80080fe <_vfiprintf_r+0x13a>
 80080d4:	eba0 0308 	sub.w	r3, r0, r8
 80080d8:	fa09 f303 	lsl.w	r3, r9, r3
 80080dc:	4313      	orrs	r3, r2
 80080de:	9304      	str	r3, [sp, #16]
 80080e0:	46a2      	mov	sl, r4
 80080e2:	e7d2      	b.n	800808a <_vfiprintf_r+0xc6>
 80080e4:	9b03      	ldr	r3, [sp, #12]
 80080e6:	1d19      	adds	r1, r3, #4
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	9103      	str	r1, [sp, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	bfbb      	ittet	lt
 80080f0:	425b      	neglt	r3, r3
 80080f2:	f042 0202 	orrlt.w	r2, r2, #2
 80080f6:	9307      	strge	r3, [sp, #28]
 80080f8:	9307      	strlt	r3, [sp, #28]
 80080fa:	bfb8      	it	lt
 80080fc:	9204      	strlt	r2, [sp, #16]
 80080fe:	7823      	ldrb	r3, [r4, #0]
 8008100:	2b2e      	cmp	r3, #46	@ 0x2e
 8008102:	d10a      	bne.n	800811a <_vfiprintf_r+0x156>
 8008104:	7863      	ldrb	r3, [r4, #1]
 8008106:	2b2a      	cmp	r3, #42	@ 0x2a
 8008108:	d132      	bne.n	8008170 <_vfiprintf_r+0x1ac>
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	1d1a      	adds	r2, r3, #4
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	9203      	str	r2, [sp, #12]
 8008112:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008116:	3402      	adds	r4, #2
 8008118:	9305      	str	r3, [sp, #20]
 800811a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80081f0 <_vfiprintf_r+0x22c>
 800811e:	7821      	ldrb	r1, [r4, #0]
 8008120:	2203      	movs	r2, #3
 8008122:	4650      	mov	r0, sl
 8008124:	f7f8 f854 	bl	80001d0 <memchr>
 8008128:	b138      	cbz	r0, 800813a <_vfiprintf_r+0x176>
 800812a:	9b04      	ldr	r3, [sp, #16]
 800812c:	eba0 000a 	sub.w	r0, r0, sl
 8008130:	2240      	movs	r2, #64	@ 0x40
 8008132:	4082      	lsls	r2, r0
 8008134:	4313      	orrs	r3, r2
 8008136:	3401      	adds	r4, #1
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800813e:	4829      	ldr	r0, [pc, #164]	@ (80081e4 <_vfiprintf_r+0x220>)
 8008140:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008144:	2206      	movs	r2, #6
 8008146:	f7f8 f843 	bl	80001d0 <memchr>
 800814a:	2800      	cmp	r0, #0
 800814c:	d03f      	beq.n	80081ce <_vfiprintf_r+0x20a>
 800814e:	4b26      	ldr	r3, [pc, #152]	@ (80081e8 <_vfiprintf_r+0x224>)
 8008150:	bb1b      	cbnz	r3, 800819a <_vfiprintf_r+0x1d6>
 8008152:	9b03      	ldr	r3, [sp, #12]
 8008154:	3307      	adds	r3, #7
 8008156:	f023 0307 	bic.w	r3, r3, #7
 800815a:	3308      	adds	r3, #8
 800815c:	9303      	str	r3, [sp, #12]
 800815e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008160:	443b      	add	r3, r7
 8008162:	9309      	str	r3, [sp, #36]	@ 0x24
 8008164:	e76a      	b.n	800803c <_vfiprintf_r+0x78>
 8008166:	fb0c 3202 	mla	r2, ip, r2, r3
 800816a:	460c      	mov	r4, r1
 800816c:	2001      	movs	r0, #1
 800816e:	e7a8      	b.n	80080c2 <_vfiprintf_r+0xfe>
 8008170:	2300      	movs	r3, #0
 8008172:	3401      	adds	r4, #1
 8008174:	9305      	str	r3, [sp, #20]
 8008176:	4619      	mov	r1, r3
 8008178:	f04f 0c0a 	mov.w	ip, #10
 800817c:	4620      	mov	r0, r4
 800817e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008182:	3a30      	subs	r2, #48	@ 0x30
 8008184:	2a09      	cmp	r2, #9
 8008186:	d903      	bls.n	8008190 <_vfiprintf_r+0x1cc>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0c6      	beq.n	800811a <_vfiprintf_r+0x156>
 800818c:	9105      	str	r1, [sp, #20]
 800818e:	e7c4      	b.n	800811a <_vfiprintf_r+0x156>
 8008190:	fb0c 2101 	mla	r1, ip, r1, r2
 8008194:	4604      	mov	r4, r0
 8008196:	2301      	movs	r3, #1
 8008198:	e7f0      	b.n	800817c <_vfiprintf_r+0x1b8>
 800819a:	ab03      	add	r3, sp, #12
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	462a      	mov	r2, r5
 80081a0:	4b12      	ldr	r3, [pc, #72]	@ (80081ec <_vfiprintf_r+0x228>)
 80081a2:	a904      	add	r1, sp, #16
 80081a4:	4630      	mov	r0, r6
 80081a6:	f7fd fbd9 	bl	800595c <_printf_float>
 80081aa:	4607      	mov	r7, r0
 80081ac:	1c78      	adds	r0, r7, #1
 80081ae:	d1d6      	bne.n	800815e <_vfiprintf_r+0x19a>
 80081b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081b2:	07d9      	lsls	r1, r3, #31
 80081b4:	d405      	bmi.n	80081c2 <_vfiprintf_r+0x1fe>
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	059a      	lsls	r2, r3, #22
 80081ba:	d402      	bmi.n	80081c2 <_vfiprintf_r+0x1fe>
 80081bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081be:	f7fe f929 	bl	8006414 <__retarget_lock_release_recursive>
 80081c2:	89ab      	ldrh	r3, [r5, #12]
 80081c4:	065b      	lsls	r3, r3, #25
 80081c6:	f53f af1f 	bmi.w	8008008 <_vfiprintf_r+0x44>
 80081ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081cc:	e71e      	b.n	800800c <_vfiprintf_r+0x48>
 80081ce:	ab03      	add	r3, sp, #12
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	462a      	mov	r2, r5
 80081d4:	4b05      	ldr	r3, [pc, #20]	@ (80081ec <_vfiprintf_r+0x228>)
 80081d6:	a904      	add	r1, sp, #16
 80081d8:	4630      	mov	r0, r6
 80081da:	f7fd fe57 	bl	8005e8c <_printf_i>
 80081de:	e7e4      	b.n	80081aa <_vfiprintf_r+0x1e6>
 80081e0:	08008d98 	.word	0x08008d98
 80081e4:	08008da2 	.word	0x08008da2
 80081e8:	0800595d 	.word	0x0800595d
 80081ec:	08007fa1 	.word	0x08007fa1
 80081f0:	08008d9e 	.word	0x08008d9e

080081f4 <__swbuf_r>:
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f6:	460e      	mov	r6, r1
 80081f8:	4614      	mov	r4, r2
 80081fa:	4605      	mov	r5, r0
 80081fc:	b118      	cbz	r0, 8008206 <__swbuf_r+0x12>
 80081fe:	6a03      	ldr	r3, [r0, #32]
 8008200:	b90b      	cbnz	r3, 8008206 <__swbuf_r+0x12>
 8008202:	f7fd ffef 	bl	80061e4 <__sinit>
 8008206:	69a3      	ldr	r3, [r4, #24]
 8008208:	60a3      	str	r3, [r4, #8]
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	071a      	lsls	r2, r3, #28
 800820e:	d501      	bpl.n	8008214 <__swbuf_r+0x20>
 8008210:	6923      	ldr	r3, [r4, #16]
 8008212:	b943      	cbnz	r3, 8008226 <__swbuf_r+0x32>
 8008214:	4621      	mov	r1, r4
 8008216:	4628      	mov	r0, r5
 8008218:	f000 f82a 	bl	8008270 <__swsetup_r>
 800821c:	b118      	cbz	r0, 8008226 <__swbuf_r+0x32>
 800821e:	f04f 37ff 	mov.w	r7, #4294967295
 8008222:	4638      	mov	r0, r7
 8008224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	6922      	ldr	r2, [r4, #16]
 800822a:	1a98      	subs	r0, r3, r2
 800822c:	6963      	ldr	r3, [r4, #20]
 800822e:	b2f6      	uxtb	r6, r6
 8008230:	4283      	cmp	r3, r0
 8008232:	4637      	mov	r7, r6
 8008234:	dc05      	bgt.n	8008242 <__swbuf_r+0x4e>
 8008236:	4621      	mov	r1, r4
 8008238:	4628      	mov	r0, r5
 800823a:	f7ff fda7 	bl	8007d8c <_fflush_r>
 800823e:	2800      	cmp	r0, #0
 8008240:	d1ed      	bne.n	800821e <__swbuf_r+0x2a>
 8008242:	68a3      	ldr	r3, [r4, #8]
 8008244:	3b01      	subs	r3, #1
 8008246:	60a3      	str	r3, [r4, #8]
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	6022      	str	r2, [r4, #0]
 800824e:	701e      	strb	r6, [r3, #0]
 8008250:	6962      	ldr	r2, [r4, #20]
 8008252:	1c43      	adds	r3, r0, #1
 8008254:	429a      	cmp	r2, r3
 8008256:	d004      	beq.n	8008262 <__swbuf_r+0x6e>
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	07db      	lsls	r3, r3, #31
 800825c:	d5e1      	bpl.n	8008222 <__swbuf_r+0x2e>
 800825e:	2e0a      	cmp	r6, #10
 8008260:	d1df      	bne.n	8008222 <__swbuf_r+0x2e>
 8008262:	4621      	mov	r1, r4
 8008264:	4628      	mov	r0, r5
 8008266:	f7ff fd91 	bl	8007d8c <_fflush_r>
 800826a:	2800      	cmp	r0, #0
 800826c:	d0d9      	beq.n	8008222 <__swbuf_r+0x2e>
 800826e:	e7d6      	b.n	800821e <__swbuf_r+0x2a>

08008270 <__swsetup_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4b29      	ldr	r3, [pc, #164]	@ (8008318 <__swsetup_r+0xa8>)
 8008274:	4605      	mov	r5, r0
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	460c      	mov	r4, r1
 800827a:	b118      	cbz	r0, 8008284 <__swsetup_r+0x14>
 800827c:	6a03      	ldr	r3, [r0, #32]
 800827e:	b90b      	cbnz	r3, 8008284 <__swsetup_r+0x14>
 8008280:	f7fd ffb0 	bl	80061e4 <__sinit>
 8008284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008288:	0719      	lsls	r1, r3, #28
 800828a:	d422      	bmi.n	80082d2 <__swsetup_r+0x62>
 800828c:	06da      	lsls	r2, r3, #27
 800828e:	d407      	bmi.n	80082a0 <__swsetup_r+0x30>
 8008290:	2209      	movs	r2, #9
 8008292:	602a      	str	r2, [r5, #0]
 8008294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008298:	81a3      	strh	r3, [r4, #12]
 800829a:	f04f 30ff 	mov.w	r0, #4294967295
 800829e:	e033      	b.n	8008308 <__swsetup_r+0x98>
 80082a0:	0758      	lsls	r0, r3, #29
 80082a2:	d512      	bpl.n	80082ca <__swsetup_r+0x5a>
 80082a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082a6:	b141      	cbz	r1, 80082ba <__swsetup_r+0x4a>
 80082a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082ac:	4299      	cmp	r1, r3
 80082ae:	d002      	beq.n	80082b6 <__swsetup_r+0x46>
 80082b0:	4628      	mov	r0, r5
 80082b2:	f7fe ff0d 	bl	80070d0 <_free_r>
 80082b6:	2300      	movs	r3, #0
 80082b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082c0:	81a3      	strh	r3, [r4, #12]
 80082c2:	2300      	movs	r3, #0
 80082c4:	6063      	str	r3, [r4, #4]
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f043 0308 	orr.w	r3, r3, #8
 80082d0:	81a3      	strh	r3, [r4, #12]
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	b94b      	cbnz	r3, 80082ea <__swsetup_r+0x7a>
 80082d6:	89a3      	ldrh	r3, [r4, #12]
 80082d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082e0:	d003      	beq.n	80082ea <__swsetup_r+0x7a>
 80082e2:	4621      	mov	r1, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 f883 	bl	80083f0 <__smakebuf_r>
 80082ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ee:	f013 0201 	ands.w	r2, r3, #1
 80082f2:	d00a      	beq.n	800830a <__swsetup_r+0x9a>
 80082f4:	2200      	movs	r2, #0
 80082f6:	60a2      	str	r2, [r4, #8]
 80082f8:	6962      	ldr	r2, [r4, #20]
 80082fa:	4252      	negs	r2, r2
 80082fc:	61a2      	str	r2, [r4, #24]
 80082fe:	6922      	ldr	r2, [r4, #16]
 8008300:	b942      	cbnz	r2, 8008314 <__swsetup_r+0xa4>
 8008302:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008306:	d1c5      	bne.n	8008294 <__swsetup_r+0x24>
 8008308:	bd38      	pop	{r3, r4, r5, pc}
 800830a:	0799      	lsls	r1, r3, #30
 800830c:	bf58      	it	pl
 800830e:	6962      	ldrpl	r2, [r4, #20]
 8008310:	60a2      	str	r2, [r4, #8]
 8008312:	e7f4      	b.n	80082fe <__swsetup_r+0x8e>
 8008314:	2000      	movs	r0, #0
 8008316:	e7f7      	b.n	8008308 <__swsetup_r+0x98>
 8008318:	20000020 	.word	0x20000020

0800831c <_raise_r>:
 800831c:	291f      	cmp	r1, #31
 800831e:	b538      	push	{r3, r4, r5, lr}
 8008320:	4605      	mov	r5, r0
 8008322:	460c      	mov	r4, r1
 8008324:	d904      	bls.n	8008330 <_raise_r+0x14>
 8008326:	2316      	movs	r3, #22
 8008328:	6003      	str	r3, [r0, #0]
 800832a:	f04f 30ff 	mov.w	r0, #4294967295
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008332:	b112      	cbz	r2, 800833a <_raise_r+0x1e>
 8008334:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008338:	b94b      	cbnz	r3, 800834e <_raise_r+0x32>
 800833a:	4628      	mov	r0, r5
 800833c:	f000 f830 	bl	80083a0 <_getpid_r>
 8008340:	4622      	mov	r2, r4
 8008342:	4601      	mov	r1, r0
 8008344:	4628      	mov	r0, r5
 8008346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800834a:	f000 b817 	b.w	800837c <_kill_r>
 800834e:	2b01      	cmp	r3, #1
 8008350:	d00a      	beq.n	8008368 <_raise_r+0x4c>
 8008352:	1c59      	adds	r1, r3, #1
 8008354:	d103      	bne.n	800835e <_raise_r+0x42>
 8008356:	2316      	movs	r3, #22
 8008358:	6003      	str	r3, [r0, #0]
 800835a:	2001      	movs	r0, #1
 800835c:	e7e7      	b.n	800832e <_raise_r+0x12>
 800835e:	2100      	movs	r1, #0
 8008360:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008364:	4620      	mov	r0, r4
 8008366:	4798      	blx	r3
 8008368:	2000      	movs	r0, #0
 800836a:	e7e0      	b.n	800832e <_raise_r+0x12>

0800836c <raise>:
 800836c:	4b02      	ldr	r3, [pc, #8]	@ (8008378 <raise+0xc>)
 800836e:	4601      	mov	r1, r0
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	f7ff bfd3 	b.w	800831c <_raise_r>
 8008376:	bf00      	nop
 8008378:	20000020 	.word	0x20000020

0800837c <_kill_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	4d07      	ldr	r5, [pc, #28]	@ (800839c <_kill_r+0x20>)
 8008380:	2300      	movs	r3, #0
 8008382:	4604      	mov	r4, r0
 8008384:	4608      	mov	r0, r1
 8008386:	4611      	mov	r1, r2
 8008388:	602b      	str	r3, [r5, #0]
 800838a:	f7f9 fb39 	bl	8001a00 <_kill>
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	d102      	bne.n	8008398 <_kill_r+0x1c>
 8008392:	682b      	ldr	r3, [r5, #0]
 8008394:	b103      	cbz	r3, 8008398 <_kill_r+0x1c>
 8008396:	6023      	str	r3, [r4, #0]
 8008398:	bd38      	pop	{r3, r4, r5, pc}
 800839a:	bf00      	nop
 800839c:	20000918 	.word	0x20000918

080083a0 <_getpid_r>:
 80083a0:	f7f9 bb26 	b.w	80019f0 <_getpid>

080083a4 <__swhatbuf_r>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	460c      	mov	r4, r1
 80083a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ac:	2900      	cmp	r1, #0
 80083ae:	b096      	sub	sp, #88	@ 0x58
 80083b0:	4615      	mov	r5, r2
 80083b2:	461e      	mov	r6, r3
 80083b4:	da0d      	bge.n	80083d2 <__swhatbuf_r+0x2e>
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083bc:	f04f 0100 	mov.w	r1, #0
 80083c0:	bf14      	ite	ne
 80083c2:	2340      	movne	r3, #64	@ 0x40
 80083c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083c8:	2000      	movs	r0, #0
 80083ca:	6031      	str	r1, [r6, #0]
 80083cc:	602b      	str	r3, [r5, #0]
 80083ce:	b016      	add	sp, #88	@ 0x58
 80083d0:	bd70      	pop	{r4, r5, r6, pc}
 80083d2:	466a      	mov	r2, sp
 80083d4:	f000 f848 	bl	8008468 <_fstat_r>
 80083d8:	2800      	cmp	r0, #0
 80083da:	dbec      	blt.n	80083b6 <__swhatbuf_r+0x12>
 80083dc:	9901      	ldr	r1, [sp, #4]
 80083de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083e6:	4259      	negs	r1, r3
 80083e8:	4159      	adcs	r1, r3
 80083ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083ee:	e7eb      	b.n	80083c8 <__swhatbuf_r+0x24>

080083f0 <__smakebuf_r>:
 80083f0:	898b      	ldrh	r3, [r1, #12]
 80083f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083f4:	079d      	lsls	r5, r3, #30
 80083f6:	4606      	mov	r6, r0
 80083f8:	460c      	mov	r4, r1
 80083fa:	d507      	bpl.n	800840c <__smakebuf_r+0x1c>
 80083fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	6123      	str	r3, [r4, #16]
 8008404:	2301      	movs	r3, #1
 8008406:	6163      	str	r3, [r4, #20]
 8008408:	b003      	add	sp, #12
 800840a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800840c:	ab01      	add	r3, sp, #4
 800840e:	466a      	mov	r2, sp
 8008410:	f7ff ffc8 	bl	80083a4 <__swhatbuf_r>
 8008414:	9f00      	ldr	r7, [sp, #0]
 8008416:	4605      	mov	r5, r0
 8008418:	4639      	mov	r1, r7
 800841a:	4630      	mov	r0, r6
 800841c:	f7fe fecc 	bl	80071b8 <_malloc_r>
 8008420:	b948      	cbnz	r0, 8008436 <__smakebuf_r+0x46>
 8008422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008426:	059a      	lsls	r2, r3, #22
 8008428:	d4ee      	bmi.n	8008408 <__smakebuf_r+0x18>
 800842a:	f023 0303 	bic.w	r3, r3, #3
 800842e:	f043 0302 	orr.w	r3, r3, #2
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	e7e2      	b.n	80083fc <__smakebuf_r+0xc>
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	6020      	str	r0, [r4, #0]
 800843a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800843e:	81a3      	strh	r3, [r4, #12]
 8008440:	9b01      	ldr	r3, [sp, #4]
 8008442:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008446:	b15b      	cbz	r3, 8008460 <__smakebuf_r+0x70>
 8008448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800844c:	4630      	mov	r0, r6
 800844e:	f000 f81d 	bl	800848c <_isatty_r>
 8008452:	b128      	cbz	r0, 8008460 <__smakebuf_r+0x70>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	f023 0303 	bic.w	r3, r3, #3
 800845a:	f043 0301 	orr.w	r3, r3, #1
 800845e:	81a3      	strh	r3, [r4, #12]
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	431d      	orrs	r5, r3
 8008464:	81a5      	strh	r5, [r4, #12]
 8008466:	e7cf      	b.n	8008408 <__smakebuf_r+0x18>

08008468 <_fstat_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4d07      	ldr	r5, [pc, #28]	@ (8008488 <_fstat_r+0x20>)
 800846c:	2300      	movs	r3, #0
 800846e:	4604      	mov	r4, r0
 8008470:	4608      	mov	r0, r1
 8008472:	4611      	mov	r1, r2
 8008474:	602b      	str	r3, [r5, #0]
 8008476:	f7f9 fb23 	bl	8001ac0 <_fstat>
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	d102      	bne.n	8008484 <_fstat_r+0x1c>
 800847e:	682b      	ldr	r3, [r5, #0]
 8008480:	b103      	cbz	r3, 8008484 <_fstat_r+0x1c>
 8008482:	6023      	str	r3, [r4, #0]
 8008484:	bd38      	pop	{r3, r4, r5, pc}
 8008486:	bf00      	nop
 8008488:	20000918 	.word	0x20000918

0800848c <_isatty_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d06      	ldr	r5, [pc, #24]	@ (80084a8 <_isatty_r+0x1c>)
 8008490:	2300      	movs	r3, #0
 8008492:	4604      	mov	r4, r0
 8008494:	4608      	mov	r0, r1
 8008496:	602b      	str	r3, [r5, #0]
 8008498:	f7f9 fb22 	bl	8001ae0 <_isatty>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_isatty_r+0x1a>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_isatty_r+0x1a>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	20000918 	.word	0x20000918

080084ac <_init>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	bf00      	nop
 80084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b2:	bc08      	pop	{r3}
 80084b4:	469e      	mov	lr, r3
 80084b6:	4770      	bx	lr

080084b8 <_fini>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	bf00      	nop
 80084bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084be:	bc08      	pop	{r3}
 80084c0:	469e      	mov	lr, r3
 80084c2:	4770      	bx	lr
